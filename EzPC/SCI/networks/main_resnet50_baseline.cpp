/*
This is an autogenerated file, generated using the EzPC compiler.
*/


#include "library_fixed.h"
#include <iostream>
using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 4;
int32_t bitlength = 41;
int32_t kScale = 12;
int32_t kDoExtractTruncate = 1;

void TanhImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint64_t* A, uint64_t* B){
TanH( (int32_t)1, size, sA, sB, bwA, bwB, A, B);
}


void SigmoidImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint64_t* A, uint64_t* B){
Sigmoid( (int32_t)1, size, sA, sB, bwA, bwB, A, B);
}


void SqrtImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, uint64_t* A, uint64_t* B){
Sqrt( (int32_t)1, size, sA, sB, bwA, bwB, inverse, A, B);
}

void MatAddBroadCast2(int32_t a1, int32_t a2, int32_t b1, int32_t s1, int32_t s2, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,s1,s2,i1,i2), Arr1DIdxRowM(B,s2,i2));
}
}
}

void MatAdd2(int32_t a1, int32_t a2, int32_t b1, int32_t b2, int32_t s1, int32_t s2, uint64_t* A, uint64_t* B, uint64_t* outArr){

int64_t aIdx1 =  (int32_t)0;

int64_t aIdx2 =  (int32_t)0;

int64_t bIdx1 =  (int32_t)0;

int64_t bIdx2 =  (int32_t)0;
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,a1,a2,aIdx1,aIdx2), Arr2DIdxRowM(B,b1,b2,bIdx1,bIdx2));
}
}
}

void MatAddBroadCast4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,s1,s2,s3,s4,i1,i2,i3,i4), Arr1DIdxRowM(B,s4,i4));
}
}
}
}
}

void MatAddBroadCast5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5), Arr1DIdxRowM(B,s5,i5));
}
}
}
}
}
}

void MatAdd4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* A, uint64_t* B, uint64_t* outArr){

int64_t aIdx1 =  (int32_t)0;

int64_t aIdx2 =  (int32_t)0;

int64_t aIdx3 =  (int32_t)0;

int64_t aIdx4 =  (int32_t)0;

int64_t bIdx1 =  (int32_t)0;

int64_t bIdx2 =  (int32_t)0;

int64_t bIdx3 =  (int32_t)0;

int64_t bIdx4 =  (int32_t)0;
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,a1,a2,a3,a4,aIdx1,aIdx2,aIdx3,aIdx4), Arr4DIdxRowM(B,b1,b2,b3,b4,bIdx1,bIdx2,bIdx3,bIdx4));
}
}
}
}
}

void MatAdd5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t b5, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* A, uint64_t* B, uint64_t* outArr){

int64_t aIdx1 =  (int32_t)0;

int64_t aIdx2 =  (int32_t)0;

int64_t aIdx3 =  (int32_t)0;

int64_t aIdx4 =  (int32_t)0;

int64_t aIdx5 =  (int32_t)0;

int64_t bIdx1 =  (int32_t)0;

int64_t bIdx2 =  (int32_t)0;

int64_t bIdx3 =  (int32_t)0;

int64_t bIdx4 =  (int32_t)0;

int64_t bIdx5 =  (int32_t)0;
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){
aIdx5 = (a5 ==  (int32_t)1) ?  (int32_t)0 : i5;
bIdx5 = (b5 ==  (int32_t)1) ?  (int32_t)0 : i5;
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,a1,a2,a3,a4,a5,aIdx1,aIdx2,aIdx3,aIdx4,aIdx5), Arr5DIdxRowM(B,b1,b2,b3,b4,b5,bIdx1,bIdx2,bIdx3,bIdx4,bIdx5));
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int64_t val, int64_t* arr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(arr,s1,i1) = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int64_t val, int64_t* arr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(arr,s1,s2,i1,i2) = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int64_t val, int64_t* arr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int64_t val, int64_t* arr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int64_t val, int64_t* arr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(targetArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CopyTensor2(int32_t s1, int32_t s2, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(targetArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(targetArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(targetArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateIdentity11(int32_t s1, uint64_t* fromArr, uint64_t* newArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(newArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CreateIdentity22(int32_t s1, int32_t s2, uint64_t* fromArr, uint64_t* newArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(newArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, uint64_t* fromArr, uint64_t* newArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(newArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* fromArr, uint64_t* newArr){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(newArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, uint64_t* inArr, int32_t perDimSize, int64_t* beginIdx, int64_t* sizeIdx, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,inps1,inps2,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j));
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint64_t* inArr, int32_t perDimSize, int64_t* beginIdx, int64_t* sizeIdx, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
for (uint64_t m =  (int32_t)0; m < s5; m++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inArr,inps1,inps2,inps3,inps4,inps5,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)2) + k),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)3) + l),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)4) + m));
}
}
}
}
}
}

void Concat1T44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, uint64_t* inp2, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,(i1 - inp1s1),i2);
}
} else {
if ((i2 < inp1s2)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,i1,(i2 - inp1s2));
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
}
}
}
}
}
}
}
}
}

void Concat3T4444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
}
}
}
}
}
}
}
}
}
}

void Concat4T44444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
}
}
}
}
}
}
}
}
}
}
}

void Concat5T444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
}
}
}
}
}
}
}
}
}
}
}
}

void Concat6T4444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat7T44444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat8T444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat9T4444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat10T44444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat11T444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat12T4444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat13T44444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat14T444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat15T4444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat16T44444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat17T444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat18T4444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat19T44444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat20T444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat21T4444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat22T44444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat23T444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat24T4444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, uint64_t* inp24, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,i3,(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat25T44444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, uint64_t* inp24, int32_t inp25s1, int32_t inp25s2, int32_t inp25s3, int32_t inp25s4, uint64_t* inp25, int32_t axis, uint64_t* outp){
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1) + inp24s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,((((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1) - inp24s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2) + inp24s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,((((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2) - inp24s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
} else {
if ((i3 < (((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3) + inp24s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,i2,((((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3) - inp24s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
} else {
if ((i4 < (((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4) + inp24s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,i3,(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,i2,i3,((((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4) - inp24s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, uint64_t* inp, int32_t axis, int32_t curCount, int32_t total, uint64_t* out){
for (uint64_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint64_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint64_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint64_t o4 =  (int32_t)0; o4 < O4; o4++){

int64_t i1 = o1;

int64_t i2 = o2;

int64_t i3 = o3;

int64_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
Arr4DIdxRowM(out,O1,O2,O3,O4,o1,o2,o3,o4) = Arr4DIdxRowM(inp,I1,I2,I3,I4,i1,i2,i3,i4);
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CI,CO,fh,fw,ci,co);
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t h =  (int32_t)0; h < finalH; h++){
for (uint64_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int64_t linIdxFilterMult =  (int32_t)0;
for (uint64_t n =  (int32_t)0; n < N; n++){

int64_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int64_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int64_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int64_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){

int64_t curPosH = (leftTopCornerH + fh);

int64_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t reshapedFilterRows = CO;

int64_t reshapedFilterCols = ((FH * FW) * CI);

int64_t reshapedIPRows = ((FH * FW) * CI);

int64_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int64_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int64_t reshapedIPCols = ((N * newH) * newW);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t GIS = (CI / G);

int64_t GOS = (CO / G);
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint64_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint64_t g =  (int32_t)0; g < G; g++){
for (uint64_t h =  (int32_t)0; h < outH; h++){
for (uint64_t w =  (int32_t)0; w < outW; w++){

uint64_t val = funcSSCons( (int64_t)0);

int64_t ci = ((GIS * g) + cig);

int64_t co = ((GOS * g) + cog);

int64_t curPosH = ((strideH * h) - zPadHLeft);
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){

int64_t curPosW = ((strideW * w) - zPadWLeft);
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = SecretAdd(val, SecretMult(Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci), Arr4DIdxRowM(filterArr,FH,FW,(CI / G),CO,fh,fw,(ci / G),co)));
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co) = SecretAdd(Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co), val);
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int64_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, uint64_t* inputArr, uint64_t* outputArr){

int64_t CIG = (CI / G);

int64_t COG = (CO / G);

int64_t startCO = (g * COG);
for (uint64_t co =  (int32_t)0; co < COG; co++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
for (uint64_t ci =  (int32_t)0; ci < CIG; ci++){

int64_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
Arr2DIdxRowM(outputArr,(CO / G),((FH * FW) * (CI / G)),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,(CI / G),CO,fh,fw,ci,(co + startCO));
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, uint64_t* inputArr, uint64_t* outputArr){

int64_t COG = (CO / G);

int64_t startCO = (g * COG);
for (uint64_t co =  (int32_t)0; co < COG; co++){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t h =  (int32_t)0; h < finalH; h++){
for (uint64_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,(co + startCO)) = Arr2DIdxRowM(inputArr,(CO / G),((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int64_t linIdxFilterMult =  (int32_t)0;

int64_t CIG = (CI / G);
for (uint64_t n =  (int32_t)0; n < N; n++){

int64_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int64_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int64_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int64_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){

int64_t curPosH = (leftTopCornerH + fh);

int64_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int64_t startCI = (g * CIG);
for (uint64_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,(ci + startCI));
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CIG) + (fw * CIG)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t CIG = (CI / G);

int64_t reshapedFilterRows = (CO / G);

int64_t reshapedFilterCols = ((FH * FW) * CIG);

int64_t reshapedIPRows = ((FH * FW) * CIG);

int64_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int64_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int64_t reshapedIPCols = ((N * outH) * outW);
for (uint64_t g =  (int32_t)0; g < G; g++){

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t fd =  (int32_t)0; fd < FD; fd++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

int64_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CI,CO,fd,fh,fw,ci,co);
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t d =  (int32_t)0; d < finalD; d++){
for (uint64_t h =  (int32_t)0; h < finalH; h++){
for (uint64_t w =  (int32_t)0; w < finalW; w++){
Arr5DIdxRowM(outputArr,N,finalD,finalH,finalW,CO,n,d,h,w,co) = Arr2DIdxRowM(inputArr,CO,(((N * finalD) * finalH) * finalW),co,((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w));
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int64_t linIdxFilterMult =  (int32_t)0;
for (uint64_t n =  (int32_t)0; n < N; n++){

int64_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int64_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int64_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int64_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int64_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int64_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint64_t fd =  (int32_t)0; fd < FD; fd++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){

int64_t curPosD = (leftTopCornerD + fd);

int64_t curPosH = (leftTopCornerH + fh);

int64_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t reshapedFilterRows = CO;

int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

int64_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int64_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int64_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int64_t reshapedIPCols = (((N * newD) * newH) * newW);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t d =  (int32_t)0; d < outD; d++){
for (uint64_t h =  (int32_t)0; h < outH; h++){
for (uint64_t w =  (int32_t)0; w < outW; w++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint64_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint64_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int64_t curPosD = (fd - zPadDLeft);

int64_t curPosH = (fh - zPadHLeft);

int64_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int64_t curFilterPosD = (fd - (d * strideD));

int64_t curFilterPosH = (fh - (h * strideH));

int64_t curFilterPosW = (fw - (w * strideW));
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CI,CO,curFilterPosD,curFilterPosH,curFilterPosW,ci,co)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int64_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int64_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t h =  (int32_t)0; h < finalH; h++){
for (uint64_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CO,CI,((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int64_t linIdxFilterMult =  (int32_t)0;
for (uint64_t n =  (int32_t)0; n < N; n++){

int64_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int64_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int64_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int64_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int64_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int64_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){

int64_t curPosH = (leftTopCornerH + fh);

int64_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int64_t idxInputH = (curPosH / strideH);

int64_t idxInputW = (curPosW / strideW);
val = Arr4DIdxRowM(inputArr,N,HPrime,WPrime,CI,n,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int64_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t reshapedFilterRows = CO;

int64_t reshapedFilterCols = ((FH * FW) * CI);

int64_t reshapedIPRows = ((FH * FW) * CI);

int64_t reshapedIPCols = ((N * H) * W);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint64_t* inputArr, uint64_t* outputArr){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t fd =  (int32_t)0; fd < FD; fd++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

int64_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CO,CI,((FD -  (int32_t)1) - fd),((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int64_t linIdxFilterMult =  (int32_t)0;
for (uint64_t n =  (int32_t)0; n < N; n++){

int64_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int64_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int64_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int64_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int64_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int64_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int64_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int64_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int64_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint64_t fd =  (int32_t)0; fd < FD; fd++){
for (uint64_t fh =  (int32_t)0; fh < FH; fh++){
for (uint64_t fw =  (int32_t)0; fw < FW; fw++){

int64_t curPosD = (leftTopCornerD + fd);

int64_t curPosH = (leftTopCornerH + fh);

int64_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int64_t idxInputD = (curPosD / strideD);

int64_t idxInputH = (curPosH / strideH);

int64_t idxInputW = (curPosW / strideW);
val = Arr5DIdxRowM(inputArr,N,DPrime,HPrime,WPrime,CI,n,idxInputD,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int64_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int64_t reshapedFilterRows = CO;

int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

int64_t reshapedIPCols = (((N * D) * H) * W);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
for (uint64_t n =  (int32_t)0; n < N; n++){
for (uint64_t co =  (int32_t)0; co < CO; co++){
for (uint64_t d =  (int32_t)0; d < outD; d++){
for (uint64_t h =  (int32_t)0; h < outH; h++){
for (uint64_t w =  (int32_t)0; w < outW; w++){
for (uint64_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint64_t fd = d; fd < (d + FD); fd++){
for (uint64_t fh = h; fh < (h + FH); fh++){
for (uint64_t fw = w; fw < (w + FW); fw++){

int64_t curPosD = ((fd - zPadDLeft) / strideD);

int64_t curPosH = ((fh - zPadHLeft) / strideH);

int64_t curPosW = ((fw - zPadWLeft) / strideW);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int64_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int64_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int64_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CO,CI,curFilterPosD,curFilterPosH,curFilterPosW,co,ci)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,s2,s1,j,i);
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, uint64_t* inpArr, int32_t pads1, int32_t pads2, int64_t* paddings, uint64_t* outArr){

int64_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int64_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int64_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int64_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int64_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int64_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int64_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int64_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = Arr4DIdxRowM(inpArr,inps1,inps2,inps3,inps4,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)));
} else {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint64_t* inpArr, int32_t pads1, int32_t pads2, int64_t* paddings, uint64_t* outArr){

int64_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int64_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int64_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int64_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int64_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int64_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int64_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int64_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));

int64_t lbounds5 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0);

int64_t rbounds5excl = (s5 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)1));
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
for (uint64_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inpArr,inps1,inps2,inps3,inps4,inps5,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)),(m - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0)));
} else {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, uint64_t* inpArr, int32_t pads, int64_t* paddings, uint64_t* outArr){

int64_t lbounds1 = Arr1DIdxRowM(paddings,pads, (int32_t)0);

int64_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings,pads, (int32_t)4));

int64_t lbounds2 = Arr1DIdxRowM(paddings,pads, (int32_t)1);

int64_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings,pads, (int32_t)5));

int64_t lbounds3 = Arr1DIdxRowM(paddings,pads, (int32_t)2);

int64_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings,pads, (int32_t)6));

int64_t lbounds4 = Arr1DIdxRowM(paddings,pads, (int32_t)3);

int64_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings,pads, (int32_t)7));
for (uint64_t i =  (int32_t)0; i < o1; i++){
for (uint64_t j =  (int32_t)0; j < o2; j++){
for (uint64_t k =  (int32_t)0; k < o3; k++){
for (uint64_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = Arr4DIdxRowM(inpArr,i1,i2,i3,i4,(i - Arr1DIdxRowM(paddings,pads, (int32_t)0)),(j - Arr1DIdxRowM(paddings,pads, (int32_t)1)),(k - Arr1DIdxRowM(paddings,pads, (int32_t)2)),(l - Arr1DIdxRowM(paddings,pads, (int32_t)3)));
} else {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < ins1; i++){
for (uint64_t j =  (int32_t)0; j < ins2; j++){
for (uint64_t k =  (int32_t)0; k < ins3; k++){
for (uint64_t l =  (int32_t)0; l < ins4; l++){

int64_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int64_t outIdx1 = (linIdx / s2);

int64_t outIdx2 = (linIdx % s2);
Arr2DIdxRowM(outArr,s1,s2,outIdx1,outIdx2) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i,j,k,l);
}
}
}
}
}

void Squeeze34(int32_t s1, int32_t s2, int32_t s3, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < ins1; i++){
for (uint64_t j =  (int32_t)0; j < ins2; j++){
for (uint64_t k =  (int32_t)0; k < ins3; k++){
for (uint64_t l =  (int32_t)0; l < ins4; l++){

int64_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int64_t outIdx1 = (linIdx / (s2 * s3));

int64_t outIdx2 = ((linIdx - ((outIdx1 * s2) * s3)) / s3);

int64_t outIdx3 = ((linIdx - ((outIdx1 * s2) * s3)) - (outIdx2 * s3));
Arr3DIdxRowM(outArr,s1,s2,s3,outIdx1,outIdx2,outIdx3) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i,j,k,l);
}
}
}
}
}

void Squeeze23(int32_t s1, int32_t s2, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, uint64_t* inArr, uint64_t* outArr){
for (uint64_t i =  (int32_t)0; i < ins1; i++){
for (uint64_t j =  (int32_t)0; j < ins2; j++){
for (uint64_t k =  (int32_t)0; k < ins3; k++){

int64_t linIdx = ((((i * ins2) * ins3) + (j * ins3)) + k);

int64_t outIdx1 = (linIdx / s2);

int64_t outIdx2 = (linIdx % s2);
Arr2DIdxRowM(outArr,s1,s2,outIdx1,outIdx2) = Arr3DIdxRowM(inArr,ins1,ins2,ins3,i,j,k);
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inArr, uint64_t* multArr, uint64_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint64_t* outputArr){

uint64_t* biasArrScaledUp = make_array<uint64_t>(s4);
for (uint64_t ii =  (int32_t)0; ii < s4; ii++){
Arr1DIdxRowM(biasArrScaledUp,s4,ii) = Arr1DIdxRowM(biasArr,s4,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}

int64_t inpSize = (((s1 * s2) * s3) * s4);

uint64_t* inArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multExprAns = make_array<uint64_t>(inpSize);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s4,i4);
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outputArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s4,i4));
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* inArr, uint64_t* multArr, uint64_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint64_t* outputArr){

int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* inArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multExprAns = make_array<uint64_t>(inpSize);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s5,i5);
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

uint64_t* biasArrScaledUp = make_array<uint64_t>(s5);
for (uint64_t ii =  (int32_t)0; ii < s5; ii++){
Arr1DIdxRowM(biasArrScaledUp,s5,ii) = Arr1DIdxRowM(biasArr,s5,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outputArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s5,i5));
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int64_t inpSize = (s1 * s2);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr1,s1,s2,i1,i2);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr2,s1,s2,i1,i2);
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int64_t inpSize = (((s1 * s2) * s3) * s4);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr1,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr2,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr1,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr2,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint64_t* inputArr, int64_t* axes, uint64_t* outputArr){

int64_t divisor = (inS2 * inS3);

int64_t outputSize = (outS1 * outS2);

uint64_t* sumArr = make_array<uint64_t>(outputSize);

uint64_t* outputArrReshaped = make_array<uint64_t>(outputSize);
for (uint64_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint64_t i =  (int32_t)0; i < inS2; i++){
for (uint64_t j =  (int32_t)0; j < inS3; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i,j,i2));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint64_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint64_t* inputArr, int32_t axis1, int32_t axis2, uint64_t* outputArr){

int64_t divisor = (inS3 * inS4);

int64_t outputSize = (outS1 * outS2);

uint64_t* sumArr = make_array<uint64_t>(outputSize);

uint64_t* outputArrReshaped = make_array<uint64_t>(outputSize);
for (uint64_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint64_t i =  (int32_t)0; i < inS3; i++){
for (uint64_t j =  (int32_t)0; j < inS4; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i2,i,j));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint64_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, uint64_t* inArr, int32_t dim, uint64_t* outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, int32_t dim, uint64_t* outArr){

int64_t size = ((ins1 * ins2) * ins3);

uint64_t* reshapedInArr = make_array<uint64_t>(size, ins4);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < ins4; i4++){

int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr2DIdxRowM(reshapedInArr,size,ins4,linIdx,i4) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i1,i2,i3,i4);
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint64_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < ins3; i3++){

int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr3DIdxRowM(outArr,outs1,outs2,outs3,i1,i2,i3) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu1(int32_t s1, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){
Relu(s1, inArr, outArr, sf, doTruncation);
}

void Relu2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int64_t size = (s1 * s2);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int64_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr, int32_t sf){

int64_t size = (s1 * s2);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, uint64_t* arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, uint64_t* arr, int32_t sf){

int64_t size = (s1 * s2);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleUp(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, uint64_t* arr, int32_t sf){

int64_t size = ((s1 * s2) * s3);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){

int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){

int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr, int32_t sf){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr, int32_t sf){

int64_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, uint64_t* arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, uint64_t* arr, int32_t sf){

int64_t size = (s1 * s2);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleDown(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){

int64_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, uint64_t* arr, int32_t sf){

int64_t size = ((s1 * s2) * s3);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){

int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){

int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr, int32_t sf){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){

int64_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr, int32_t sf){

int64_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint64_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint64_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint64_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint64_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint64_t i5 =  (int32_t)0; i5 < s5; i5++){

int64_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void Tanh1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
TanhImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Tanh2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Tanh3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Tanh4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}

void Sigmoid1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
SigmoidImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Sigmoid2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Sigmoid3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Sigmoid4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}

void Sqrt1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){
SqrtImpl(LUTBITS, s1, sA, sB, bwA, bwB, inverse, inp, out);
}

void Sqrt2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int64_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Sqrt3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int64_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Sqrt4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int64_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint64_t i =  (int32_t)0; i < s1; i++){
for (uint64_t j =  (int32_t)0; j < s2; j++){
for (uint64_t k =  (int32_t)0; k < s3; k++){
for (uint64_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}


int main(int argc, char** argv)
{
ArgMapping amap;
amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
amap.arg("port", port, "Port Number");
amap.arg("ip", address, "IP Address of server (ALICE)");
amap.arg("nt", num_threads, "Number of Threads");
amap.arg("ell", bitlength, "Uniform Bitwidth");
amap.arg("k", kScale, "bits of scale");
amap.parse(argc, argv);

assert(party==SERVER || party==CLIENT);



uint64_t* tmp0 = make_array<uint64_t>( (int32_t)1,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp0 at (9027,1-9027,44) */
uint64_t __tmp_in_tmp0;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)3; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)64; i3++){
if ((party == CLIENT)) {
cin >> __tmp_in_tmp0;
}
Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)3, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

uint64_t* tmp1 = make_array<uint64_t>( (int32_t)200,  (int32_t)8192);
/* Variable to read the clear value corresponding to the input variable tmp1 at (9030,1-9030,41) */
uint64_t __tmp_in_tmp1;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)200; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)8192; i1++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp1;
}
Arr2DIdxRowM(tmp1, (int32_t)200, (int32_t)8192,i0,i1) = (party == SERVER) ? __tmp_in_tmp1 : 0;
}
}

uint64_t* tmp2 = make_array<uint64_t>( (int32_t)200);
/* Variable to read the clear value corresponding to the input variable tmp2 at (9033,1-9033,35) */
uint64_t __tmp_in_tmp2;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)200; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp2;
}
Arr1DIdxRowM(tmp2, (int32_t)200,i0) = (party == SERVER) ? __tmp_in_tmp2 : 0;
}

uint64_t* tmp3 = make_array<uint64_t>( (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp3 at (9036,1-9036,43) */
uint64_t __tmp_in_tmp3;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)3; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp3;
}
Arr4DIdxRowM(tmp3, (int32_t)64, (int32_t)3, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp3 : 0;
}
}
}
}

uint64_t* tmp4 = make_array<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp4 at (9039,1-9039,34) */
uint64_t __tmp_in_tmp4;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp4;
}
Arr1DIdxRowM(tmp4, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp4 : 0;
}

uint64_t* tmp5 = make_array<uint64_t>( (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp5 at (9042,1-9042,44) */
uint64_t __tmp_in_tmp5;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp5;
}
Arr4DIdxRowM(tmp5, (int32_t)64, (int32_t)64, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp5 : 0;
}
}
}
}

uint64_t* tmp6 = make_array<uint64_t>( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp6 at (9045,1-9045,44) */
uint64_t __tmp_in_tmp6;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp6;
}
Arr4DIdxRowM(tmp6, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp6 : 0;
}
}
}
}

uint64_t* tmp7 = make_array<uint64_t>( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp7 at (9048,1-9048,45) */
uint64_t __tmp_in_tmp7;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp7;
}
Arr4DIdxRowM(tmp7, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
}
}
}
}

uint64_t* tmp8 = make_array<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp8 at (9051,1-9051,35) */
uint64_t __tmp_in_tmp8;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp8;
}
Arr1DIdxRowM(tmp8, (int32_t)256,i0) = (party == SERVER) ? __tmp_in_tmp8 : 0;
}

uint64_t* tmp9 = make_array<uint64_t>( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp9 at (9054,1-9054,45) */
uint64_t __tmp_in_tmp9;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp9;
}
Arr4DIdxRowM(tmp9, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp9 : 0;
}
}
}
}

uint64_t* tmp10 = make_array<uint64_t>( (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp10 at (9057,1-9057,46) */
uint64_t __tmp_in_tmp10;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp10;
}
Arr4DIdxRowM(tmp10, (int32_t)64, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp10 : 0;
}
}
}
}

uint64_t* tmp11 = make_array<uint64_t>( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp11 at (9060,1-9060,45) */
uint64_t __tmp_in_tmp11;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp11;
}
Arr4DIdxRowM(tmp11, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp11 : 0;
}
}
}
}

uint64_t* tmp12 = make_array<uint64_t>( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp12 at (9063,1-9063,46) */
uint64_t __tmp_in_tmp12;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp12;
}
Arr4DIdxRowM(tmp12, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp12 : 0;
}
}
}
}

uint64_t* tmp13 = make_array<uint64_t>( (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp13 at (9066,1-9066,46) */
uint64_t __tmp_in_tmp13;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp13;
}
Arr4DIdxRowM(tmp13, (int32_t)64, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp13 : 0;
}
}
}
}

uint64_t* tmp14 = make_array<uint64_t>( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp14 at (9069,1-9069,45) */
uint64_t __tmp_in_tmp14;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)64; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp14;
}
Arr4DIdxRowM(tmp14, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp14 : 0;
}
}
}
}

uint64_t* tmp15 = make_array<uint64_t>( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp15 at (9072,1-9072,46) */
uint64_t __tmp_in_tmp15;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp15;
}
Arr4DIdxRowM(tmp15, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}

uint64_t* tmp16 = make_array<uint64_t>( (int32_t)128,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp16 at (9075,1-9075,47) */
uint64_t __tmp_in_tmp16;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp16;
}
Arr4DIdxRowM(tmp16, (int32_t)128, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp16 : 0;
}
}
}
}

uint64_t* tmp17 = make_array<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp17 at (9078,1-9078,36) */
uint64_t __tmp_in_tmp17;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp17;
}
Arr1DIdxRowM(tmp17, (int32_t)128,i0) = (party == SERVER) ? __tmp_in_tmp17 : 0;
}

uint64_t* tmp18 = make_array<uint64_t>( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp18 at (9081,1-9081,47) */
uint64_t __tmp_in_tmp18;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp18;
}
Arr4DIdxRowM(tmp18, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp18 : 0;
}
}
}
}

uint64_t* tmp19 = make_array<uint64_t>( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp19 at (9084,1-9084,47) */
uint64_t __tmp_in_tmp19;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp19;
}
Arr4DIdxRowM(tmp19, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp19 : 0;
}
}
}
}

uint64_t* tmp20 = make_array<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp20 at (9087,1-9087,36) */
uint64_t __tmp_in_tmp20;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp20;
}
Arr1DIdxRowM(tmp20, (int32_t)512,i0) = (party == SERVER) ? __tmp_in_tmp20 : 0;
}

uint64_t* tmp21 = make_array<uint64_t>( (int32_t)512,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp21 at (9090,1-9090,47) */
uint64_t __tmp_in_tmp21;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp21;
}
Arr4DIdxRowM(tmp21, (int32_t)512, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp21 : 0;
}
}
}
}

uint64_t* tmp22 = make_array<uint64_t>( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp22 at (9093,1-9093,47) */
uint64_t __tmp_in_tmp22;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp22;
}
Arr4DIdxRowM(tmp22, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp22 : 0;
}
}
}
}

uint64_t* tmp23 = make_array<uint64_t>( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp23 at (9096,1-9096,47) */
uint64_t __tmp_in_tmp23;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp23;
}
Arr4DIdxRowM(tmp23, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp23 : 0;
}
}
}
}

uint64_t* tmp24 = make_array<uint64_t>( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp24 at (9099,1-9099,47) */
uint64_t __tmp_in_tmp24;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp24;
}
Arr4DIdxRowM(tmp24, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp24 : 0;
}
}
}
}

uint64_t* tmp25 = make_array<uint64_t>( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp25 at (9102,1-9102,47) */
uint64_t __tmp_in_tmp25;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp25;
}
Arr4DIdxRowM(tmp25, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}

uint64_t* tmp26 = make_array<uint64_t>( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp26 at (9105,1-9105,47) */
uint64_t __tmp_in_tmp26;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp26;
}
Arr4DIdxRowM(tmp26, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp26 : 0;
}
}
}
}

uint64_t* tmp27 = make_array<uint64_t>( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp27 at (9108,1-9108,47) */
uint64_t __tmp_in_tmp27;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp27;
}
Arr4DIdxRowM(tmp27, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp27 : 0;
}
}
}
}

uint64_t* tmp28 = make_array<uint64_t>( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp28 at (9111,1-9111,47) */
uint64_t __tmp_in_tmp28;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp28;
}
Arr4DIdxRowM(tmp28, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp28 : 0;
}
}
}
}

uint64_t* tmp29 = make_array<uint64_t>( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp29 at (9114,1-9114,47) */
uint64_t __tmp_in_tmp29;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)128; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp29;
}
Arr4DIdxRowM(tmp29, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp29 : 0;
}
}
}
}

uint64_t* tmp30 = make_array<uint64_t>( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp30 at (9117,1-9117,47) */
uint64_t __tmp_in_tmp30;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)128; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp30;
}
Arr4DIdxRowM(tmp30, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp30 : 0;
}
}
}
}

uint64_t* tmp31 = make_array<uint64_t>( (int32_t)256,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp31 at (9120,1-9120,47) */
uint64_t __tmp_in_tmp31;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp31;
}
Arr4DIdxRowM(tmp31, (int32_t)256, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp31 : 0;
}
}
}
}

uint64_t* tmp32 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp32 at (9123,1-9123,47) */
uint64_t __tmp_in_tmp32;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp32;
}
Arr4DIdxRowM(tmp32, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp32 : 0;
}
}
}
}

uint64_t* tmp33 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp33 at (9126,1-9126,48) */
uint64_t __tmp_in_tmp33;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp33;
}
Arr4DIdxRowM(tmp33, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp33 : 0;
}
}
}
}

uint64_t* tmp34 = make_array<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp34 at (9129,1-9129,37) */
uint64_t __tmp_in_tmp34;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp34;
}
Arr1DIdxRowM(tmp34, (int32_t)1024,i0) = (party == SERVER) ? __tmp_in_tmp34 : 0;
}

uint64_t* tmp35 = make_array<uint64_t>( (int32_t)1024,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp35 at (9132,1-9132,48) */
uint64_t __tmp_in_tmp35;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp35;
}
Arr4DIdxRowM(tmp35, (int32_t)1024, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp35 : 0;
}
}
}
}

uint64_t* tmp36 = make_array<uint64_t>( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp36 at (9135,1-9135,48) */
uint64_t __tmp_in_tmp36;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp36;
}
Arr4DIdxRowM(tmp36, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp36 : 0;
}
}
}
}

uint64_t* tmp37 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp37 at (9138,1-9138,47) */
uint64_t __tmp_in_tmp37;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp37;
}
Arr4DIdxRowM(tmp37, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp37 : 0;
}
}
}
}

uint64_t* tmp38 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp38 at (9141,1-9141,48) */
uint64_t __tmp_in_tmp38;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp38;
}
Arr4DIdxRowM(tmp38, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp38 : 0;
}
}
}
}

uint64_t* tmp39 = make_array<uint64_t>( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp39 at (9144,1-9144,48) */
uint64_t __tmp_in_tmp39;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp39;
}
Arr4DIdxRowM(tmp39, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp39 : 0;
}
}
}
}

uint64_t* tmp40 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp40 at (9147,1-9147,47) */
uint64_t __tmp_in_tmp40;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp40;
}
Arr4DIdxRowM(tmp40, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp40 : 0;
}
}
}
}

uint64_t* tmp41 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp41 at (9150,1-9150,48) */
uint64_t __tmp_in_tmp41;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp41;
}
Arr4DIdxRowM(tmp41, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp41 : 0;
}
}
}
}

uint64_t* tmp42 = make_array<uint64_t>( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp42 at (9153,1-9153,48) */
uint64_t __tmp_in_tmp42;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp42;
}
Arr4DIdxRowM(tmp42, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp42 : 0;
}
}
}
}

uint64_t* tmp43 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp43 at (9156,1-9156,47) */
uint64_t __tmp_in_tmp43;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp43;
}
Arr4DIdxRowM(tmp43, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp43 : 0;
}
}
}
}

uint64_t* tmp44 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp44 at (9159,1-9159,48) */
uint64_t __tmp_in_tmp44;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp44;
}
Arr4DIdxRowM(tmp44, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp44 : 0;
}
}
}
}

uint64_t* tmp45 = make_array<uint64_t>( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp45 at (9162,1-9162,48) */
uint64_t __tmp_in_tmp45;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp45;
}
Arr4DIdxRowM(tmp45, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}

uint64_t* tmp46 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp46 at (9165,1-9165,47) */
uint64_t __tmp_in_tmp46;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp46;
}
Arr4DIdxRowM(tmp46, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp46 : 0;
}
}
}
}

uint64_t* tmp47 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp47 at (9168,1-9168,48) */
uint64_t __tmp_in_tmp47;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp47;
}
Arr4DIdxRowM(tmp47, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp47 : 0;
}
}
}
}

uint64_t* tmp48 = make_array<uint64_t>( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp48 at (9171,1-9171,48) */
uint64_t __tmp_in_tmp48;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp48;
}
Arr4DIdxRowM(tmp48, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp48 : 0;
}
}
}
}

uint64_t* tmp49 = make_array<uint64_t>( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp49 at (9174,1-9174,47) */
uint64_t __tmp_in_tmp49;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)256; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp49;
}
Arr4DIdxRowM(tmp49, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp49 : 0;
}
}
}
}

uint64_t* tmp50 = make_array<uint64_t>( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp50 at (9177,1-9177,48) */
uint64_t __tmp_in_tmp50;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1024; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)256; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp50;
}
Arr4DIdxRowM(tmp50, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp50 : 0;
}
}
}
}

uint64_t* tmp51 = make_array<uint64_t>( (int32_t)512,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp51 at (9180,1-9180,48) */
uint64_t __tmp_in_tmp51;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp51;
}
Arr4DIdxRowM(tmp51, (int32_t)512, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp51 : 0;
}
}
}
}

uint64_t* tmp52 = make_array<uint64_t>( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp52 at (9183,1-9183,47) */
uint64_t __tmp_in_tmp52;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp52;
}
Arr4DIdxRowM(tmp52, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp52 : 0;
}
}
}
}

uint64_t* tmp53 = make_array<uint64_t>( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp53 at (9186,1-9186,48) */
uint64_t __tmp_in_tmp53;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2048; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp53;
}
Arr4DIdxRowM(tmp53, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp53 : 0;
}
}
}
}

uint64_t* tmp54 = make_array<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp54 at (9189,1-9189,37) */
uint64_t __tmp_in_tmp54;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2048; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp54;
}
Arr1DIdxRowM(tmp54, (int32_t)2048,i0) = (party == SERVER) ? __tmp_in_tmp54 : 0;
}

uint64_t* tmp55 = make_array<uint64_t>( (int32_t)2048,  (int32_t)1024,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp55 at (9192,1-9192,49) */
uint64_t __tmp_in_tmp55;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2048; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)1024; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp55;
}
Arr4DIdxRowM(tmp55, (int32_t)2048, (int32_t)1024, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp55 : 0;
}
}
}
}

uint64_t* tmp56 = make_array<uint64_t>( (int32_t)512,  (int32_t)2048,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp56 at (9195,1-9195,48) */
uint64_t __tmp_in_tmp56;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)2048; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp56;
}
Arr4DIdxRowM(tmp56, (int32_t)512, (int32_t)2048, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp56 : 0;
}
}
}
}

uint64_t* tmp57 = make_array<uint64_t>( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp57 at (9198,1-9198,47) */
uint64_t __tmp_in_tmp57;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp57;
}
Arr4DIdxRowM(tmp57, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp57 : 0;
}
}
}
}

uint64_t* tmp58 = make_array<uint64_t>( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp58 at (9201,1-9201,48) */
uint64_t __tmp_in_tmp58;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2048; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp58;
}
Arr4DIdxRowM(tmp58, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp58 : 0;
}
}
}
}

uint64_t* tmp59 = make_array<uint64_t>( (int32_t)512,  (int32_t)2048,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp59 at (9204,1-9204,48) */
uint64_t __tmp_in_tmp59;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)2048; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp59;
}
Arr4DIdxRowM(tmp59, (int32_t)512, (int32_t)2048, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp59 : 0;
}
}
}
}

uint64_t* tmp60 = make_array<uint64_t>( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp60 at (9207,1-9207,47) */
uint64_t __tmp_in_tmp60;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)512; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)3; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp60;
}
Arr4DIdxRowM(tmp60, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp60 : 0;
}
}
}
}

uint64_t* tmp61 = make_array<uint64_t>( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp61 at (9210,1-9210,48) */
uint64_t __tmp_in_tmp61;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2048; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)512; i1++){
for (uint64_t i2 =  (uint64_t)0; i2 <  (int32_t)1; i2++){
for (uint64_t i3 =  (uint64_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp61;
}
Arr4DIdxRowM(tmp61, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp61 : 0;
}
}
}
}

uint64_t* tmp62 = make_array<uint64_t>( (int32_t)2);
/* Variable to read the clear value corresponding to the input variable tmp62 at (9213,1-9213,34) */
uint64_t __tmp_in_tmp62;
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)2; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp62;
}
Arr1DIdxRowM(tmp62, (int32_t)2,i0) = (party == SERVER) ? __tmp_in_tmp62 : 0;
}
StartComputation();

uint64_t* tmp63 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)3);

int64_t i7;

int64_t i6;

int64_t i5;

int64_t i4;

int64_t i3;

int64_t i2;

int64_t i1;

int64_t i0;
i0 =  (int64_t)0;
i1 =  (int64_t)0;
i2 =  (int64_t)0;
i3 =  (int64_t)0;
for (uint64_t i4 =  (int32_t)0; i4 <  (int32_t)1; i4++){
for (uint64_t i7 =  (int32_t)0; i7 <  (int32_t)3; i7++){
for (uint64_t i5 =  (int32_t)0; i5 <  (int32_t)64; i5++){
for (uint64_t i6 =  (int32_t)0; i6 <  (int32_t)64; i6++){
Arr4DIdxRowM(tmp63, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)3,i4,i5,i6,i7) = Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)3, (int32_t)64, (int32_t)64,i0,i1,i2,i3);
i3 = (i3 +  (int64_t)1);
if ((i3 ==  (int64_t)64)) {
i3 =  (int64_t)0;
i2 = (i2 +  (int64_t)1);
if ((i2 ==  (int64_t)64)) {
i2 =  (int64_t)0;
i1 = (i1 +  (int64_t)1);
if ((i1 ==  (int64_t)3)) {
i1 =  (int64_t)0;
i0 = (i0 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp0);

uint64_t* tmp65 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64);

int64_t i15;

int64_t i14;

int64_t i13;

int64_t i12;

int64_t i11;

int64_t i10;

int64_t i9;

int64_t i8;
i8 =  (int64_t)0;
i9 =  (int64_t)0;
i10 =  (int64_t)0;
i11 =  (int64_t)0;
for (uint64_t i15 =  (int32_t)0; i15 <  (int32_t)64; i15++){
for (uint64_t i14 =  (int32_t)0; i14 <  (int32_t)3; i14++){
for (uint64_t i12 =  (int32_t)0; i12 <  (int32_t)3; i12++){
for (uint64_t i13 =  (int32_t)0; i13 <  (int32_t)3; i13++){
Arr4DIdxRowM(tmp65, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64,i12,i13,i14,i15) = Arr4DIdxRowM(tmp3, (int32_t)64, (int32_t)3, (int32_t)3, (int32_t)3,i8,i9,i10,i11);
i11 = (i11 +  (int64_t)1);
if ((i11 ==  (int64_t)3)) {
i11 =  (int64_t)0;
i10 = (i10 +  (int64_t)1);
if ((i10 ==  (int64_t)3)) {
i10 =  (int64_t)0;
i9 = (i9 +  (int64_t)1);
if ((i9 ==  (int64_t)3)) {
i9 =  (int64_t)0;
i8 = (i8 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3, tmp3);

uint64_t* tmp67 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
#if SCI_CONV_SS
  kIsSharedInput = false;
#endif
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp63, tmp65, tmp67);
#if SCI_CONV_SS
  kIsSharedInput = true;
#endif

ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)3, tmp63);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64, tmp65);

uint64_t* tmp70 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i20;

int64_t i19;

int64_t i18;

int64_t i17;

int64_t i16;
i16 =  (int64_t)0;
for (uint64_t i17 =  (int32_t)0; i17 <  (int32_t)1; i17++){
for (uint64_t i18 =  (int32_t)0; i18 <  (int32_t)1; i18++){
for (uint64_t i19 =  (int32_t)0; i19 <  (int32_t)1; i19++){
for (uint64_t i20 =  (int32_t)0; i20 <  (int32_t)64; i20++){
Arr4DIdxRowM(tmp70, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i17,i18,i19,i20) = Arr1DIdxRowM(tmp4, (int32_t)64,i16);
i16 = (i16 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp70,  (int32_t)12);

uint64_t* tmp71 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp71, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp67, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp70, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp67);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp70);

uint64_t* tmp74 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i28;

int64_t i27;

int64_t i26;

int64_t i25;

int64_t i24;

int64_t i23;

int64_t i22;

int64_t i21;
i21 =  (int64_t)0;
i22 =  (int64_t)0;
i23 =  (int64_t)0;
i24 =  (int64_t)0;
for (uint64_t i25 =  (int32_t)0; i25 <  (int32_t)1; i25++){
for (uint64_t i27 =  (int32_t)0; i27 <  (int32_t)64; i27++){
for (uint64_t i28 =  (int32_t)0; i28 <  (int32_t)64; i28++){
for (uint64_t i26 =  (int32_t)0; i26 <  (int32_t)64; i26++){
Arr4DIdxRowM(tmp74, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i25,i26,i27,i28) = Arr4DIdxRowM(tmp71, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i21,i22,i23,i24);
i24 = (i24 +  (int64_t)1);
if ((i24 ==  (int64_t)64)) {
i24 =  (int64_t)0;
i23 = (i23 +  (int64_t)1);
if ((i23 ==  (int64_t)64)) {
i23 =  (int64_t)0;
i22 = (i22 +  (int64_t)1);
if ((i22 ==  (int64_t)64)) {
i22 =  (int64_t)0;
i21 = (i21 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp71);

uint64_t* tmp76 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i36;

int64_t i35;

int64_t i34;

int64_t i33;

int64_t i32;

int64_t i31;

int64_t i30;

int64_t i29;
i29 =  (int64_t)0;
i30 =  (int64_t)0;
i31 =  (int64_t)0;
i32 =  (int64_t)0;
for (uint64_t i33 =  (int32_t)0; i33 <  (int32_t)1; i33++){
for (uint64_t i36 =  (int32_t)0; i36 <  (int32_t)64; i36++){
for (uint64_t i34 =  (int32_t)0; i34 <  (int32_t)64; i34++){
for (uint64_t i35 =  (int32_t)0; i35 <  (int32_t)64; i35++){
Arr4DIdxRowM(tmp76, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i33,i34,i35,i36) = Arr4DIdxRowM(tmp74, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i29,i30,i31,i32);
i32 = (i32 +  (int64_t)1);
if ((i32 ==  (int64_t)64)) {
i32 =  (int64_t)0;
i31 = (i31 +  (int64_t)1);
if ((i31 ==  (int64_t)64)) {
i31 =  (int64_t)0;
i30 = (i30 +  (int64_t)1);
if ((i30 ==  (int64_t)64)) {
i30 =  (int64_t)0;
i29 = (i29 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp74);

uint64_t* tmp78 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp76, tmp78,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp76);

uint64_t* tmp80 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i44;

int64_t i43;

int64_t i42;

int64_t i41;

int64_t i40;

int64_t i39;

int64_t i38;

int64_t i37;
i37 =  (int64_t)0;
i38 =  (int64_t)0;
i39 =  (int64_t)0;
i40 =  (int64_t)0;
for (uint64_t i41 =  (int32_t)0; i41 <  (int32_t)1; i41++){
for (uint64_t i43 =  (int32_t)0; i43 <  (int32_t)64; i43++){
for (uint64_t i44 =  (int32_t)0; i44 <  (int32_t)64; i44++){
for (uint64_t i42 =  (int32_t)0; i42 <  (int32_t)64; i42++){
Arr4DIdxRowM(tmp80, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i41,i42,i43,i44) = Arr4DIdxRowM(tmp78, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i37,i38,i39,i40);
i40 = (i40 +  (int64_t)1);
if ((i40 ==  (int64_t)64)) {
i40 =  (int64_t)0;
i39 = (i39 +  (int64_t)1);
if ((i39 ==  (int64_t)64)) {
i39 =  (int64_t)0;
i38 = (i38 +  (int64_t)1);
if ((i38 ==  (int64_t)64)) {
i38 =  (int64_t)0;
i37 = (i37 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp78);

uint64_t* tmp82 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i52;

int64_t i51;

int64_t i50;

int64_t i49;

int64_t i48;

int64_t i47;

int64_t i46;

int64_t i45;
i45 =  (int64_t)0;
i46 =  (int64_t)0;
i47 =  (int64_t)0;
i48 =  (int64_t)0;
for (uint64_t i49 =  (int32_t)0; i49 <  (int32_t)1; i49++){
for (uint64_t i52 =  (int32_t)0; i52 <  (int32_t)64; i52++){
for (uint64_t i50 =  (int32_t)0; i50 <  (int32_t)64; i50++){
for (uint64_t i51 =  (int32_t)0; i51 <  (int32_t)64; i51++){
Arr4DIdxRowM(tmp82, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i49,i50,i51,i52) = Arr4DIdxRowM(tmp80, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i45,i46,i47,i48);
i48 = (i48 +  (int64_t)1);
if ((i48 ==  (int64_t)64)) {
i48 =  (int64_t)0;
i47 = (i47 +  (int64_t)1);
if ((i47 ==  (int64_t)64)) {
i47 =  (int64_t)0;
i46 = (i46 +  (int64_t)1);
if ((i46 ==  (int64_t)64)) {
i46 =  (int64_t)0;
i45 = (i45 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp83 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)64);

int64_t i60;

int64_t i59;

int64_t i58;

int64_t i57;

int64_t i56;

int64_t i55;

int64_t i54;

int64_t i53;
i53 =  (int64_t)0;
i54 =  (int64_t)0;
i55 =  (int64_t)0;
i56 =  (int64_t)0;
for (uint64_t i60 =  (int32_t)0; i60 <  (int32_t)64; i60++){
for (uint64_t i59 =  (int32_t)0; i59 <  (int32_t)64; i59++){
for (uint64_t i57 =  (int32_t)0; i57 <  (int32_t)1; i57++){
for (uint64_t i58 =  (int32_t)0; i58 <  (int32_t)1; i58++){
Arr4DIdxRowM(tmp83, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)64,i57,i58,i59,i60) = Arr4DIdxRowM(tmp5, (int32_t)64, (int32_t)64, (int32_t)1, (int32_t)1,i53,i54,i55,i56);
i56 = (i56 +  (int64_t)1);
if ((i56 ==  (int64_t)1)) {
i56 =  (int64_t)0;
i55 = (i55 +  (int64_t)1);
if ((i55 ==  (int64_t)1)) {
i55 =  (int64_t)0;
i54 = (i54 +  (int64_t)1);
if ((i54 ==  (int64_t)64)) {
i54 =  (int64_t)0;
i53 = (i53 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1, tmp5);

uint64_t* tmp85 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp82, tmp83, tmp85);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)64, tmp83);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp82);

uint64_t* tmp88 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i65;

int64_t i64;

int64_t i63;

int64_t i62;

int64_t i61;
i61 =  (int64_t)0;
for (uint64_t i62 =  (int32_t)0; i62 <  (int32_t)1; i62++){
for (uint64_t i63 =  (int32_t)0; i63 <  (int32_t)1; i63++){
for (uint64_t i64 =  (int32_t)0; i64 <  (int32_t)1; i64++){
for (uint64_t i65 =  (int32_t)0; i65 <  (int32_t)64; i65++){
Arr4DIdxRowM(tmp88, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i62,i63,i64,i65) = Arr1DIdxRowM(tmp4, (int32_t)64,i61);
i61 = (i61 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp88,  (int32_t)12);

uint64_t* tmp89 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp89, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp85, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp88, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp88);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp85);

uint64_t* tmp92 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i73;

int64_t i72;

int64_t i71;

int64_t i70;

int64_t i69;

int64_t i68;

int64_t i67;

int64_t i66;
i66 =  (int64_t)0;
i67 =  (int64_t)0;
i68 =  (int64_t)0;
i69 =  (int64_t)0;
for (uint64_t i70 =  (int32_t)0; i70 <  (int32_t)1; i70++){
for (uint64_t i72 =  (int32_t)0; i72 <  (int32_t)64; i72++){
for (uint64_t i73 =  (int32_t)0; i73 <  (int32_t)64; i73++){
for (uint64_t i71 =  (int32_t)0; i71 <  (int32_t)64; i71++){
Arr4DIdxRowM(tmp92, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i70,i71,i72,i73) = Arr4DIdxRowM(tmp89, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i66,i67,i68,i69);
i69 = (i69 +  (int64_t)1);
if ((i69 ==  (int64_t)64)) {
i69 =  (int64_t)0;
i68 = (i68 +  (int64_t)1);
if ((i68 ==  (int64_t)64)) {
i68 =  (int64_t)0;
i67 = (i67 +  (int64_t)1);
if ((i67 ==  (int64_t)64)) {
i67 =  (int64_t)0;
i66 = (i66 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp89);

uint64_t* tmp94 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i81;

int64_t i80;

int64_t i79;

int64_t i78;

int64_t i77;

int64_t i76;

int64_t i75;

int64_t i74;
i74 =  (int64_t)0;
i75 =  (int64_t)0;
i76 =  (int64_t)0;
i77 =  (int64_t)0;
for (uint64_t i78 =  (int32_t)0; i78 <  (int32_t)1; i78++){
for (uint64_t i81 =  (int32_t)0; i81 <  (int32_t)64; i81++){
for (uint64_t i79 =  (int32_t)0; i79 <  (int32_t)64; i79++){
for (uint64_t i80 =  (int32_t)0; i80 <  (int32_t)64; i80++){
Arr4DIdxRowM(tmp94, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i78,i79,i80,i81) = Arr4DIdxRowM(tmp92, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i74,i75,i76,i77);
i77 = (i77 +  (int64_t)1);
if ((i77 ==  (int64_t)64)) {
i77 =  (int64_t)0;
i76 = (i76 +  (int64_t)1);
if ((i76 ==  (int64_t)64)) {
i76 =  (int64_t)0;
i75 = (i75 +  (int64_t)1);
if ((i75 ==  (int64_t)64)) {
i75 =  (int64_t)0;
i74 = (i74 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp92);

uint64_t* tmp96 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp94, tmp96,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp94);

uint64_t* tmp98 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i89;

int64_t i88;

int64_t i87;

int64_t i86;

int64_t i85;

int64_t i84;

int64_t i83;

int64_t i82;
i82 =  (int64_t)0;
i83 =  (int64_t)0;
i84 =  (int64_t)0;
i85 =  (int64_t)0;
for (uint64_t i86 =  (int32_t)0; i86 <  (int32_t)1; i86++){
for (uint64_t i88 =  (int32_t)0; i88 <  (int32_t)64; i88++){
for (uint64_t i89 =  (int32_t)0; i89 <  (int32_t)64; i89++){
for (uint64_t i87 =  (int32_t)0; i87 <  (int32_t)64; i87++){
Arr4DIdxRowM(tmp98, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i86,i87,i88,i89) = Arr4DIdxRowM(tmp96, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i82,i83,i84,i85);
i85 = (i85 +  (int64_t)1);
if ((i85 ==  (int64_t)64)) {
i85 =  (int64_t)0;
i84 = (i84 +  (int64_t)1);
if ((i84 ==  (int64_t)64)) {
i84 =  (int64_t)0;
i83 = (i83 +  (int64_t)1);
if ((i83 ==  (int64_t)64)) {
i83 =  (int64_t)0;
i82 = (i82 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp96);

uint64_t* tmp100 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i97;

int64_t i96;

int64_t i95;

int64_t i94;

int64_t i93;

int64_t i92;

int64_t i91;

int64_t i90;
i90 =  (int64_t)0;
i91 =  (int64_t)0;
i92 =  (int64_t)0;
i93 =  (int64_t)0;
for (uint64_t i94 =  (int32_t)0; i94 <  (int32_t)1; i94++){
for (uint64_t i97 =  (int32_t)0; i97 <  (int32_t)64; i97++){
for (uint64_t i95 =  (int32_t)0; i95 <  (int32_t)64; i95++){
for (uint64_t i96 =  (int32_t)0; i96 <  (int32_t)64; i96++){
Arr4DIdxRowM(tmp100, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i94,i95,i96,i97) = Arr4DIdxRowM(tmp98, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i90,i91,i92,i93);
i93 = (i93 +  (int64_t)1);
if ((i93 ==  (int64_t)64)) {
i93 =  (int64_t)0;
i92 = (i92 +  (int64_t)1);
if ((i92 ==  (int64_t)64)) {
i92 =  (int64_t)0;
i91 = (i91 +  (int64_t)1);
if ((i91 ==  (int64_t)64)) {
i91 =  (int64_t)0;
i90 = (i90 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp98);

uint64_t* tmp102 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);

int64_t i105;

int64_t i104;

int64_t i103;

int64_t i102;

int64_t i101;

int64_t i100;

int64_t i99;

int64_t i98;
i98 =  (int64_t)0;
i99 =  (int64_t)0;
i100 =  (int64_t)0;
i101 =  (int64_t)0;
for (uint64_t i105 =  (int32_t)0; i105 <  (int32_t)64; i105++){
for (uint64_t i104 =  (int32_t)0; i104 <  (int32_t)64; i104++){
for (uint64_t i102 =  (int32_t)0; i102 <  (int32_t)3; i102++){
for (uint64_t i103 =  (int32_t)0; i103 <  (int32_t)3; i103++){
Arr4DIdxRowM(tmp102, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,i102,i103,i104,i105) = Arr4DIdxRowM(tmp6, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i98,i99,i100,i101);
i101 = (i101 +  (int64_t)1);
if ((i101 ==  (int64_t)3)) {
i101 =  (int64_t)0;
i100 = (i100 +  (int64_t)1);
if ((i100 ==  (int64_t)3)) {
i100 =  (int64_t)0;
i99 = (i99 +  (int64_t)1);
if ((i99 ==  (int64_t)64)) {
i99 =  (int64_t)0;
i98 = (i98 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3, tmp6);

uint64_t* tmp104 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp100, tmp102, tmp104);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp102);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp100);

uint64_t* tmp107 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i110;

int64_t i109;

int64_t i108;

int64_t i107;

int64_t i106;
i106 =  (int64_t)0;
for (uint64_t i107 =  (int32_t)0; i107 <  (int32_t)1; i107++){
for (uint64_t i108 =  (int32_t)0; i108 <  (int32_t)1; i108++){
for (uint64_t i109 =  (int32_t)0; i109 <  (int32_t)1; i109++){
for (uint64_t i110 =  (int32_t)0; i110 <  (int32_t)64; i110++){
Arr4DIdxRowM(tmp107, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i107,i108,i109,i110) = Arr1DIdxRowM(tmp4, (int32_t)64,i106);
i106 = (i106 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp107,  (int32_t)12);

uint64_t* tmp108 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp108, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp104, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp107, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp104);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp107);

uint64_t* tmp111 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i118;

int64_t i117;

int64_t i116;

int64_t i115;

int64_t i114;

int64_t i113;

int64_t i112;

int64_t i111;
i111 =  (int64_t)0;
i112 =  (int64_t)0;
i113 =  (int64_t)0;
i114 =  (int64_t)0;
for (uint64_t i115 =  (int32_t)0; i115 <  (int32_t)1; i115++){
for (uint64_t i117 =  (int32_t)0; i117 <  (int32_t)64; i117++){
for (uint64_t i118 =  (int32_t)0; i118 <  (int32_t)64; i118++){
for (uint64_t i116 =  (int32_t)0; i116 <  (int32_t)64; i116++){
Arr4DIdxRowM(tmp111, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i115,i116,i117,i118) = Arr4DIdxRowM(tmp108, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i111,i112,i113,i114);
i114 = (i114 +  (int64_t)1);
if ((i114 ==  (int64_t)64)) {
i114 =  (int64_t)0;
i113 = (i113 +  (int64_t)1);
if ((i113 ==  (int64_t)64)) {
i113 =  (int64_t)0;
i112 = (i112 +  (int64_t)1);
if ((i112 ==  (int64_t)64)) {
i112 =  (int64_t)0;
i111 = (i111 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp108);

uint64_t* tmp113 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i126;

int64_t i125;

int64_t i124;

int64_t i123;

int64_t i122;

int64_t i121;

int64_t i120;

int64_t i119;
i119 =  (int64_t)0;
i120 =  (int64_t)0;
i121 =  (int64_t)0;
i122 =  (int64_t)0;
for (uint64_t i123 =  (int32_t)0; i123 <  (int32_t)1; i123++){
for (uint64_t i126 =  (int32_t)0; i126 <  (int32_t)64; i126++){
for (uint64_t i124 =  (int32_t)0; i124 <  (int32_t)64; i124++){
for (uint64_t i125 =  (int32_t)0; i125 <  (int32_t)64; i125++){
Arr4DIdxRowM(tmp113, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i123,i124,i125,i126) = Arr4DIdxRowM(tmp111, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i119,i120,i121,i122);
i122 = (i122 +  (int64_t)1);
if ((i122 ==  (int64_t)64)) {
i122 =  (int64_t)0;
i121 = (i121 +  (int64_t)1);
if ((i121 ==  (int64_t)64)) {
i121 =  (int64_t)0;
i120 = (i120 +  (int64_t)1);
if ((i120 ==  (int64_t)64)) {
i120 =  (int64_t)0;
i119 = (i119 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp111);

uint64_t* tmp115 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp113, tmp115,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp113);

uint64_t* tmp117 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i134;

int64_t i133;

int64_t i132;

int64_t i131;

int64_t i130;

int64_t i129;

int64_t i128;

int64_t i127;
i127 =  (int64_t)0;
i128 =  (int64_t)0;
i129 =  (int64_t)0;
i130 =  (int64_t)0;
for (uint64_t i131 =  (int32_t)0; i131 <  (int32_t)1; i131++){
for (uint64_t i133 =  (int32_t)0; i133 <  (int32_t)64; i133++){
for (uint64_t i134 =  (int32_t)0; i134 <  (int32_t)64; i134++){
for (uint64_t i132 =  (int32_t)0; i132 <  (int32_t)64; i132++){
Arr4DIdxRowM(tmp117, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i131,i132,i133,i134) = Arr4DIdxRowM(tmp115, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i127,i128,i129,i130);
i130 = (i130 +  (int64_t)1);
if ((i130 ==  (int64_t)64)) {
i130 =  (int64_t)0;
i129 = (i129 +  (int64_t)1);
if ((i129 ==  (int64_t)64)) {
i129 =  (int64_t)0;
i128 = (i128 +  (int64_t)1);
if ((i128 ==  (int64_t)64)) {
i128 =  (int64_t)0;
i127 = (i127 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp115);

uint64_t* tmp119 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i142;

int64_t i141;

int64_t i140;

int64_t i139;

int64_t i138;

int64_t i137;

int64_t i136;

int64_t i135;
i135 =  (int64_t)0;
i136 =  (int64_t)0;
i137 =  (int64_t)0;
i138 =  (int64_t)0;
for (uint64_t i139 =  (int32_t)0; i139 <  (int32_t)1; i139++){
for (uint64_t i142 =  (int32_t)0; i142 <  (int32_t)64; i142++){
for (uint64_t i140 =  (int32_t)0; i140 <  (int32_t)64; i140++){
for (uint64_t i141 =  (int32_t)0; i141 <  (int32_t)64; i141++){
Arr4DIdxRowM(tmp119, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i139,i140,i141,i142) = Arr4DIdxRowM(tmp117, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i135,i136,i137,i138);
i138 = (i138 +  (int64_t)1);
if ((i138 ==  (int64_t)64)) {
i138 =  (int64_t)0;
i137 = (i137 +  (int64_t)1);
if ((i137 ==  (int64_t)64)) {
i137 =  (int64_t)0;
i136 = (i136 +  (int64_t)1);
if ((i136 ==  (int64_t)64)) {
i136 =  (int64_t)0;
i135 = (i135 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp117);

uint64_t* tmp121 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);

int64_t i150;

int64_t i149;

int64_t i148;

int64_t i147;

int64_t i146;

int64_t i145;

int64_t i144;

int64_t i143;
i143 =  (int64_t)0;
i144 =  (int64_t)0;
i145 =  (int64_t)0;
i146 =  (int64_t)0;
for (uint64_t i150 =  (int32_t)0; i150 <  (int32_t)256; i150++){
for (uint64_t i149 =  (int32_t)0; i149 <  (int32_t)64; i149++){
for (uint64_t i147 =  (int32_t)0; i147 <  (int32_t)1; i147++){
for (uint64_t i148 =  (int32_t)0; i148 <  (int32_t)1; i148++){
Arr4DIdxRowM(tmp121, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i147,i148,i149,i150) = Arr4DIdxRowM(tmp7, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i143,i144,i145,i146);
i146 = (i146 +  (int64_t)1);
if ((i146 ==  (int64_t)1)) {
i146 =  (int64_t)0;
i145 = (i145 +  (int64_t)1);
if ((i145 ==  (int64_t)1)) {
i145 =  (int64_t)0;
i144 = (i144 +  (int64_t)1);
if ((i144 ==  (int64_t)64)) {
i144 =  (int64_t)0;
i143 = (i143 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1, tmp7);

uint64_t* tmp123 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp119, tmp121, tmp123);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp121);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp119);

uint64_t* tmp126 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i155;

int64_t i154;

int64_t i153;

int64_t i152;

int64_t i151;
i151 =  (int64_t)0;
for (uint64_t i152 =  (int32_t)0; i152 <  (int32_t)1; i152++){
for (uint64_t i153 =  (int32_t)0; i153 <  (int32_t)1; i153++){
for (uint64_t i154 =  (int32_t)0; i154 <  (int32_t)1; i154++){
for (uint64_t i155 =  (int32_t)0; i155 <  (int32_t)256; i155++){
Arr4DIdxRowM(tmp126, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i152,i153,i154,i155) = Arr1DIdxRowM(tmp8, (int32_t)256,i151);
i151 = (i151 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp126,  (int32_t)12);

uint64_t* tmp127 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp127, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp123, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp126, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp123);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp126);

uint64_t* tmp130 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i163;

int64_t i162;

int64_t i161;

int64_t i160;

int64_t i159;

int64_t i158;

int64_t i157;

int64_t i156;
i156 =  (int64_t)0;
i157 =  (int64_t)0;
i158 =  (int64_t)0;
i159 =  (int64_t)0;
for (uint64_t i160 =  (int32_t)0; i160 <  (int32_t)1; i160++){
for (uint64_t i162 =  (int32_t)0; i162 <  (int32_t)64; i162++){
for (uint64_t i163 =  (int32_t)0; i163 <  (int32_t)64; i163++){
for (uint64_t i161 =  (int32_t)0; i161 <  (int32_t)256; i161++){
Arr4DIdxRowM(tmp130, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i160,i161,i162,i163) = Arr4DIdxRowM(tmp127, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i156,i157,i158,i159);
i159 = (i159 +  (int64_t)1);
if ((i159 ==  (int64_t)256)) {
i159 =  (int64_t)0;
i158 = (i158 +  (int64_t)1);
if ((i158 ==  (int64_t)64)) {
i158 =  (int64_t)0;
i157 = (i157 +  (int64_t)1);
if ((i157 ==  (int64_t)64)) {
i157 =  (int64_t)0;
i156 = (i156 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp127);

uint64_t* tmp132 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i171;

int64_t i170;

int64_t i169;

int64_t i168;

int64_t i167;

int64_t i166;

int64_t i165;

int64_t i164;
i164 =  (int64_t)0;
i165 =  (int64_t)0;
i166 =  (int64_t)0;
i167 =  (int64_t)0;
for (uint64_t i168 =  (int32_t)0; i168 <  (int32_t)1; i168++){
for (uint64_t i171 =  (int32_t)0; i171 <  (int32_t)64; i171++){
for (uint64_t i169 =  (int32_t)0; i169 <  (int32_t)64; i169++){
for (uint64_t i170 =  (int32_t)0; i170 <  (int32_t)64; i170++){
Arr4DIdxRowM(tmp132, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i168,i169,i170,i171) = Arr4DIdxRowM(tmp80, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i164,i165,i166,i167);
i167 = (i167 +  (int64_t)1);
if ((i167 ==  (int64_t)64)) {
i167 =  (int64_t)0;
i166 = (i166 +  (int64_t)1);
if ((i166 ==  (int64_t)64)) {
i166 =  (int64_t)0;
i165 = (i165 +  (int64_t)1);
if ((i165 ==  (int64_t)64)) {
i165 =  (int64_t)0;
i164 = (i164 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp80);

uint64_t* tmp134 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);

int64_t i179;

int64_t i178;

int64_t i177;

int64_t i176;

int64_t i175;

int64_t i174;

int64_t i173;

int64_t i172;
i172 =  (int64_t)0;
i173 =  (int64_t)0;
i174 =  (int64_t)0;
i175 =  (int64_t)0;
for (uint64_t i179 =  (int32_t)0; i179 <  (int32_t)256; i179++){
for (uint64_t i178 =  (int32_t)0; i178 <  (int32_t)64; i178++){
for (uint64_t i176 =  (int32_t)0; i176 <  (int32_t)1; i176++){
for (uint64_t i177 =  (int32_t)0; i177 <  (int32_t)1; i177++){
Arr4DIdxRowM(tmp134, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i176,i177,i178,i179) = Arr4DIdxRowM(tmp9, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i172,i173,i174,i175);
i175 = (i175 +  (int64_t)1);
if ((i175 ==  (int64_t)1)) {
i175 =  (int64_t)0;
i174 = (i174 +  (int64_t)1);
if ((i174 ==  (int64_t)1)) {
i174 =  (int64_t)0;
i173 = (i173 +  (int64_t)1);
if ((i173 ==  (int64_t)64)) {
i173 =  (int64_t)0;
i172 = (i172 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1, tmp9);

uint64_t* tmp136 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp132, tmp134, tmp136);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp132);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp134);

uint64_t* tmp139 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i184;

int64_t i183;

int64_t i182;

int64_t i181;

int64_t i180;
i180 =  (int64_t)0;
for (uint64_t i181 =  (int32_t)0; i181 <  (int32_t)1; i181++){
for (uint64_t i182 =  (int32_t)0; i182 <  (int32_t)1; i182++){
for (uint64_t i183 =  (int32_t)0; i183 <  (int32_t)1; i183++){
for (uint64_t i184 =  (int32_t)0; i184 <  (int32_t)256; i184++){
Arr4DIdxRowM(tmp139, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i181,i182,i183,i184) = Arr1DIdxRowM(tmp8, (int32_t)256,i180);
i180 = (i180 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp139,  (int32_t)12);

uint64_t* tmp140 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp140, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp136, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp139, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp136);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp139);

uint64_t* tmp143 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i192;

int64_t i191;

int64_t i190;

int64_t i189;

int64_t i188;

int64_t i187;

int64_t i186;

int64_t i185;
i185 =  (int64_t)0;
i186 =  (int64_t)0;
i187 =  (int64_t)0;
i188 =  (int64_t)0;
for (uint64_t i189 =  (int32_t)0; i189 <  (int32_t)1; i189++){
for (uint64_t i191 =  (int32_t)0; i191 <  (int32_t)64; i191++){
for (uint64_t i192 =  (int32_t)0; i192 <  (int32_t)64; i192++){
for (uint64_t i190 =  (int32_t)0; i190 <  (int32_t)256; i190++){
Arr4DIdxRowM(tmp143, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i189,i190,i191,i192) = Arr4DIdxRowM(tmp140, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i185,i186,i187,i188);
i188 = (i188 +  (int64_t)1);
if ((i188 ==  (int64_t)256)) {
i188 =  (int64_t)0;
i187 = (i187 +  (int64_t)1);
if ((i187 ==  (int64_t)64)) {
i187 =  (int64_t)0;
i186 = (i186 +  (int64_t)1);
if ((i186 ==  (int64_t)64)) {
i186 =  (int64_t)0;
i185 = (i185 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp140);

uint64_t* tmp145 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i200;

int64_t i199;

int64_t i198;

int64_t i197;

int64_t i196;

int64_t i195;

int64_t i194;

int64_t i193;
i193 =  (int64_t)0;
i194 =  (int64_t)0;
i195 =  (int64_t)0;
i196 =  (int64_t)0;
for (uint64_t i197 =  (int32_t)0; i197 <  (int32_t)1; i197++){
for (uint64_t i200 =  (int32_t)0; i200 <  (int32_t)256; i200++){
for (uint64_t i198 =  (int32_t)0; i198 <  (int32_t)64; i198++){
for (uint64_t i199 =  (int32_t)0; i199 <  (int32_t)64; i199++){
Arr4DIdxRowM(tmp145, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i197,i198,i199,i200) = Arr4DIdxRowM(tmp130, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i193,i194,i195,i196);
i196 = (i196 +  (int64_t)1);
if ((i196 ==  (int64_t)64)) {
i196 =  (int64_t)0;
i195 = (i195 +  (int64_t)1);
if ((i195 ==  (int64_t)64)) {
i195 =  (int64_t)0;
i194 = (i194 +  (int64_t)1);
if ((i194 ==  (int64_t)256)) {
i194 =  (int64_t)0;
i193 = (i193 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp130);

uint64_t* tmp147 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i208;

int64_t i207;

int64_t i206;

int64_t i205;

int64_t i204;

int64_t i203;

int64_t i202;

int64_t i201;
i201 =  (int64_t)0;
i202 =  (int64_t)0;
i203 =  (int64_t)0;
i204 =  (int64_t)0;
for (uint64_t i205 =  (int32_t)0; i205 <  (int32_t)1; i205++){
for (uint64_t i208 =  (int32_t)0; i208 <  (int32_t)256; i208++){
for (uint64_t i206 =  (int32_t)0; i206 <  (int32_t)64; i206++){
for (uint64_t i207 =  (int32_t)0; i207 <  (int32_t)64; i207++){
Arr4DIdxRowM(tmp147, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i205,i206,i207,i208) = Arr4DIdxRowM(tmp143, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i201,i202,i203,i204);
i204 = (i204 +  (int64_t)1);
if ((i204 ==  (int64_t)64)) {
i204 =  (int64_t)0;
i203 = (i203 +  (int64_t)1);
if ((i203 ==  (int64_t)64)) {
i203 =  (int64_t)0;
i202 = (i202 +  (int64_t)1);
if ((i202 ==  (int64_t)256)) {
i202 =  (int64_t)0;
i201 = (i201 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp143);

uint64_t* tmp149 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp149, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp145, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp147, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp145);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp147);

uint64_t* tmp152 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i216;

int64_t i215;

int64_t i214;

int64_t i213;

int64_t i212;

int64_t i211;

int64_t i210;

int64_t i209;
i209 =  (int64_t)0;
i210 =  (int64_t)0;
i211 =  (int64_t)0;
i212 =  (int64_t)0;
for (uint64_t i213 =  (int32_t)0; i213 <  (int32_t)1; i213++){
for (uint64_t i215 =  (int32_t)0; i215 <  (int32_t)64; i215++){
for (uint64_t i216 =  (int32_t)0; i216 <  (int32_t)64; i216++){
for (uint64_t i214 =  (int32_t)0; i214 <  (int32_t)256; i214++){
Arr4DIdxRowM(tmp152, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i213,i214,i215,i216) = Arr4DIdxRowM(tmp149, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i209,i210,i211,i212);
i212 = (i212 +  (int64_t)1);
if ((i212 ==  (int64_t)256)) {
i212 =  (int64_t)0;
i211 = (i211 +  (int64_t)1);
if ((i211 ==  (int64_t)64)) {
i211 =  (int64_t)0;
i210 = (i210 +  (int64_t)1);
if ((i210 ==  (int64_t)64)) {
i210 =  (int64_t)0;
i209 = (i209 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp149);

uint64_t* tmp154 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i224;

int64_t i223;

int64_t i222;

int64_t i221;

int64_t i220;

int64_t i219;

int64_t i218;

int64_t i217;
i217 =  (int64_t)0;
i218 =  (int64_t)0;
i219 =  (int64_t)0;
i220 =  (int64_t)0;
for (uint64_t i221 =  (int32_t)0; i221 <  (int32_t)1; i221++){
for (uint64_t i224 =  (int32_t)0; i224 <  (int32_t)256; i224++){
for (uint64_t i222 =  (int32_t)0; i222 <  (int32_t)64; i222++){
for (uint64_t i223 =  (int32_t)0; i223 <  (int32_t)64; i223++){
Arr4DIdxRowM(tmp154, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i221,i222,i223,i224) = Arr4DIdxRowM(tmp152, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i217,i218,i219,i220);
i220 = (i220 +  (int64_t)1);
if ((i220 ==  (int64_t)64)) {
i220 =  (int64_t)0;
i219 = (i219 +  (int64_t)1);
if ((i219 ==  (int64_t)64)) {
i219 =  (int64_t)0;
i218 = (i218 +  (int64_t)1);
if ((i218 ==  (int64_t)256)) {
i218 =  (int64_t)0;
i217 = (i217 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp152);

uint64_t* tmp156 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp154, tmp156,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp154);

uint64_t* tmp158 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i232;

int64_t i231;

int64_t i230;

int64_t i229;

int64_t i228;

int64_t i227;

int64_t i226;

int64_t i225;
i225 =  (int64_t)0;
i226 =  (int64_t)0;
i227 =  (int64_t)0;
i228 =  (int64_t)0;
for (uint64_t i229 =  (int32_t)0; i229 <  (int32_t)1; i229++){
for (uint64_t i231 =  (int32_t)0; i231 <  (int32_t)64; i231++){
for (uint64_t i232 =  (int32_t)0; i232 <  (int32_t)64; i232++){
for (uint64_t i230 =  (int32_t)0; i230 <  (int32_t)256; i230++){
Arr4DIdxRowM(tmp158, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i229,i230,i231,i232) = Arr4DIdxRowM(tmp156, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i225,i226,i227,i228);
i228 = (i228 +  (int64_t)1);
if ((i228 ==  (int64_t)256)) {
i228 =  (int64_t)0;
i227 = (i227 +  (int64_t)1);
if ((i227 ==  (int64_t)64)) {
i227 =  (int64_t)0;
i226 = (i226 +  (int64_t)1);
if ((i226 ==  (int64_t)64)) {
i226 =  (int64_t)0;
i225 = (i225 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp156);

uint64_t* tmp160 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i240;

int64_t i239;

int64_t i238;

int64_t i237;

int64_t i236;

int64_t i235;

int64_t i234;

int64_t i233;
i233 =  (int64_t)0;
i234 =  (int64_t)0;
i235 =  (int64_t)0;
i236 =  (int64_t)0;
for (uint64_t i237 =  (int32_t)0; i237 <  (int32_t)1; i237++){
for (uint64_t i240 =  (int32_t)0; i240 <  (int32_t)256; i240++){
for (uint64_t i238 =  (int32_t)0; i238 <  (int32_t)64; i238++){
for (uint64_t i239 =  (int32_t)0; i239 <  (int32_t)64; i239++){
Arr4DIdxRowM(tmp160, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i237,i238,i239,i240) = Arr4DIdxRowM(tmp158, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i233,i234,i235,i236);
i236 = (i236 +  (int64_t)1);
if ((i236 ==  (int64_t)64)) {
i236 =  (int64_t)0;
i235 = (i235 +  (int64_t)1);
if ((i235 ==  (int64_t)64)) {
i235 =  (int64_t)0;
i234 = (i234 +  (int64_t)1);
if ((i234 ==  (int64_t)256)) {
i234 =  (int64_t)0;
i233 = (i233 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp161 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64);

int64_t i248;

int64_t i247;

int64_t i246;

int64_t i245;

int64_t i244;

int64_t i243;

int64_t i242;

int64_t i241;
i241 =  (int64_t)0;
i242 =  (int64_t)0;
i243 =  (int64_t)0;
i244 =  (int64_t)0;
for (uint64_t i248 =  (int32_t)0; i248 <  (int32_t)64; i248++){
for (uint64_t i247 =  (int32_t)0; i247 <  (int32_t)256; i247++){
for (uint64_t i245 =  (int32_t)0; i245 <  (int32_t)1; i245++){
for (uint64_t i246 =  (int32_t)0; i246 <  (int32_t)1; i246++){
Arr4DIdxRowM(tmp161, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)64,i245,i246,i247,i248) = Arr4DIdxRowM(tmp10, (int32_t)64, (int32_t)256, (int32_t)1, (int32_t)1,i241,i242,i243,i244);
i244 = (i244 +  (int64_t)1);
if ((i244 ==  (int64_t)1)) {
i244 =  (int64_t)0;
i243 = (i243 +  (int64_t)1);
if ((i243 ==  (int64_t)1)) {
i243 =  (int64_t)0;
i242 = (i242 +  (int64_t)1);
if ((i242 ==  (int64_t)256)) {
i242 =  (int64_t)0;
i241 = (i241 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp10);

uint64_t* tmp163 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp160, tmp161, tmp163);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp160);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64, tmp161);

uint64_t* tmp166 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i253;

int64_t i252;

int64_t i251;

int64_t i250;

int64_t i249;
i249 =  (int64_t)0;
for (uint64_t i250 =  (int32_t)0; i250 <  (int32_t)1; i250++){
for (uint64_t i251 =  (int32_t)0; i251 <  (int32_t)1; i251++){
for (uint64_t i252 =  (int32_t)0; i252 <  (int32_t)1; i252++){
for (uint64_t i253 =  (int32_t)0; i253 <  (int32_t)64; i253++){
Arr4DIdxRowM(tmp166, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i250,i251,i252,i253) = Arr1DIdxRowM(tmp4, (int32_t)64,i249);
i249 = (i249 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp166,  (int32_t)12);

uint64_t* tmp167 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp167, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp163, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp166, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp166);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp163);

uint64_t* tmp170 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i261;

int64_t i260;

int64_t i259;

int64_t i258;

int64_t i257;

int64_t i256;

int64_t i255;

int64_t i254;
i254 =  (int64_t)0;
i255 =  (int64_t)0;
i256 =  (int64_t)0;
i257 =  (int64_t)0;
for (uint64_t i258 =  (int32_t)0; i258 <  (int32_t)1; i258++){
for (uint64_t i260 =  (int32_t)0; i260 <  (int32_t)64; i260++){
for (uint64_t i261 =  (int32_t)0; i261 <  (int32_t)64; i261++){
for (uint64_t i259 =  (int32_t)0; i259 <  (int32_t)64; i259++){
Arr4DIdxRowM(tmp170, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i258,i259,i260,i261) = Arr4DIdxRowM(tmp167, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i254,i255,i256,i257);
i257 = (i257 +  (int64_t)1);
if ((i257 ==  (int64_t)64)) {
i257 =  (int64_t)0;
i256 = (i256 +  (int64_t)1);
if ((i256 ==  (int64_t)64)) {
i256 =  (int64_t)0;
i255 = (i255 +  (int64_t)1);
if ((i255 ==  (int64_t)64)) {
i255 =  (int64_t)0;
i254 = (i254 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp167);

uint64_t* tmp172 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i269;

int64_t i268;

int64_t i267;

int64_t i266;

int64_t i265;

int64_t i264;

int64_t i263;

int64_t i262;
i262 =  (int64_t)0;
i263 =  (int64_t)0;
i264 =  (int64_t)0;
i265 =  (int64_t)0;
for (uint64_t i266 =  (int32_t)0; i266 <  (int32_t)1; i266++){
for (uint64_t i269 =  (int32_t)0; i269 <  (int32_t)64; i269++){
for (uint64_t i267 =  (int32_t)0; i267 <  (int32_t)64; i267++){
for (uint64_t i268 =  (int32_t)0; i268 <  (int32_t)64; i268++){
Arr4DIdxRowM(tmp172, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i266,i267,i268,i269) = Arr4DIdxRowM(tmp170, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i262,i263,i264,i265);
i265 = (i265 +  (int64_t)1);
if ((i265 ==  (int64_t)64)) {
i265 =  (int64_t)0;
i264 = (i264 +  (int64_t)1);
if ((i264 ==  (int64_t)64)) {
i264 =  (int64_t)0;
i263 = (i263 +  (int64_t)1);
if ((i263 ==  (int64_t)64)) {
i263 =  (int64_t)0;
i262 = (i262 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp170);

uint64_t* tmp174 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp172, tmp174,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp172);

uint64_t* tmp176 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i277;

int64_t i276;

int64_t i275;

int64_t i274;

int64_t i273;

int64_t i272;

int64_t i271;

int64_t i270;
i270 =  (int64_t)0;
i271 =  (int64_t)0;
i272 =  (int64_t)0;
i273 =  (int64_t)0;
for (uint64_t i274 =  (int32_t)0; i274 <  (int32_t)1; i274++){
for (uint64_t i276 =  (int32_t)0; i276 <  (int32_t)64; i276++){
for (uint64_t i277 =  (int32_t)0; i277 <  (int32_t)64; i277++){
for (uint64_t i275 =  (int32_t)0; i275 <  (int32_t)64; i275++){
Arr4DIdxRowM(tmp176, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i274,i275,i276,i277) = Arr4DIdxRowM(tmp174, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i270,i271,i272,i273);
i273 = (i273 +  (int64_t)1);
if ((i273 ==  (int64_t)64)) {
i273 =  (int64_t)0;
i272 = (i272 +  (int64_t)1);
if ((i272 ==  (int64_t)64)) {
i272 =  (int64_t)0;
i271 = (i271 +  (int64_t)1);
if ((i271 ==  (int64_t)64)) {
i271 =  (int64_t)0;
i270 = (i270 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp174);

uint64_t* tmp178 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i285;

int64_t i284;

int64_t i283;

int64_t i282;

int64_t i281;

int64_t i280;

int64_t i279;

int64_t i278;
i278 =  (int64_t)0;
i279 =  (int64_t)0;
i280 =  (int64_t)0;
i281 =  (int64_t)0;
for (uint64_t i282 =  (int32_t)0; i282 <  (int32_t)1; i282++){
for (uint64_t i285 =  (int32_t)0; i285 <  (int32_t)64; i285++){
for (uint64_t i283 =  (int32_t)0; i283 <  (int32_t)64; i283++){
for (uint64_t i284 =  (int32_t)0; i284 <  (int32_t)64; i284++){
Arr4DIdxRowM(tmp178, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i282,i283,i284,i285) = Arr4DIdxRowM(tmp176, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i278,i279,i280,i281);
i281 = (i281 +  (int64_t)1);
if ((i281 ==  (int64_t)64)) {
i281 =  (int64_t)0;
i280 = (i280 +  (int64_t)1);
if ((i280 ==  (int64_t)64)) {
i280 =  (int64_t)0;
i279 = (i279 +  (int64_t)1);
if ((i279 ==  (int64_t)64)) {
i279 =  (int64_t)0;
i278 = (i278 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp176);

uint64_t* tmp180 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);

int64_t i293;

int64_t i292;

int64_t i291;

int64_t i290;

int64_t i289;

int64_t i288;

int64_t i287;

int64_t i286;
i286 =  (int64_t)0;
i287 =  (int64_t)0;
i288 =  (int64_t)0;
i289 =  (int64_t)0;
for (uint64_t i293 =  (int32_t)0; i293 <  (int32_t)64; i293++){
for (uint64_t i292 =  (int32_t)0; i292 <  (int32_t)64; i292++){
for (uint64_t i290 =  (int32_t)0; i290 <  (int32_t)3; i290++){
for (uint64_t i291 =  (int32_t)0; i291 <  (int32_t)3; i291++){
Arr4DIdxRowM(tmp180, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,i290,i291,i292,i293) = Arr4DIdxRowM(tmp11, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i286,i287,i288,i289);
i289 = (i289 +  (int64_t)1);
if ((i289 ==  (int64_t)3)) {
i289 =  (int64_t)0;
i288 = (i288 +  (int64_t)1);
if ((i288 ==  (int64_t)3)) {
i288 =  (int64_t)0;
i287 = (i287 +  (int64_t)1);
if ((i287 ==  (int64_t)64)) {
i287 =  (int64_t)0;
i286 = (i286 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3, tmp11);

uint64_t* tmp182 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp178, tmp180, tmp182);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp180);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp178);

uint64_t* tmp185 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i298;

int64_t i297;

int64_t i296;

int64_t i295;

int64_t i294;
i294 =  (int64_t)0;
for (uint64_t i295 =  (int32_t)0; i295 <  (int32_t)1; i295++){
for (uint64_t i296 =  (int32_t)0; i296 <  (int32_t)1; i296++){
for (uint64_t i297 =  (int32_t)0; i297 <  (int32_t)1; i297++){
for (uint64_t i298 =  (int32_t)0; i298 <  (int32_t)64; i298++){
Arr4DIdxRowM(tmp185, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i295,i296,i297,i298) = Arr1DIdxRowM(tmp4, (int32_t)64,i294);
i294 = (i294 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp185,  (int32_t)12);

uint64_t* tmp186 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp186, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp182, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp185, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp182);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp185);

uint64_t* tmp189 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i306;

int64_t i305;

int64_t i304;

int64_t i303;

int64_t i302;

int64_t i301;

int64_t i300;

int64_t i299;
i299 =  (int64_t)0;
i300 =  (int64_t)0;
i301 =  (int64_t)0;
i302 =  (int64_t)0;
for (uint64_t i303 =  (int32_t)0; i303 <  (int32_t)1; i303++){
for (uint64_t i305 =  (int32_t)0; i305 <  (int32_t)64; i305++){
for (uint64_t i306 =  (int32_t)0; i306 <  (int32_t)64; i306++){
for (uint64_t i304 =  (int32_t)0; i304 <  (int32_t)64; i304++){
Arr4DIdxRowM(tmp189, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i303,i304,i305,i306) = Arr4DIdxRowM(tmp186, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i299,i300,i301,i302);
i302 = (i302 +  (int64_t)1);
if ((i302 ==  (int64_t)64)) {
i302 =  (int64_t)0;
i301 = (i301 +  (int64_t)1);
if ((i301 ==  (int64_t)64)) {
i301 =  (int64_t)0;
i300 = (i300 +  (int64_t)1);
if ((i300 ==  (int64_t)64)) {
i300 =  (int64_t)0;
i299 = (i299 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp186);

uint64_t* tmp191 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i314;

int64_t i313;

int64_t i312;

int64_t i311;

int64_t i310;

int64_t i309;

int64_t i308;

int64_t i307;
i307 =  (int64_t)0;
i308 =  (int64_t)0;
i309 =  (int64_t)0;
i310 =  (int64_t)0;
for (uint64_t i311 =  (int32_t)0; i311 <  (int32_t)1; i311++){
for (uint64_t i314 =  (int32_t)0; i314 <  (int32_t)64; i314++){
for (uint64_t i312 =  (int32_t)0; i312 <  (int32_t)64; i312++){
for (uint64_t i313 =  (int32_t)0; i313 <  (int32_t)64; i313++){
Arr4DIdxRowM(tmp191, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i311,i312,i313,i314) = Arr4DIdxRowM(tmp189, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i307,i308,i309,i310);
i310 = (i310 +  (int64_t)1);
if ((i310 ==  (int64_t)64)) {
i310 =  (int64_t)0;
i309 = (i309 +  (int64_t)1);
if ((i309 ==  (int64_t)64)) {
i309 =  (int64_t)0;
i308 = (i308 +  (int64_t)1);
if ((i308 ==  (int64_t)64)) {
i308 =  (int64_t)0;
i307 = (i307 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp189);

uint64_t* tmp193 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp191, tmp193,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp191);

uint64_t* tmp195 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i322;

int64_t i321;

int64_t i320;

int64_t i319;

int64_t i318;

int64_t i317;

int64_t i316;

int64_t i315;
i315 =  (int64_t)0;
i316 =  (int64_t)0;
i317 =  (int64_t)0;
i318 =  (int64_t)0;
for (uint64_t i319 =  (int32_t)0; i319 <  (int32_t)1; i319++){
for (uint64_t i321 =  (int32_t)0; i321 <  (int32_t)64; i321++){
for (uint64_t i322 =  (int32_t)0; i322 <  (int32_t)64; i322++){
for (uint64_t i320 =  (int32_t)0; i320 <  (int32_t)64; i320++){
Arr4DIdxRowM(tmp195, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i319,i320,i321,i322) = Arr4DIdxRowM(tmp193, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i315,i316,i317,i318);
i318 = (i318 +  (int64_t)1);
if ((i318 ==  (int64_t)64)) {
i318 =  (int64_t)0;
i317 = (i317 +  (int64_t)1);
if ((i317 ==  (int64_t)64)) {
i317 =  (int64_t)0;
i316 = (i316 +  (int64_t)1);
if ((i316 ==  (int64_t)64)) {
i316 =  (int64_t)0;
i315 = (i315 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp193);

uint64_t* tmp197 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i330;

int64_t i329;

int64_t i328;

int64_t i327;

int64_t i326;

int64_t i325;

int64_t i324;

int64_t i323;
i323 =  (int64_t)0;
i324 =  (int64_t)0;
i325 =  (int64_t)0;
i326 =  (int64_t)0;
for (uint64_t i327 =  (int32_t)0; i327 <  (int32_t)1; i327++){
for (uint64_t i330 =  (int32_t)0; i330 <  (int32_t)64; i330++){
for (uint64_t i328 =  (int32_t)0; i328 <  (int32_t)64; i328++){
for (uint64_t i329 =  (int32_t)0; i329 <  (int32_t)64; i329++){
Arr4DIdxRowM(tmp197, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i327,i328,i329,i330) = Arr4DIdxRowM(tmp195, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i323,i324,i325,i326);
i326 = (i326 +  (int64_t)1);
if ((i326 ==  (int64_t)64)) {
i326 =  (int64_t)0;
i325 = (i325 +  (int64_t)1);
if ((i325 ==  (int64_t)64)) {
i325 =  (int64_t)0;
i324 = (i324 +  (int64_t)1);
if ((i324 ==  (int64_t)64)) {
i324 =  (int64_t)0;
i323 = (i323 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp195);

uint64_t* tmp199 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);

int64_t i338;

int64_t i337;

int64_t i336;

int64_t i335;

int64_t i334;

int64_t i333;

int64_t i332;

int64_t i331;
i331 =  (int64_t)0;
i332 =  (int64_t)0;
i333 =  (int64_t)0;
i334 =  (int64_t)0;
for (uint64_t i338 =  (int32_t)0; i338 <  (int32_t)256; i338++){
for (uint64_t i337 =  (int32_t)0; i337 <  (int32_t)64; i337++){
for (uint64_t i335 =  (int32_t)0; i335 <  (int32_t)1; i335++){
for (uint64_t i336 =  (int32_t)0; i336 <  (int32_t)1; i336++){
Arr4DIdxRowM(tmp199, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i335,i336,i337,i338) = Arr4DIdxRowM(tmp12, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i331,i332,i333,i334);
i334 = (i334 +  (int64_t)1);
if ((i334 ==  (int64_t)1)) {
i334 =  (int64_t)0;
i333 = (i333 +  (int64_t)1);
if ((i333 ==  (int64_t)1)) {
i333 =  (int64_t)0;
i332 = (i332 +  (int64_t)1);
if ((i332 ==  (int64_t)64)) {
i332 =  (int64_t)0;
i331 = (i331 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1, tmp12);

uint64_t* tmp201 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp197, tmp199, tmp201);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp199);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp197);

uint64_t* tmp204 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i343;

int64_t i342;

int64_t i341;

int64_t i340;

int64_t i339;
i339 =  (int64_t)0;
for (uint64_t i340 =  (int32_t)0; i340 <  (int32_t)1; i340++){
for (uint64_t i341 =  (int32_t)0; i341 <  (int32_t)1; i341++){
for (uint64_t i342 =  (int32_t)0; i342 <  (int32_t)1; i342++){
for (uint64_t i343 =  (int32_t)0; i343 <  (int32_t)256; i343++){
Arr4DIdxRowM(tmp204, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i340,i341,i342,i343) = Arr1DIdxRowM(tmp8, (int32_t)256,i339);
i339 = (i339 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp204,  (int32_t)12);

uint64_t* tmp205 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp205, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp201, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp204, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp204);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp201);

uint64_t* tmp208 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i351;

int64_t i350;

int64_t i349;

int64_t i348;

int64_t i347;

int64_t i346;

int64_t i345;

int64_t i344;
i344 =  (int64_t)0;
i345 =  (int64_t)0;
i346 =  (int64_t)0;
i347 =  (int64_t)0;
for (uint64_t i348 =  (int32_t)0; i348 <  (int32_t)1; i348++){
for (uint64_t i350 =  (int32_t)0; i350 <  (int32_t)64; i350++){
for (uint64_t i351 =  (int32_t)0; i351 <  (int32_t)64; i351++){
for (uint64_t i349 =  (int32_t)0; i349 <  (int32_t)256; i349++){
Arr4DIdxRowM(tmp208, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i348,i349,i350,i351) = Arr4DIdxRowM(tmp205, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i344,i345,i346,i347);
i347 = (i347 +  (int64_t)1);
if ((i347 ==  (int64_t)256)) {
i347 =  (int64_t)0;
i346 = (i346 +  (int64_t)1);
if ((i346 ==  (int64_t)64)) {
i346 =  (int64_t)0;
i345 = (i345 +  (int64_t)1);
if ((i345 ==  (int64_t)64)) {
i345 =  (int64_t)0;
i344 = (i344 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp205);

uint64_t* tmp210 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i359;

int64_t i358;

int64_t i357;

int64_t i356;

int64_t i355;

int64_t i354;

int64_t i353;

int64_t i352;
i352 =  (int64_t)0;
i353 =  (int64_t)0;
i354 =  (int64_t)0;
i355 =  (int64_t)0;
for (uint64_t i356 =  (int32_t)0; i356 <  (int32_t)1; i356++){
for (uint64_t i359 =  (int32_t)0; i359 <  (int32_t)256; i359++){
for (uint64_t i357 =  (int32_t)0; i357 <  (int32_t)64; i357++){
for (uint64_t i358 =  (int32_t)0; i358 <  (int32_t)64; i358++){
Arr4DIdxRowM(tmp210, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i356,i357,i358,i359) = Arr4DIdxRowM(tmp208, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i352,i353,i354,i355);
i355 = (i355 +  (int64_t)1);
if ((i355 ==  (int64_t)64)) {
i355 =  (int64_t)0;
i354 = (i354 +  (int64_t)1);
if ((i354 ==  (int64_t)64)) {
i354 =  (int64_t)0;
i353 = (i353 +  (int64_t)1);
if ((i353 ==  (int64_t)256)) {
i353 =  (int64_t)0;
i352 = (i352 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp208);

uint64_t* tmp212 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i367;

int64_t i366;

int64_t i365;

int64_t i364;

int64_t i363;

int64_t i362;

int64_t i361;

int64_t i360;
i360 =  (int64_t)0;
i361 =  (int64_t)0;
i362 =  (int64_t)0;
i363 =  (int64_t)0;
for (uint64_t i364 =  (int32_t)0; i364 <  (int32_t)1; i364++){
for (uint64_t i367 =  (int32_t)0; i367 <  (int32_t)256; i367++){
for (uint64_t i365 =  (int32_t)0; i365 <  (int32_t)64; i365++){
for (uint64_t i366 =  (int32_t)0; i366 <  (int32_t)64; i366++){
Arr4DIdxRowM(tmp212, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i364,i365,i366,i367) = Arr4DIdxRowM(tmp158, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i360,i361,i362,i363);
i363 = (i363 +  (int64_t)1);
if ((i363 ==  (int64_t)64)) {
i363 =  (int64_t)0;
i362 = (i362 +  (int64_t)1);
if ((i362 ==  (int64_t)64)) {
i362 =  (int64_t)0;
i361 = (i361 +  (int64_t)1);
if ((i361 ==  (int64_t)256)) {
i361 =  (int64_t)0;
i360 = (i360 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp158);
ScaleUp4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp212,  (int32_t)12);

uint64_t* tmp214 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp214, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp210, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp212, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp210);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp212);

uint64_t* tmp217 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i375;

int64_t i374;

int64_t i373;

int64_t i372;

int64_t i371;

int64_t i370;

int64_t i369;

int64_t i368;
i368 =  (int64_t)0;
i369 =  (int64_t)0;
i370 =  (int64_t)0;
i371 =  (int64_t)0;
for (uint64_t i372 =  (int32_t)0; i372 <  (int32_t)1; i372++){
for (uint64_t i374 =  (int32_t)0; i374 <  (int32_t)64; i374++){
for (uint64_t i375 =  (int32_t)0; i375 <  (int32_t)64; i375++){
for (uint64_t i373 =  (int32_t)0; i373 <  (int32_t)256; i373++){
Arr4DIdxRowM(tmp217, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i372,i373,i374,i375) = Arr4DIdxRowM(tmp214, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i368,i369,i370,i371);
i371 = (i371 +  (int64_t)1);
if ((i371 ==  (int64_t)256)) {
i371 =  (int64_t)0;
i370 = (i370 +  (int64_t)1);
if ((i370 ==  (int64_t)64)) {
i370 =  (int64_t)0;
i369 = (i369 +  (int64_t)1);
if ((i369 ==  (int64_t)64)) {
i369 =  (int64_t)0;
i368 = (i368 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp214);

uint64_t* tmp219 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i383;

int64_t i382;

int64_t i381;

int64_t i380;

int64_t i379;

int64_t i378;

int64_t i377;

int64_t i376;
i376 =  (int64_t)0;
i377 =  (int64_t)0;
i378 =  (int64_t)0;
i379 =  (int64_t)0;
for (uint64_t i380 =  (int32_t)0; i380 <  (int32_t)1; i380++){
for (uint64_t i383 =  (int32_t)0; i383 <  (int32_t)256; i383++){
for (uint64_t i381 =  (int32_t)0; i381 <  (int32_t)64; i381++){
for (uint64_t i382 =  (int32_t)0; i382 <  (int32_t)64; i382++){
Arr4DIdxRowM(tmp219, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i380,i381,i382,i383) = Arr4DIdxRowM(tmp217, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i376,i377,i378,i379);
i379 = (i379 +  (int64_t)1);
if ((i379 ==  (int64_t)64)) {
i379 =  (int64_t)0;
i378 = (i378 +  (int64_t)1);
if ((i378 ==  (int64_t)64)) {
i378 =  (int64_t)0;
i377 = (i377 +  (int64_t)1);
if ((i377 ==  (int64_t)256)) {
i377 =  (int64_t)0;
i376 = (i376 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp217);

uint64_t* tmp221 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp219, tmp221,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp219);

uint64_t* tmp223 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i391;

int64_t i390;

int64_t i389;

int64_t i388;

int64_t i387;

int64_t i386;

int64_t i385;

int64_t i384;
i384 =  (int64_t)0;
i385 =  (int64_t)0;
i386 =  (int64_t)0;
i387 =  (int64_t)0;
for (uint64_t i388 =  (int32_t)0; i388 <  (int32_t)1; i388++){
for (uint64_t i390 =  (int32_t)0; i390 <  (int32_t)64; i390++){
for (uint64_t i391 =  (int32_t)0; i391 <  (int32_t)64; i391++){
for (uint64_t i389 =  (int32_t)0; i389 <  (int32_t)256; i389++){
Arr4DIdxRowM(tmp223, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i388,i389,i390,i391) = Arr4DIdxRowM(tmp221, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i384,i385,i386,i387);
i387 = (i387 +  (int64_t)1);
if ((i387 ==  (int64_t)256)) {
i387 =  (int64_t)0;
i386 = (i386 +  (int64_t)1);
if ((i386 ==  (int64_t)64)) {
i386 =  (int64_t)0;
i385 = (i385 +  (int64_t)1);
if ((i385 ==  (int64_t)64)) {
i385 =  (int64_t)0;
i384 = (i384 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp221);

uint64_t* tmp225 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i399;

int64_t i398;

int64_t i397;

int64_t i396;

int64_t i395;

int64_t i394;

int64_t i393;

int64_t i392;
i392 =  (int64_t)0;
i393 =  (int64_t)0;
i394 =  (int64_t)0;
i395 =  (int64_t)0;
for (uint64_t i396 =  (int32_t)0; i396 <  (int32_t)1; i396++){
for (uint64_t i399 =  (int32_t)0; i399 <  (int32_t)256; i399++){
for (uint64_t i397 =  (int32_t)0; i397 <  (int32_t)64; i397++){
for (uint64_t i398 =  (int32_t)0; i398 <  (int32_t)64; i398++){
Arr4DIdxRowM(tmp225, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i396,i397,i398,i399) = Arr4DIdxRowM(tmp223, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i392,i393,i394,i395);
i395 = (i395 +  (int64_t)1);
if ((i395 ==  (int64_t)64)) {
i395 =  (int64_t)0;
i394 = (i394 +  (int64_t)1);
if ((i394 ==  (int64_t)64)) {
i394 =  (int64_t)0;
i393 = (i393 +  (int64_t)1);
if ((i393 ==  (int64_t)256)) {
i393 =  (int64_t)0;
i392 = (i392 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp226 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64);

int64_t i407;

int64_t i406;

int64_t i405;

int64_t i404;

int64_t i403;

int64_t i402;

int64_t i401;

int64_t i400;
i400 =  (int64_t)0;
i401 =  (int64_t)0;
i402 =  (int64_t)0;
i403 =  (int64_t)0;
for (uint64_t i407 =  (int32_t)0; i407 <  (int32_t)64; i407++){
for (uint64_t i406 =  (int32_t)0; i406 <  (int32_t)256; i406++){
for (uint64_t i404 =  (int32_t)0; i404 <  (int32_t)1; i404++){
for (uint64_t i405 =  (int32_t)0; i405 <  (int32_t)1; i405++){
Arr4DIdxRowM(tmp226, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)64,i404,i405,i406,i407) = Arr4DIdxRowM(tmp13, (int32_t)64, (int32_t)256, (int32_t)1, (int32_t)1,i400,i401,i402,i403);
i403 = (i403 +  (int64_t)1);
if ((i403 ==  (int64_t)1)) {
i403 =  (int64_t)0;
i402 = (i402 +  (int64_t)1);
if ((i402 ==  (int64_t)1)) {
i402 =  (int64_t)0;
i401 = (i401 +  (int64_t)1);
if ((i401 ==  (int64_t)256)) {
i401 =  (int64_t)0;
i400 = (i400 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp13);

uint64_t* tmp228 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp225, tmp226, tmp228);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp225);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64, tmp226);

uint64_t* tmp231 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i412;

int64_t i411;

int64_t i410;

int64_t i409;

int64_t i408;
i408 =  (int64_t)0;
for (uint64_t i409 =  (int32_t)0; i409 <  (int32_t)1; i409++){
for (uint64_t i410 =  (int32_t)0; i410 <  (int32_t)1; i410++){
for (uint64_t i411 =  (int32_t)0; i411 <  (int32_t)1; i411++){
for (uint64_t i412 =  (int32_t)0; i412 <  (int32_t)64; i412++){
Arr4DIdxRowM(tmp231, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i409,i410,i411,i412) = Arr1DIdxRowM(tmp4, (int32_t)64,i408);
i408 = (i408 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp231,  (int32_t)12);

uint64_t* tmp232 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp232, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp228, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp231, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp231);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp228);

uint64_t* tmp235 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i420;

int64_t i419;

int64_t i418;

int64_t i417;

int64_t i416;

int64_t i415;

int64_t i414;

int64_t i413;
i413 =  (int64_t)0;
i414 =  (int64_t)0;
i415 =  (int64_t)0;
i416 =  (int64_t)0;
for (uint64_t i417 =  (int32_t)0; i417 <  (int32_t)1; i417++){
for (uint64_t i419 =  (int32_t)0; i419 <  (int32_t)64; i419++){
for (uint64_t i420 =  (int32_t)0; i420 <  (int32_t)64; i420++){
for (uint64_t i418 =  (int32_t)0; i418 <  (int32_t)64; i418++){
Arr4DIdxRowM(tmp235, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i417,i418,i419,i420) = Arr4DIdxRowM(tmp232, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i413,i414,i415,i416);
i416 = (i416 +  (int64_t)1);
if ((i416 ==  (int64_t)64)) {
i416 =  (int64_t)0;
i415 = (i415 +  (int64_t)1);
if ((i415 ==  (int64_t)64)) {
i415 =  (int64_t)0;
i414 = (i414 +  (int64_t)1);
if ((i414 ==  (int64_t)64)) {
i414 =  (int64_t)0;
i413 = (i413 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp232);

uint64_t* tmp237 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i428;

int64_t i427;

int64_t i426;

int64_t i425;

int64_t i424;

int64_t i423;

int64_t i422;

int64_t i421;
i421 =  (int64_t)0;
i422 =  (int64_t)0;
i423 =  (int64_t)0;
i424 =  (int64_t)0;
for (uint64_t i425 =  (int32_t)0; i425 <  (int32_t)1; i425++){
for (uint64_t i428 =  (int32_t)0; i428 <  (int32_t)64; i428++){
for (uint64_t i426 =  (int32_t)0; i426 <  (int32_t)64; i426++){
for (uint64_t i427 =  (int32_t)0; i427 <  (int32_t)64; i427++){
Arr4DIdxRowM(tmp237, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i425,i426,i427,i428) = Arr4DIdxRowM(tmp235, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i421,i422,i423,i424);
i424 = (i424 +  (int64_t)1);
if ((i424 ==  (int64_t)64)) {
i424 =  (int64_t)0;
i423 = (i423 +  (int64_t)1);
if ((i423 ==  (int64_t)64)) {
i423 =  (int64_t)0;
i422 = (i422 +  (int64_t)1);
if ((i422 ==  (int64_t)64)) {
i422 =  (int64_t)0;
i421 = (i421 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp235);

uint64_t* tmp239 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp237, tmp239,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp237);

uint64_t* tmp241 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i436;

int64_t i435;

int64_t i434;

int64_t i433;

int64_t i432;

int64_t i431;

int64_t i430;

int64_t i429;
i429 =  (int64_t)0;
i430 =  (int64_t)0;
i431 =  (int64_t)0;
i432 =  (int64_t)0;
for (uint64_t i433 =  (int32_t)0; i433 <  (int32_t)1; i433++){
for (uint64_t i435 =  (int32_t)0; i435 <  (int32_t)64; i435++){
for (uint64_t i436 =  (int32_t)0; i436 <  (int32_t)64; i436++){
for (uint64_t i434 =  (int32_t)0; i434 <  (int32_t)64; i434++){
Arr4DIdxRowM(tmp241, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i433,i434,i435,i436) = Arr4DIdxRowM(tmp239, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i429,i430,i431,i432);
i432 = (i432 +  (int64_t)1);
if ((i432 ==  (int64_t)64)) {
i432 =  (int64_t)0;
i431 = (i431 +  (int64_t)1);
if ((i431 ==  (int64_t)64)) {
i431 =  (int64_t)0;
i430 = (i430 +  (int64_t)1);
if ((i430 ==  (int64_t)64)) {
i430 =  (int64_t)0;
i429 = (i429 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp239);

uint64_t* tmp243 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i444;

int64_t i443;

int64_t i442;

int64_t i441;

int64_t i440;

int64_t i439;

int64_t i438;

int64_t i437;
i437 =  (int64_t)0;
i438 =  (int64_t)0;
i439 =  (int64_t)0;
i440 =  (int64_t)0;
for (uint64_t i441 =  (int32_t)0; i441 <  (int32_t)1; i441++){
for (uint64_t i444 =  (int32_t)0; i444 <  (int32_t)64; i444++){
for (uint64_t i442 =  (int32_t)0; i442 <  (int32_t)64; i442++){
for (uint64_t i443 =  (int32_t)0; i443 <  (int32_t)64; i443++){
Arr4DIdxRowM(tmp243, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i441,i442,i443,i444) = Arr4DIdxRowM(tmp241, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i437,i438,i439,i440);
i440 = (i440 +  (int64_t)1);
if ((i440 ==  (int64_t)64)) {
i440 =  (int64_t)0;
i439 = (i439 +  (int64_t)1);
if ((i439 ==  (int64_t)64)) {
i439 =  (int64_t)0;
i438 = (i438 +  (int64_t)1);
if ((i438 ==  (int64_t)64)) {
i438 =  (int64_t)0;
i437 = (i437 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp241);

uint64_t* tmp245 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);

int64_t i452;

int64_t i451;

int64_t i450;

int64_t i449;

int64_t i448;

int64_t i447;

int64_t i446;

int64_t i445;
i445 =  (int64_t)0;
i446 =  (int64_t)0;
i447 =  (int64_t)0;
i448 =  (int64_t)0;
for (uint64_t i452 =  (int32_t)0; i452 <  (int32_t)64; i452++){
for (uint64_t i451 =  (int32_t)0; i451 <  (int32_t)64; i451++){
for (uint64_t i449 =  (int32_t)0; i449 <  (int32_t)3; i449++){
for (uint64_t i450 =  (int32_t)0; i450 <  (int32_t)3; i450++){
Arr4DIdxRowM(tmp245, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,i449,i450,i451,i452) = Arr4DIdxRowM(tmp14, (int32_t)64, (int32_t)64, (int32_t)3, (int32_t)3,i445,i446,i447,i448);
i448 = (i448 +  (int64_t)1);
if ((i448 ==  (int64_t)3)) {
i448 =  (int64_t)0;
i447 = (i447 +  (int64_t)1);
if ((i447 ==  (int64_t)3)) {
i447 =  (int64_t)0;
i446 = (i446 +  (int64_t)1);
if ((i446 ==  (int64_t)64)) {
i446 =  (int64_t)0;
i445 = (i445 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3, tmp14);

uint64_t* tmp247 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp243, tmp245, tmp247);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp245);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp243);

uint64_t* tmp250 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64);

int64_t i457;

int64_t i456;

int64_t i455;

int64_t i454;

int64_t i453;
i453 =  (int64_t)0;
for (uint64_t i454 =  (int32_t)0; i454 <  (int32_t)1; i454++){
for (uint64_t i455 =  (int32_t)0; i455 <  (int32_t)1; i455++){
for (uint64_t i456 =  (int32_t)0; i456 <  (int32_t)1; i456++){
for (uint64_t i457 =  (int32_t)0; i457 <  (int32_t)64; i457++){
Arr4DIdxRowM(tmp250, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i454,i455,i456,i457) = Arr1DIdxRowM(tmp4, (int32_t)64,i453);
i453 = (i453 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)64, tmp4);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp250,  (int32_t)12);

uint64_t* tmp252 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)64; i3++){
Arr4DIdxRowM(tmp252, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp247, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i0,i1,i2,i3), Arr4DIdxRowM(tmp250, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp247);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64, tmp250);

uint64_t* tmp255 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i465;

int64_t i464;

int64_t i463;

int64_t i462;

int64_t i461;

int64_t i460;

int64_t i459;

int64_t i458;
i458 =  (int64_t)0;
i459 =  (int64_t)0;
i460 =  (int64_t)0;
i461 =  (int64_t)0;
for (uint64_t i462 =  (int32_t)0; i462 <  (int32_t)1; i462++){
for (uint64_t i464 =  (int32_t)0; i464 <  (int32_t)64; i464++){
for (uint64_t i465 =  (int32_t)0; i465 <  (int32_t)64; i465++){
for (uint64_t i463 =  (int32_t)0; i463 <  (int32_t)64; i463++){
Arr4DIdxRowM(tmp255, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i462,i463,i464,i465) = Arr4DIdxRowM(tmp252, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i458,i459,i460,i461);
i461 = (i461 +  (int64_t)1);
if ((i461 ==  (int64_t)64)) {
i461 =  (int64_t)0;
i460 = (i460 +  (int64_t)1);
if ((i460 ==  (int64_t)64)) {
i460 =  (int64_t)0;
i459 = (i459 +  (int64_t)1);
if ((i459 ==  (int64_t)64)) {
i459 =  (int64_t)0;
i458 = (i458 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp252);

uint64_t* tmp257 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i473;

int64_t i472;

int64_t i471;

int64_t i470;

int64_t i469;

int64_t i468;

int64_t i467;

int64_t i466;
i466 =  (int64_t)0;
i467 =  (int64_t)0;
i468 =  (int64_t)0;
i469 =  (int64_t)0;
for (uint64_t i470 =  (int32_t)0; i470 <  (int32_t)1; i470++){
for (uint64_t i473 =  (int32_t)0; i473 <  (int32_t)64; i473++){
for (uint64_t i471 =  (int32_t)0; i471 <  (int32_t)64; i471++){
for (uint64_t i472 =  (int32_t)0; i472 <  (int32_t)64; i472++){
Arr4DIdxRowM(tmp257, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i470,i471,i472,i473) = Arr4DIdxRowM(tmp255, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i466,i467,i468,i469);
i469 = (i469 +  (int64_t)1);
if ((i469 ==  (int64_t)64)) {
i469 =  (int64_t)0;
i468 = (i468 +  (int64_t)1);
if ((i468 ==  (int64_t)64)) {
i468 =  (int64_t)0;
i467 = (i467 +  (int64_t)1);
if ((i467 ==  (int64_t)64)) {
i467 =  (int64_t)0;
i466 = (i466 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp255);

uint64_t* tmp259 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp257, tmp259,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp257);

uint64_t* tmp261 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i481;

int64_t i480;

int64_t i479;

int64_t i478;

int64_t i477;

int64_t i476;

int64_t i475;

int64_t i474;
i474 =  (int64_t)0;
i475 =  (int64_t)0;
i476 =  (int64_t)0;
i477 =  (int64_t)0;
for (uint64_t i478 =  (int32_t)0; i478 <  (int32_t)1; i478++){
for (uint64_t i480 =  (int32_t)0; i480 <  (int32_t)64; i480++){
for (uint64_t i481 =  (int32_t)0; i481 <  (int32_t)64; i481++){
for (uint64_t i479 =  (int32_t)0; i479 <  (int32_t)64; i479++){
Arr4DIdxRowM(tmp261, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i478,i479,i480,i481) = Arr4DIdxRowM(tmp259, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i474,i475,i476,i477);
i477 = (i477 +  (int64_t)1);
if ((i477 ==  (int64_t)64)) {
i477 =  (int64_t)0;
i476 = (i476 +  (int64_t)1);
if ((i476 ==  (int64_t)64)) {
i476 =  (int64_t)0;
i475 = (i475 +  (int64_t)1);
if ((i475 ==  (int64_t)64)) {
i475 =  (int64_t)0;
i474 = (i474 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp259);

uint64_t* tmp263 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64);

int64_t i489;

int64_t i488;

int64_t i487;

int64_t i486;

int64_t i485;

int64_t i484;

int64_t i483;

int64_t i482;
i482 =  (int64_t)0;
i483 =  (int64_t)0;
i484 =  (int64_t)0;
i485 =  (int64_t)0;
for (uint64_t i486 =  (int32_t)0; i486 <  (int32_t)1; i486++){
for (uint64_t i489 =  (int32_t)0; i489 <  (int32_t)64; i489++){
for (uint64_t i487 =  (int32_t)0; i487 <  (int32_t)64; i487++){
for (uint64_t i488 =  (int32_t)0; i488 <  (int32_t)64; i488++){
Arr4DIdxRowM(tmp263, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i486,i487,i488,i489) = Arr4DIdxRowM(tmp261, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)64,i482,i483,i484,i485);
i485 = (i485 +  (int64_t)1);
if ((i485 ==  (int64_t)64)) {
i485 =  (int64_t)0;
i484 = (i484 +  (int64_t)1);
if ((i484 ==  (int64_t)64)) {
i484 =  (int64_t)0;
i483 = (i483 +  (int64_t)1);
if ((i483 ==  (int64_t)64)) {
i483 =  (int64_t)0;
i482 = (i482 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp261);

uint64_t* tmp265 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);

int64_t i497;

int64_t i496;

int64_t i495;

int64_t i494;

int64_t i493;

int64_t i492;

int64_t i491;

int64_t i490;
i490 =  (int64_t)0;
i491 =  (int64_t)0;
i492 =  (int64_t)0;
i493 =  (int64_t)0;
for (uint64_t i497 =  (int32_t)0; i497 <  (int32_t)256; i497++){
for (uint64_t i496 =  (int32_t)0; i496 <  (int32_t)64; i496++){
for (uint64_t i494 =  (int32_t)0; i494 <  (int32_t)1; i494++){
for (uint64_t i495 =  (int32_t)0; i495 <  (int32_t)1; i495++){
Arr4DIdxRowM(tmp265, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i494,i495,i496,i497) = Arr4DIdxRowM(tmp15, (int32_t)256, (int32_t)64, (int32_t)1, (int32_t)1,i490,i491,i492,i493);
i493 = (i493 +  (int64_t)1);
if ((i493 ==  (int64_t)1)) {
i493 =  (int64_t)0;
i492 = (i492 +  (int64_t)1);
if ((i492 ==  (int64_t)1)) {
i492 =  (int64_t)0;
i491 = (i491 +  (int64_t)1);
if ((i491 ==  (int64_t)64)) {
i491 =  (int64_t)0;
i490 = (i490 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)64,  (int32_t)1,  (int32_t)1, tmp15);

uint64_t* tmp267 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp263, tmp265, tmp267);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)64, tmp263);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp265);

uint64_t* tmp270 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i502;

int64_t i501;

int64_t i500;

int64_t i499;

int64_t i498;
i498 =  (int64_t)0;
for (uint64_t i499 =  (int32_t)0; i499 <  (int32_t)1; i499++){
for (uint64_t i500 =  (int32_t)0; i500 <  (int32_t)1; i500++){
for (uint64_t i501 =  (int32_t)0; i501 <  (int32_t)1; i501++){
for (uint64_t i502 =  (int32_t)0; i502 <  (int32_t)256; i502++){
Arr4DIdxRowM(tmp270, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i499,i500,i501,i502) = Arr1DIdxRowM(tmp8, (int32_t)256,i498);
i498 = (i498 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp270,  (int32_t)12);

uint64_t* tmp271 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp271, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp267, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp270, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp267);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp270);

uint64_t* tmp274 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i510;

int64_t i509;

int64_t i508;

int64_t i507;

int64_t i506;

int64_t i505;

int64_t i504;

int64_t i503;
i503 =  (int64_t)0;
i504 =  (int64_t)0;
i505 =  (int64_t)0;
i506 =  (int64_t)0;
for (uint64_t i507 =  (int32_t)0; i507 <  (int32_t)1; i507++){
for (uint64_t i509 =  (int32_t)0; i509 <  (int32_t)64; i509++){
for (uint64_t i510 =  (int32_t)0; i510 <  (int32_t)64; i510++){
for (uint64_t i508 =  (int32_t)0; i508 <  (int32_t)256; i508++){
Arr4DIdxRowM(tmp274, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i507,i508,i509,i510) = Arr4DIdxRowM(tmp271, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i503,i504,i505,i506);
i506 = (i506 +  (int64_t)1);
if ((i506 ==  (int64_t)256)) {
i506 =  (int64_t)0;
i505 = (i505 +  (int64_t)1);
if ((i505 ==  (int64_t)64)) {
i505 =  (int64_t)0;
i504 = (i504 +  (int64_t)1);
if ((i504 ==  (int64_t)64)) {
i504 =  (int64_t)0;
i503 = (i503 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp271);

uint64_t* tmp276 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i518;

int64_t i517;

int64_t i516;

int64_t i515;

int64_t i514;

int64_t i513;

int64_t i512;

int64_t i511;
i511 =  (int64_t)0;
i512 =  (int64_t)0;
i513 =  (int64_t)0;
i514 =  (int64_t)0;
for (uint64_t i515 =  (int32_t)0; i515 <  (int32_t)1; i515++){
for (uint64_t i518 =  (int32_t)0; i518 <  (int32_t)256; i518++){
for (uint64_t i516 =  (int32_t)0; i516 <  (int32_t)64; i516++){
for (uint64_t i517 =  (int32_t)0; i517 <  (int32_t)64; i517++){
Arr4DIdxRowM(tmp276, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i515,i516,i517,i518) = Arr4DIdxRowM(tmp274, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i511,i512,i513,i514);
i514 = (i514 +  (int64_t)1);
if ((i514 ==  (int64_t)64)) {
i514 =  (int64_t)0;
i513 = (i513 +  (int64_t)1);
if ((i513 ==  (int64_t)64)) {
i513 =  (int64_t)0;
i512 = (i512 +  (int64_t)1);
if ((i512 ==  (int64_t)256)) {
i512 =  (int64_t)0;
i511 = (i511 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp274);

uint64_t* tmp278 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i526;

int64_t i525;

int64_t i524;

int64_t i523;

int64_t i522;

int64_t i521;

int64_t i520;

int64_t i519;
i519 =  (int64_t)0;
i520 =  (int64_t)0;
i521 =  (int64_t)0;
i522 =  (int64_t)0;
for (uint64_t i523 =  (int32_t)0; i523 <  (int32_t)1; i523++){
for (uint64_t i526 =  (int32_t)0; i526 <  (int32_t)256; i526++){
for (uint64_t i524 =  (int32_t)0; i524 <  (int32_t)64; i524++){
for (uint64_t i525 =  (int32_t)0; i525 <  (int32_t)64; i525++){
Arr4DIdxRowM(tmp278, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i523,i524,i525,i526) = Arr4DIdxRowM(tmp223, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i519,i520,i521,i522);
i522 = (i522 +  (int64_t)1);
if ((i522 ==  (int64_t)64)) {
i522 =  (int64_t)0;
i521 = (i521 +  (int64_t)1);
if ((i521 ==  (int64_t)64)) {
i521 =  (int64_t)0;
i520 = (i520 +  (int64_t)1);
if ((i520 ==  (int64_t)256)) {
i520 =  (int64_t)0;
i519 = (i519 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp223);
ScaleUp4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp278,  (int32_t)12);

uint64_t* tmp280 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)64; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)64; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp280, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp276, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp278, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp278);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp276);

uint64_t* tmp283 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i534;

int64_t i533;

int64_t i532;

int64_t i531;

int64_t i530;

int64_t i529;

int64_t i528;

int64_t i527;
i527 =  (int64_t)0;
i528 =  (int64_t)0;
i529 =  (int64_t)0;
i530 =  (int64_t)0;
for (uint64_t i531 =  (int32_t)0; i531 <  (int32_t)1; i531++){
for (uint64_t i533 =  (int32_t)0; i533 <  (int32_t)64; i533++){
for (uint64_t i534 =  (int32_t)0; i534 <  (int32_t)64; i534++){
for (uint64_t i532 =  (int32_t)0; i532 <  (int32_t)256; i532++){
Arr4DIdxRowM(tmp283, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i531,i532,i533,i534) = Arr4DIdxRowM(tmp280, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i527,i528,i529,i530);
i530 = (i530 +  (int64_t)1);
if ((i530 ==  (int64_t)256)) {
i530 =  (int64_t)0;
i529 = (i529 +  (int64_t)1);
if ((i529 ==  (int64_t)64)) {
i529 =  (int64_t)0;
i528 = (i528 +  (int64_t)1);
if ((i528 ==  (int64_t)64)) {
i528 =  (int64_t)0;
i527 = (i527 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp280);

uint64_t* tmp285 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i542;

int64_t i541;

int64_t i540;

int64_t i539;

int64_t i538;

int64_t i537;

int64_t i536;

int64_t i535;
i535 =  (int64_t)0;
i536 =  (int64_t)0;
i537 =  (int64_t)0;
i538 =  (int64_t)0;
for (uint64_t i539 =  (int32_t)0; i539 <  (int32_t)1; i539++){
for (uint64_t i542 =  (int32_t)0; i542 <  (int32_t)256; i542++){
for (uint64_t i540 =  (int32_t)0; i540 <  (int32_t)64; i540++){
for (uint64_t i541 =  (int32_t)0; i541 <  (int32_t)64; i541++){
Arr4DIdxRowM(tmp285, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i539,i540,i541,i542) = Arr4DIdxRowM(tmp283, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i535,i536,i537,i538);
i538 = (i538 +  (int64_t)1);
if ((i538 ==  (int64_t)64)) {
i538 =  (int64_t)0;
i537 = (i537 +  (int64_t)1);
if ((i537 ==  (int64_t)64)) {
i537 =  (int64_t)0;
i536 = (i536 +  (int64_t)1);
if ((i536 ==  (int64_t)256)) {
i536 =  (int64_t)0;
i535 = (i535 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp283);

uint64_t* tmp287 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp285, tmp287,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp285);

uint64_t* tmp289 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64);

int64_t i550;

int64_t i549;

int64_t i548;

int64_t i547;

int64_t i546;

int64_t i545;

int64_t i544;

int64_t i543;
i543 =  (int64_t)0;
i544 =  (int64_t)0;
i545 =  (int64_t)0;
i546 =  (int64_t)0;
for (uint64_t i547 =  (int32_t)0; i547 <  (int32_t)1; i547++){
for (uint64_t i549 =  (int32_t)0; i549 <  (int32_t)64; i549++){
for (uint64_t i550 =  (int32_t)0; i550 <  (int32_t)64; i550++){
for (uint64_t i548 =  (int32_t)0; i548 <  (int32_t)256; i548++){
Arr4DIdxRowM(tmp289, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i547,i548,i549,i550) = Arr4DIdxRowM(tmp287, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i543,i544,i545,i546);
i546 = (i546 +  (int64_t)1);
if ((i546 ==  (int64_t)256)) {
i546 =  (int64_t)0;
i545 = (i545 +  (int64_t)1);
if ((i545 ==  (int64_t)64)) {
i545 =  (int64_t)0;
i544 = (i544 +  (int64_t)1);
if ((i544 ==  (int64_t)64)) {
i544 =  (int64_t)0;
i543 = (i543 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp287);

uint64_t* tmp291 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i558;

int64_t i557;

int64_t i556;

int64_t i555;

int64_t i554;

int64_t i553;

int64_t i552;

int64_t i551;
i551 =  (int64_t)0;
i552 =  (int64_t)0;
i553 =  (int64_t)0;
i554 =  (int64_t)0;
for (uint64_t i555 =  (int32_t)0; i555 <  (int32_t)1; i555++){
for (uint64_t i558 =  (int32_t)0; i558 <  (int32_t)256; i558++){
for (uint64_t i556 =  (int32_t)0; i556 <  (int32_t)64; i556++){
for (uint64_t i557 =  (int32_t)0; i557 <  (int32_t)64; i557++){
Arr4DIdxRowM(tmp291, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i555,i556,i557,i558) = Arr4DIdxRowM(tmp289, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i551,i552,i553,i554);
i554 = (i554 +  (int64_t)1);
if ((i554 ==  (int64_t)64)) {
i554 =  (int64_t)0;
i553 = (i553 +  (int64_t)1);
if ((i553 ==  (int64_t)64)) {
i553 =  (int64_t)0;
i552 = (i552 +  (int64_t)1);
if ((i552 ==  (int64_t)256)) {
i552 =  (int64_t)0;
i551 = (i551 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp292 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);

int64_t i566;

int64_t i565;

int64_t i564;

int64_t i563;

int64_t i562;

int64_t i561;

int64_t i560;

int64_t i559;
i559 =  (int64_t)0;
i560 =  (int64_t)0;
i561 =  (int64_t)0;
i562 =  (int64_t)0;
for (uint64_t i566 =  (int32_t)0; i566 <  (int32_t)128; i566++){
for (uint64_t i565 =  (int32_t)0; i565 <  (int32_t)256; i565++){
for (uint64_t i563 =  (int32_t)0; i563 <  (int32_t)1; i563++){
for (uint64_t i564 =  (int32_t)0; i564 <  (int32_t)1; i564++){
Arr4DIdxRowM(tmp292, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)128,i563,i564,i565,i566) = Arr4DIdxRowM(tmp16, (int32_t)128, (int32_t)256, (int32_t)1, (int32_t)1,i559,i560,i561,i562);
i562 = (i562 +  (int64_t)1);
if ((i562 ==  (int64_t)1)) {
i562 =  (int64_t)0;
i561 = (i561 +  (int64_t)1);
if ((i561 ==  (int64_t)1)) {
i561 =  (int64_t)0;
i560 = (i560 +  (int64_t)1);
if ((i560 ==  (int64_t)256)) {
i560 =  (int64_t)0;
i559 = (i559 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp16);

uint64_t* tmp294 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp291, tmp292, tmp294);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp292);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp291);

uint64_t* tmp297 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i571;

int64_t i570;

int64_t i569;

int64_t i568;

int64_t i567;
i567 =  (int64_t)0;
for (uint64_t i568 =  (int32_t)0; i568 <  (int32_t)1; i568++){
for (uint64_t i569 =  (int32_t)0; i569 <  (int32_t)1; i569++){
for (uint64_t i570 =  (int32_t)0; i570 <  (int32_t)1; i570++){
for (uint64_t i571 =  (int32_t)0; i571 <  (int32_t)128; i571++){
Arr4DIdxRowM(tmp297, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i568,i569,i570,i571) = Arr1DIdxRowM(tmp17, (int32_t)128,i567);
i567 = (i567 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp297,  (int32_t)12);

uint64_t* tmp298 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp298, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp294, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp297, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp294);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp297);

uint64_t* tmp301 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i579;

int64_t i578;

int64_t i577;

int64_t i576;

int64_t i575;

int64_t i574;

int64_t i573;

int64_t i572;
i572 =  (int64_t)0;
i573 =  (int64_t)0;
i574 =  (int64_t)0;
i575 =  (int64_t)0;
for (uint64_t i576 =  (int32_t)0; i576 <  (int32_t)1; i576++){
for (uint64_t i578 =  (int32_t)0; i578 <  (int32_t)32; i578++){
for (uint64_t i579 =  (int32_t)0; i579 <  (int32_t)32; i579++){
for (uint64_t i577 =  (int32_t)0; i577 <  (int32_t)128; i577++){
Arr4DIdxRowM(tmp301, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i576,i577,i578,i579) = Arr4DIdxRowM(tmp298, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i572,i573,i574,i575);
i575 = (i575 +  (int64_t)1);
if ((i575 ==  (int64_t)128)) {
i575 =  (int64_t)0;
i574 = (i574 +  (int64_t)1);
if ((i574 ==  (int64_t)32)) {
i574 =  (int64_t)0;
i573 = (i573 +  (int64_t)1);
if ((i573 ==  (int64_t)32)) {
i573 =  (int64_t)0;
i572 = (i572 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp298);

uint64_t* tmp303 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i587;

int64_t i586;

int64_t i585;

int64_t i584;

int64_t i583;

int64_t i582;

int64_t i581;

int64_t i580;
i580 =  (int64_t)0;
i581 =  (int64_t)0;
i582 =  (int64_t)0;
i583 =  (int64_t)0;
for (uint64_t i584 =  (int32_t)0; i584 <  (int32_t)1; i584++){
for (uint64_t i587 =  (int32_t)0; i587 <  (int32_t)128; i587++){
for (uint64_t i585 =  (int32_t)0; i585 <  (int32_t)32; i585++){
for (uint64_t i586 =  (int32_t)0; i586 <  (int32_t)32; i586++){
Arr4DIdxRowM(tmp303, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i584,i585,i586,i587) = Arr4DIdxRowM(tmp301, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i580,i581,i582,i583);
i583 = (i583 +  (int64_t)1);
if ((i583 ==  (int64_t)32)) {
i583 =  (int64_t)0;
i582 = (i582 +  (int64_t)1);
if ((i582 ==  (int64_t)32)) {
i582 =  (int64_t)0;
i581 = (i581 +  (int64_t)1);
if ((i581 ==  (int64_t)128)) {
i581 =  (int64_t)0;
i580 = (i580 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp301);

uint64_t* tmp305 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp303, tmp305,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp303);

uint64_t* tmp307 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i595;

int64_t i594;

int64_t i593;

int64_t i592;

int64_t i591;

int64_t i590;

int64_t i589;

int64_t i588;
i588 =  (int64_t)0;
i589 =  (int64_t)0;
i590 =  (int64_t)0;
i591 =  (int64_t)0;
for (uint64_t i592 =  (int32_t)0; i592 <  (int32_t)1; i592++){
for (uint64_t i594 =  (int32_t)0; i594 <  (int32_t)32; i594++){
for (uint64_t i595 =  (int32_t)0; i595 <  (int32_t)32; i595++){
for (uint64_t i593 =  (int32_t)0; i593 <  (int32_t)128; i593++){
Arr4DIdxRowM(tmp307, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i592,i593,i594,i595) = Arr4DIdxRowM(tmp305, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i588,i589,i590,i591);
i591 = (i591 +  (int64_t)1);
if ((i591 ==  (int64_t)128)) {
i591 =  (int64_t)0;
i590 = (i590 +  (int64_t)1);
if ((i590 ==  (int64_t)32)) {
i590 =  (int64_t)0;
i589 = (i589 +  (int64_t)1);
if ((i589 ==  (int64_t)32)) {
i589 =  (int64_t)0;
i588 = (i588 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp305);

uint64_t* tmp309 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i603;

int64_t i602;

int64_t i601;

int64_t i600;

int64_t i599;

int64_t i598;

int64_t i597;

int64_t i596;
i596 =  (int64_t)0;
i597 =  (int64_t)0;
i598 =  (int64_t)0;
i599 =  (int64_t)0;
for (uint64_t i600 =  (int32_t)0; i600 <  (int32_t)1; i600++){
for (uint64_t i603 =  (int32_t)0; i603 <  (int32_t)128; i603++){
for (uint64_t i601 =  (int32_t)0; i601 <  (int32_t)32; i601++){
for (uint64_t i602 =  (int32_t)0; i602 <  (int32_t)32; i602++){
Arr4DIdxRowM(tmp309, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i600,i601,i602,i603) = Arr4DIdxRowM(tmp307, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i596,i597,i598,i599);
i599 = (i599 +  (int64_t)1);
if ((i599 ==  (int64_t)32)) {
i599 =  (int64_t)0;
i598 = (i598 +  (int64_t)1);
if ((i598 ==  (int64_t)32)) {
i598 =  (int64_t)0;
i597 = (i597 +  (int64_t)1);
if ((i597 ==  (int64_t)128)) {
i597 =  (int64_t)0;
i596 = (i596 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp307);

uint64_t* tmp311 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);

int64_t i611;

int64_t i610;

int64_t i609;

int64_t i608;

int64_t i607;

int64_t i606;

int64_t i605;

int64_t i604;
i604 =  (int64_t)0;
i605 =  (int64_t)0;
i606 =  (int64_t)0;
i607 =  (int64_t)0;
for (uint64_t i611 =  (int32_t)0; i611 <  (int32_t)128; i611++){
for (uint64_t i610 =  (int32_t)0; i610 <  (int32_t)128; i610++){
for (uint64_t i608 =  (int32_t)0; i608 <  (int32_t)3; i608++){
for (uint64_t i609 =  (int32_t)0; i609 <  (int32_t)3; i609++){
Arr4DIdxRowM(tmp311, (int32_t)3, (int32_t)3, (int32_t)128, (int32_t)128,i608,i609,i610,i611) = Arr4DIdxRowM(tmp18, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i604,i605,i606,i607);
i607 = (i607 +  (int64_t)1);
if ((i607 ==  (int64_t)3)) {
i607 =  (int64_t)0;
i606 = (i606 +  (int64_t)1);
if ((i606 ==  (int64_t)3)) {
i606 =  (int64_t)0;
i605 = (i605 +  (int64_t)1);
if ((i605 ==  (int64_t)128)) {
i605 =  (int64_t)0;
i604 = (i604 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3, tmp18);

uint64_t* tmp313 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp309, tmp311, tmp313);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp311);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp309);

uint64_t* tmp316 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i616;

int64_t i615;

int64_t i614;

int64_t i613;

int64_t i612;
i612 =  (int64_t)0;
for (uint64_t i613 =  (int32_t)0; i613 <  (int32_t)1; i613++){
for (uint64_t i614 =  (int32_t)0; i614 <  (int32_t)1; i614++){
for (uint64_t i615 =  (int32_t)0; i615 <  (int32_t)1; i615++){
for (uint64_t i616 =  (int32_t)0; i616 <  (int32_t)128; i616++){
Arr4DIdxRowM(tmp316, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i613,i614,i615,i616) = Arr1DIdxRowM(tmp17, (int32_t)128,i612);
i612 = (i612 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp316,  (int32_t)12);

uint64_t* tmp317 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp317, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp313, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp316, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp313);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp316);

uint64_t* tmp320 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i624;

int64_t i623;

int64_t i622;

int64_t i621;

int64_t i620;

int64_t i619;

int64_t i618;

int64_t i617;
i617 =  (int64_t)0;
i618 =  (int64_t)0;
i619 =  (int64_t)0;
i620 =  (int64_t)0;
for (uint64_t i621 =  (int32_t)0; i621 <  (int32_t)1; i621++){
for (uint64_t i623 =  (int32_t)0; i623 <  (int32_t)32; i623++){
for (uint64_t i624 =  (int32_t)0; i624 <  (int32_t)32; i624++){
for (uint64_t i622 =  (int32_t)0; i622 <  (int32_t)128; i622++){
Arr4DIdxRowM(tmp320, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i621,i622,i623,i624) = Arr4DIdxRowM(tmp317, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i617,i618,i619,i620);
i620 = (i620 +  (int64_t)1);
if ((i620 ==  (int64_t)128)) {
i620 =  (int64_t)0;
i619 = (i619 +  (int64_t)1);
if ((i619 ==  (int64_t)32)) {
i619 =  (int64_t)0;
i618 = (i618 +  (int64_t)1);
if ((i618 ==  (int64_t)32)) {
i618 =  (int64_t)0;
i617 = (i617 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp317);

uint64_t* tmp322 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i632;

int64_t i631;

int64_t i630;

int64_t i629;

int64_t i628;

int64_t i627;

int64_t i626;

int64_t i625;
i625 =  (int64_t)0;
i626 =  (int64_t)0;
i627 =  (int64_t)0;
i628 =  (int64_t)0;
for (uint64_t i629 =  (int32_t)0; i629 <  (int32_t)1; i629++){
for (uint64_t i632 =  (int32_t)0; i632 <  (int32_t)128; i632++){
for (uint64_t i630 =  (int32_t)0; i630 <  (int32_t)32; i630++){
for (uint64_t i631 =  (int32_t)0; i631 <  (int32_t)32; i631++){
Arr4DIdxRowM(tmp322, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i629,i630,i631,i632) = Arr4DIdxRowM(tmp320, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i625,i626,i627,i628);
i628 = (i628 +  (int64_t)1);
if ((i628 ==  (int64_t)32)) {
i628 =  (int64_t)0;
i627 = (i627 +  (int64_t)1);
if ((i627 ==  (int64_t)32)) {
i627 =  (int64_t)0;
i626 = (i626 +  (int64_t)1);
if ((i626 ==  (int64_t)128)) {
i626 =  (int64_t)0;
i625 = (i625 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp320);

uint64_t* tmp324 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp322, tmp324,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp322);

uint64_t* tmp326 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i640;

int64_t i639;

int64_t i638;

int64_t i637;

int64_t i636;

int64_t i635;

int64_t i634;

int64_t i633;
i633 =  (int64_t)0;
i634 =  (int64_t)0;
i635 =  (int64_t)0;
i636 =  (int64_t)0;
for (uint64_t i637 =  (int32_t)0; i637 <  (int32_t)1; i637++){
for (uint64_t i639 =  (int32_t)0; i639 <  (int32_t)32; i639++){
for (uint64_t i640 =  (int32_t)0; i640 <  (int32_t)32; i640++){
for (uint64_t i638 =  (int32_t)0; i638 <  (int32_t)128; i638++){
Arr4DIdxRowM(tmp326, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i637,i638,i639,i640) = Arr4DIdxRowM(tmp324, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i633,i634,i635,i636);
i636 = (i636 +  (int64_t)1);
if ((i636 ==  (int64_t)128)) {
i636 =  (int64_t)0;
i635 = (i635 +  (int64_t)1);
if ((i635 ==  (int64_t)32)) {
i635 =  (int64_t)0;
i634 = (i634 +  (int64_t)1);
if ((i634 ==  (int64_t)32)) {
i634 =  (int64_t)0;
i633 = (i633 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp324);

uint64_t* tmp328 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i648;

int64_t i647;

int64_t i646;

int64_t i645;

int64_t i644;

int64_t i643;

int64_t i642;

int64_t i641;
i641 =  (int64_t)0;
i642 =  (int64_t)0;
i643 =  (int64_t)0;
i644 =  (int64_t)0;
for (uint64_t i645 =  (int32_t)0; i645 <  (int32_t)1; i645++){
for (uint64_t i648 =  (int32_t)0; i648 <  (int32_t)128; i648++){
for (uint64_t i646 =  (int32_t)0; i646 <  (int32_t)32; i646++){
for (uint64_t i647 =  (int32_t)0; i647 <  (int32_t)32; i647++){
Arr4DIdxRowM(tmp328, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i645,i646,i647,i648) = Arr4DIdxRowM(tmp326, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i641,i642,i643,i644);
i644 = (i644 +  (int64_t)1);
if ((i644 ==  (int64_t)32)) {
i644 =  (int64_t)0;
i643 = (i643 +  (int64_t)1);
if ((i643 ==  (int64_t)32)) {
i643 =  (int64_t)0;
i642 = (i642 +  (int64_t)1);
if ((i642 ==  (int64_t)128)) {
i642 =  (int64_t)0;
i641 = (i641 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp326);

uint64_t* tmp330 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);

int64_t i656;

int64_t i655;

int64_t i654;

int64_t i653;

int64_t i652;

int64_t i651;

int64_t i650;

int64_t i649;
i649 =  (int64_t)0;
i650 =  (int64_t)0;
i651 =  (int64_t)0;
i652 =  (int64_t)0;
for (uint64_t i656 =  (int32_t)0; i656 <  (int32_t)512; i656++){
for (uint64_t i655 =  (int32_t)0; i655 <  (int32_t)128; i655++){
for (uint64_t i653 =  (int32_t)0; i653 <  (int32_t)1; i653++){
for (uint64_t i654 =  (int32_t)0; i654 <  (int32_t)1; i654++){
Arr4DIdxRowM(tmp330, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)512,i653,i654,i655,i656) = Arr4DIdxRowM(tmp19, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i649,i650,i651,i652);
i652 = (i652 +  (int64_t)1);
if ((i652 ==  (int64_t)1)) {
i652 =  (int64_t)0;
i651 = (i651 +  (int64_t)1);
if ((i651 ==  (int64_t)1)) {
i651 =  (int64_t)0;
i650 = (i650 +  (int64_t)1);
if ((i650 ==  (int64_t)128)) {
i650 =  (int64_t)0;
i649 = (i649 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1, tmp19);

uint64_t* tmp332 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp328, tmp330, tmp332);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp328);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp330);

uint64_t* tmp335 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i661;

int64_t i660;

int64_t i659;

int64_t i658;

int64_t i657;
i657 =  (int64_t)0;
for (uint64_t i658 =  (int32_t)0; i658 <  (int32_t)1; i658++){
for (uint64_t i659 =  (int32_t)0; i659 <  (int32_t)1; i659++){
for (uint64_t i660 =  (int32_t)0; i660 <  (int32_t)1; i660++){
for (uint64_t i661 =  (int32_t)0; i661 <  (int32_t)512; i661++){
Arr4DIdxRowM(tmp335, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i658,i659,i660,i661) = Arr1DIdxRowM(tmp20, (int32_t)512,i657);
i657 = (i657 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp335,  (int32_t)12);

uint64_t* tmp336 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp336, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp332, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp335, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp335);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp332);

uint64_t* tmp339 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i669;

int64_t i668;

int64_t i667;

int64_t i666;

int64_t i665;

int64_t i664;

int64_t i663;

int64_t i662;
i662 =  (int64_t)0;
i663 =  (int64_t)0;
i664 =  (int64_t)0;
i665 =  (int64_t)0;
for (uint64_t i666 =  (int32_t)0; i666 <  (int32_t)1; i666++){
for (uint64_t i668 =  (int32_t)0; i668 <  (int32_t)32; i668++){
for (uint64_t i669 =  (int32_t)0; i669 <  (int32_t)32; i669++){
for (uint64_t i667 =  (int32_t)0; i667 <  (int32_t)512; i667++){
Arr4DIdxRowM(tmp339, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i666,i667,i668,i669) = Arr4DIdxRowM(tmp336, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i662,i663,i664,i665);
i665 = (i665 +  (int64_t)1);
if ((i665 ==  (int64_t)512)) {
i665 =  (int64_t)0;
i664 = (i664 +  (int64_t)1);
if ((i664 ==  (int64_t)32)) {
i664 =  (int64_t)0;
i663 = (i663 +  (int64_t)1);
if ((i663 ==  (int64_t)32)) {
i663 =  (int64_t)0;
i662 = (i662 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp336);

uint64_t* tmp341 = make_array<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256);

int64_t i677;

int64_t i676;

int64_t i675;

int64_t i674;

int64_t i673;

int64_t i672;

int64_t i671;

int64_t i670;
i670 =  (int64_t)0;
i671 =  (int64_t)0;
i672 =  (int64_t)0;
i673 =  (int64_t)0;
for (uint64_t i674 =  (int32_t)0; i674 <  (int32_t)1; i674++){
for (uint64_t i677 =  (int32_t)0; i677 <  (int32_t)256; i677++){
for (uint64_t i675 =  (int32_t)0; i675 <  (int32_t)64; i675++){
for (uint64_t i676 =  (int32_t)0; i676 <  (int32_t)64; i676++){
Arr4DIdxRowM(tmp341, (int32_t)1, (int32_t)64, (int32_t)64, (int32_t)256,i674,i675,i676,i677) = Arr4DIdxRowM(tmp289, (int32_t)1, (int32_t)256, (int32_t)64, (int32_t)64,i670,i671,i672,i673);
i673 = (i673 +  (int64_t)1);
if ((i673 ==  (int64_t)64)) {
i673 =  (int64_t)0;
i672 = (i672 +  (int64_t)1);
if ((i672 ==  (int64_t)64)) {
i672 =  (int64_t)0;
i671 = (i671 +  (int64_t)1);
if ((i671 ==  (int64_t)256)) {
i671 =  (int64_t)0;
i670 = (i670 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)64,  (int32_t)64, tmp289);

uint64_t* tmp343 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)512);

int64_t i685;

int64_t i684;

int64_t i683;

int64_t i682;

int64_t i681;

int64_t i680;

int64_t i679;

int64_t i678;
i678 =  (int64_t)0;
i679 =  (int64_t)0;
i680 =  (int64_t)0;
i681 =  (int64_t)0;
for (uint64_t i685 =  (int32_t)0; i685 <  (int32_t)512; i685++){
for (uint64_t i684 =  (int32_t)0; i684 <  (int32_t)256; i684++){
for (uint64_t i682 =  (int32_t)0; i682 <  (int32_t)1; i682++){
for (uint64_t i683 =  (int32_t)0; i683 <  (int32_t)1; i683++){
Arr4DIdxRowM(tmp343, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)512,i682,i683,i684,i685) = Arr4DIdxRowM(tmp21, (int32_t)512, (int32_t)256, (int32_t)1, (int32_t)1,i678,i679,i680,i681);
i681 = (i681 +  (int64_t)1);
if ((i681 ==  (int64_t)1)) {
i681 =  (int64_t)0;
i680 = (i680 +  (int64_t)1);
if ((i680 ==  (int64_t)1)) {
i680 =  (int64_t)0;
i679 = (i679 +  (int64_t)1);
if ((i679 ==  (int64_t)256)) {
i679 =  (int64_t)0;
i678 = (i678 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp21);

uint64_t* tmp345 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp341, tmp343, tmp345);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)512, tmp343);
ClearMemSecret4( (int32_t)1,  (int32_t)64,  (int32_t)64,  (int32_t)256, tmp341);

uint64_t* tmp348 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i690;

int64_t i689;

int64_t i688;

int64_t i687;

int64_t i686;
i686 =  (int64_t)0;
for (uint64_t i687 =  (int32_t)0; i687 <  (int32_t)1; i687++){
for (uint64_t i688 =  (int32_t)0; i688 <  (int32_t)1; i688++){
for (uint64_t i689 =  (int32_t)0; i689 <  (int32_t)1; i689++){
for (uint64_t i690 =  (int32_t)0; i690 <  (int32_t)512; i690++){
Arr4DIdxRowM(tmp348, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i687,i688,i689,i690) = Arr1DIdxRowM(tmp20, (int32_t)512,i686);
i686 = (i686 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp348,  (int32_t)12);

uint64_t* tmp349 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp349, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp345, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp348, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp348);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp345);

uint64_t* tmp352 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i698;

int64_t i697;

int64_t i696;

int64_t i695;

int64_t i694;

int64_t i693;

int64_t i692;

int64_t i691;
i691 =  (int64_t)0;
i692 =  (int64_t)0;
i693 =  (int64_t)0;
i694 =  (int64_t)0;
for (uint64_t i695 =  (int32_t)0; i695 <  (int32_t)1; i695++){
for (uint64_t i697 =  (int32_t)0; i697 <  (int32_t)32; i697++){
for (uint64_t i698 =  (int32_t)0; i698 <  (int32_t)32; i698++){
for (uint64_t i696 =  (int32_t)0; i696 <  (int32_t)512; i696++){
Arr4DIdxRowM(tmp352, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i695,i696,i697,i698) = Arr4DIdxRowM(tmp349, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i691,i692,i693,i694);
i694 = (i694 +  (int64_t)1);
if ((i694 ==  (int64_t)512)) {
i694 =  (int64_t)0;
i693 = (i693 +  (int64_t)1);
if ((i693 ==  (int64_t)32)) {
i693 =  (int64_t)0;
i692 = (i692 +  (int64_t)1);
if ((i692 ==  (int64_t)32)) {
i692 =  (int64_t)0;
i691 = (i691 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp349);

uint64_t* tmp354 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i706;

int64_t i705;

int64_t i704;

int64_t i703;

int64_t i702;

int64_t i701;

int64_t i700;

int64_t i699;
i699 =  (int64_t)0;
i700 =  (int64_t)0;
i701 =  (int64_t)0;
i702 =  (int64_t)0;
for (uint64_t i703 =  (int32_t)0; i703 <  (int32_t)1; i703++){
for (uint64_t i706 =  (int32_t)0; i706 <  (int32_t)512; i706++){
for (uint64_t i704 =  (int32_t)0; i704 <  (int32_t)32; i704++){
for (uint64_t i705 =  (int32_t)0; i705 <  (int32_t)32; i705++){
Arr4DIdxRowM(tmp354, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i703,i704,i705,i706) = Arr4DIdxRowM(tmp339, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i699,i700,i701,i702);
i702 = (i702 +  (int64_t)1);
if ((i702 ==  (int64_t)32)) {
i702 =  (int64_t)0;
i701 = (i701 +  (int64_t)1);
if ((i701 ==  (int64_t)32)) {
i701 =  (int64_t)0;
i700 = (i700 +  (int64_t)1);
if ((i700 ==  (int64_t)512)) {
i700 =  (int64_t)0;
i699 = (i699 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp339);

uint64_t* tmp356 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i714;

int64_t i713;

int64_t i712;

int64_t i711;

int64_t i710;

int64_t i709;

int64_t i708;

int64_t i707;
i707 =  (int64_t)0;
i708 =  (int64_t)0;
i709 =  (int64_t)0;
i710 =  (int64_t)0;
for (uint64_t i711 =  (int32_t)0; i711 <  (int32_t)1; i711++){
for (uint64_t i714 =  (int32_t)0; i714 <  (int32_t)512; i714++){
for (uint64_t i712 =  (int32_t)0; i712 <  (int32_t)32; i712++){
for (uint64_t i713 =  (int32_t)0; i713 <  (int32_t)32; i713++){
Arr4DIdxRowM(tmp356, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i711,i712,i713,i714) = Arr4DIdxRowM(tmp352, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i707,i708,i709,i710);
i710 = (i710 +  (int64_t)1);
if ((i710 ==  (int64_t)32)) {
i710 =  (int64_t)0;
i709 = (i709 +  (int64_t)1);
if ((i709 ==  (int64_t)32)) {
i709 =  (int64_t)0;
i708 = (i708 +  (int64_t)1);
if ((i708 ==  (int64_t)512)) {
i708 =  (int64_t)0;
i707 = (i707 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp352);

uint64_t* tmp358 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp358, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp354, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp356, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp354);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp356);

uint64_t* tmp361 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i722;

int64_t i721;

int64_t i720;

int64_t i719;

int64_t i718;

int64_t i717;

int64_t i716;

int64_t i715;
i715 =  (int64_t)0;
i716 =  (int64_t)0;
i717 =  (int64_t)0;
i718 =  (int64_t)0;
for (uint64_t i719 =  (int32_t)0; i719 <  (int32_t)1; i719++){
for (uint64_t i721 =  (int32_t)0; i721 <  (int32_t)32; i721++){
for (uint64_t i722 =  (int32_t)0; i722 <  (int32_t)32; i722++){
for (uint64_t i720 =  (int32_t)0; i720 <  (int32_t)512; i720++){
Arr4DIdxRowM(tmp361, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i719,i720,i721,i722) = Arr4DIdxRowM(tmp358, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i715,i716,i717,i718);
i718 = (i718 +  (int64_t)1);
if ((i718 ==  (int64_t)512)) {
i718 =  (int64_t)0;
i717 = (i717 +  (int64_t)1);
if ((i717 ==  (int64_t)32)) {
i717 =  (int64_t)0;
i716 = (i716 +  (int64_t)1);
if ((i716 ==  (int64_t)32)) {
i716 =  (int64_t)0;
i715 = (i715 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp358);

uint64_t* tmp363 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i730;

int64_t i729;

int64_t i728;

int64_t i727;

int64_t i726;

int64_t i725;

int64_t i724;

int64_t i723;
i723 =  (int64_t)0;
i724 =  (int64_t)0;
i725 =  (int64_t)0;
i726 =  (int64_t)0;
for (uint64_t i727 =  (int32_t)0; i727 <  (int32_t)1; i727++){
for (uint64_t i730 =  (int32_t)0; i730 <  (int32_t)512; i730++){
for (uint64_t i728 =  (int32_t)0; i728 <  (int32_t)32; i728++){
for (uint64_t i729 =  (int32_t)0; i729 <  (int32_t)32; i729++){
Arr4DIdxRowM(tmp363, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i727,i728,i729,i730) = Arr4DIdxRowM(tmp361, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i723,i724,i725,i726);
i726 = (i726 +  (int64_t)1);
if ((i726 ==  (int64_t)32)) {
i726 =  (int64_t)0;
i725 = (i725 +  (int64_t)1);
if ((i725 ==  (int64_t)32)) {
i725 =  (int64_t)0;
i724 = (i724 +  (int64_t)1);
if ((i724 ==  (int64_t)512)) {
i724 =  (int64_t)0;
i723 = (i723 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp361);

uint64_t* tmp365 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp363, tmp365,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp363);

uint64_t* tmp367 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i738;

int64_t i737;

int64_t i736;

int64_t i735;

int64_t i734;

int64_t i733;

int64_t i732;

int64_t i731;
i731 =  (int64_t)0;
i732 =  (int64_t)0;
i733 =  (int64_t)0;
i734 =  (int64_t)0;
for (uint64_t i735 =  (int32_t)0; i735 <  (int32_t)1; i735++){
for (uint64_t i737 =  (int32_t)0; i737 <  (int32_t)32; i737++){
for (uint64_t i738 =  (int32_t)0; i738 <  (int32_t)32; i738++){
for (uint64_t i736 =  (int32_t)0; i736 <  (int32_t)512; i736++){
Arr4DIdxRowM(tmp367, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i735,i736,i737,i738) = Arr4DIdxRowM(tmp365, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i731,i732,i733,i734);
i734 = (i734 +  (int64_t)1);
if ((i734 ==  (int64_t)512)) {
i734 =  (int64_t)0;
i733 = (i733 +  (int64_t)1);
if ((i733 ==  (int64_t)32)) {
i733 =  (int64_t)0;
i732 = (i732 +  (int64_t)1);
if ((i732 ==  (int64_t)32)) {
i732 =  (int64_t)0;
i731 = (i731 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp365);

uint64_t* tmp369 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i746;

int64_t i745;

int64_t i744;

int64_t i743;

int64_t i742;

int64_t i741;

int64_t i740;

int64_t i739;
i739 =  (int64_t)0;
i740 =  (int64_t)0;
i741 =  (int64_t)0;
i742 =  (int64_t)0;
for (uint64_t i743 =  (int32_t)0; i743 <  (int32_t)1; i743++){
for (uint64_t i746 =  (int32_t)0; i746 <  (int32_t)512; i746++){
for (uint64_t i744 =  (int32_t)0; i744 <  (int32_t)32; i744++){
for (uint64_t i745 =  (int32_t)0; i745 <  (int32_t)32; i745++){
Arr4DIdxRowM(tmp369, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i743,i744,i745,i746) = Arr4DIdxRowM(tmp367, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i739,i740,i741,i742);
i742 = (i742 +  (int64_t)1);
if ((i742 ==  (int64_t)32)) {
i742 =  (int64_t)0;
i741 = (i741 +  (int64_t)1);
if ((i741 ==  (int64_t)32)) {
i741 =  (int64_t)0;
i740 = (i740 +  (int64_t)1);
if ((i740 ==  (int64_t)512)) {
i740 =  (int64_t)0;
i739 = (i739 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp370 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);

int64_t i754;

int64_t i753;

int64_t i752;

int64_t i751;

int64_t i750;

int64_t i749;

int64_t i748;

int64_t i747;
i747 =  (int64_t)0;
i748 =  (int64_t)0;
i749 =  (int64_t)0;
i750 =  (int64_t)0;
for (uint64_t i754 =  (int32_t)0; i754 <  (int32_t)128; i754++){
for (uint64_t i753 =  (int32_t)0; i753 <  (int32_t)512; i753++){
for (uint64_t i751 =  (int32_t)0; i751 <  (int32_t)1; i751++){
for (uint64_t i752 =  (int32_t)0; i752 <  (int32_t)1; i752++){
Arr4DIdxRowM(tmp370, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)128,i751,i752,i753,i754) = Arr4DIdxRowM(tmp22, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i747,i748,i749,i750);
i750 = (i750 +  (int64_t)1);
if ((i750 ==  (int64_t)1)) {
i750 =  (int64_t)0;
i749 = (i749 +  (int64_t)1);
if ((i749 ==  (int64_t)1)) {
i749 =  (int64_t)0;
i748 = (i748 +  (int64_t)1);
if ((i748 ==  (int64_t)512)) {
i748 =  (int64_t)0;
i747 = (i747 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp22);

uint64_t* tmp372 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp369, tmp370, tmp372);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp370);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp369);

uint64_t* tmp375 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i759;

int64_t i758;

int64_t i757;

int64_t i756;

int64_t i755;
i755 =  (int64_t)0;
for (uint64_t i756 =  (int32_t)0; i756 <  (int32_t)1; i756++){
for (uint64_t i757 =  (int32_t)0; i757 <  (int32_t)1; i757++){
for (uint64_t i758 =  (int32_t)0; i758 <  (int32_t)1; i758++){
for (uint64_t i759 =  (int32_t)0; i759 <  (int32_t)128; i759++){
Arr4DIdxRowM(tmp375, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i756,i757,i758,i759) = Arr1DIdxRowM(tmp17, (int32_t)128,i755);
i755 = (i755 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp375,  (int32_t)12);

uint64_t* tmp376 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp376, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp372, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp375, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp372);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp375);

uint64_t* tmp379 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i767;

int64_t i766;

int64_t i765;

int64_t i764;

int64_t i763;

int64_t i762;

int64_t i761;

int64_t i760;
i760 =  (int64_t)0;
i761 =  (int64_t)0;
i762 =  (int64_t)0;
i763 =  (int64_t)0;
for (uint64_t i764 =  (int32_t)0; i764 <  (int32_t)1; i764++){
for (uint64_t i766 =  (int32_t)0; i766 <  (int32_t)32; i766++){
for (uint64_t i767 =  (int32_t)0; i767 <  (int32_t)32; i767++){
for (uint64_t i765 =  (int32_t)0; i765 <  (int32_t)128; i765++){
Arr4DIdxRowM(tmp379, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i764,i765,i766,i767) = Arr4DIdxRowM(tmp376, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i760,i761,i762,i763);
i763 = (i763 +  (int64_t)1);
if ((i763 ==  (int64_t)128)) {
i763 =  (int64_t)0;
i762 = (i762 +  (int64_t)1);
if ((i762 ==  (int64_t)32)) {
i762 =  (int64_t)0;
i761 = (i761 +  (int64_t)1);
if ((i761 ==  (int64_t)32)) {
i761 =  (int64_t)0;
i760 = (i760 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp376);

uint64_t* tmp381 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i775;

int64_t i774;

int64_t i773;

int64_t i772;

int64_t i771;

int64_t i770;

int64_t i769;

int64_t i768;
i768 =  (int64_t)0;
i769 =  (int64_t)0;
i770 =  (int64_t)0;
i771 =  (int64_t)0;
for (uint64_t i772 =  (int32_t)0; i772 <  (int32_t)1; i772++){
for (uint64_t i775 =  (int32_t)0; i775 <  (int32_t)128; i775++){
for (uint64_t i773 =  (int32_t)0; i773 <  (int32_t)32; i773++){
for (uint64_t i774 =  (int32_t)0; i774 <  (int32_t)32; i774++){
Arr4DIdxRowM(tmp381, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i772,i773,i774,i775) = Arr4DIdxRowM(tmp379, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i768,i769,i770,i771);
i771 = (i771 +  (int64_t)1);
if ((i771 ==  (int64_t)32)) {
i771 =  (int64_t)0;
i770 = (i770 +  (int64_t)1);
if ((i770 ==  (int64_t)32)) {
i770 =  (int64_t)0;
i769 = (i769 +  (int64_t)1);
if ((i769 ==  (int64_t)128)) {
i769 =  (int64_t)0;
i768 = (i768 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp379);

uint64_t* tmp383 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp381, tmp383,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp381);

uint64_t* tmp385 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i783;

int64_t i782;

int64_t i781;

int64_t i780;

int64_t i779;

int64_t i778;

int64_t i777;

int64_t i776;
i776 =  (int64_t)0;
i777 =  (int64_t)0;
i778 =  (int64_t)0;
i779 =  (int64_t)0;
for (uint64_t i780 =  (int32_t)0; i780 <  (int32_t)1; i780++){
for (uint64_t i782 =  (int32_t)0; i782 <  (int32_t)32; i782++){
for (uint64_t i783 =  (int32_t)0; i783 <  (int32_t)32; i783++){
for (uint64_t i781 =  (int32_t)0; i781 <  (int32_t)128; i781++){
Arr4DIdxRowM(tmp385, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i780,i781,i782,i783) = Arr4DIdxRowM(tmp383, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i776,i777,i778,i779);
i779 = (i779 +  (int64_t)1);
if ((i779 ==  (int64_t)128)) {
i779 =  (int64_t)0;
i778 = (i778 +  (int64_t)1);
if ((i778 ==  (int64_t)32)) {
i778 =  (int64_t)0;
i777 = (i777 +  (int64_t)1);
if ((i777 ==  (int64_t)32)) {
i777 =  (int64_t)0;
i776 = (i776 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp383);

uint64_t* tmp387 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i791;

int64_t i790;

int64_t i789;

int64_t i788;

int64_t i787;

int64_t i786;

int64_t i785;

int64_t i784;
i784 =  (int64_t)0;
i785 =  (int64_t)0;
i786 =  (int64_t)0;
i787 =  (int64_t)0;
for (uint64_t i788 =  (int32_t)0; i788 <  (int32_t)1; i788++){
for (uint64_t i791 =  (int32_t)0; i791 <  (int32_t)128; i791++){
for (uint64_t i789 =  (int32_t)0; i789 <  (int32_t)32; i789++){
for (uint64_t i790 =  (int32_t)0; i790 <  (int32_t)32; i790++){
Arr4DIdxRowM(tmp387, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i788,i789,i790,i791) = Arr4DIdxRowM(tmp385, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i784,i785,i786,i787);
i787 = (i787 +  (int64_t)1);
if ((i787 ==  (int64_t)32)) {
i787 =  (int64_t)0;
i786 = (i786 +  (int64_t)1);
if ((i786 ==  (int64_t)32)) {
i786 =  (int64_t)0;
i785 = (i785 +  (int64_t)1);
if ((i785 ==  (int64_t)128)) {
i785 =  (int64_t)0;
i784 = (i784 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp385);

uint64_t* tmp389 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);

int64_t i799;

int64_t i798;

int64_t i797;

int64_t i796;

int64_t i795;

int64_t i794;

int64_t i793;

int64_t i792;
i792 =  (int64_t)0;
i793 =  (int64_t)0;
i794 =  (int64_t)0;
i795 =  (int64_t)0;
for (uint64_t i799 =  (int32_t)0; i799 <  (int32_t)128; i799++){
for (uint64_t i798 =  (int32_t)0; i798 <  (int32_t)128; i798++){
for (uint64_t i796 =  (int32_t)0; i796 <  (int32_t)3; i796++){
for (uint64_t i797 =  (int32_t)0; i797 <  (int32_t)3; i797++){
Arr4DIdxRowM(tmp389, (int32_t)3, (int32_t)3, (int32_t)128, (int32_t)128,i796,i797,i798,i799) = Arr4DIdxRowM(tmp23, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i792,i793,i794,i795);
i795 = (i795 +  (int64_t)1);
if ((i795 ==  (int64_t)3)) {
i795 =  (int64_t)0;
i794 = (i794 +  (int64_t)1);
if ((i794 ==  (int64_t)3)) {
i794 =  (int64_t)0;
i793 = (i793 +  (int64_t)1);
if ((i793 ==  (int64_t)128)) {
i793 =  (int64_t)0;
i792 = (i792 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3, tmp23);

uint64_t* tmp391 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp387, tmp389, tmp391);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp387);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp389);

uint64_t* tmp394 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i804;

int64_t i803;

int64_t i802;

int64_t i801;

int64_t i800;
i800 =  (int64_t)0;
for (uint64_t i801 =  (int32_t)0; i801 <  (int32_t)1; i801++){
for (uint64_t i802 =  (int32_t)0; i802 <  (int32_t)1; i802++){
for (uint64_t i803 =  (int32_t)0; i803 <  (int32_t)1; i803++){
for (uint64_t i804 =  (int32_t)0; i804 <  (int32_t)128; i804++){
Arr4DIdxRowM(tmp394, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i801,i802,i803,i804) = Arr1DIdxRowM(tmp17, (int32_t)128,i800);
i800 = (i800 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp394,  (int32_t)12);

uint64_t* tmp395 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp395, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp391, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp394, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp391);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp394);

uint64_t* tmp398 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i812;

int64_t i811;

int64_t i810;

int64_t i809;

int64_t i808;

int64_t i807;

int64_t i806;

int64_t i805;
i805 =  (int64_t)0;
i806 =  (int64_t)0;
i807 =  (int64_t)0;
i808 =  (int64_t)0;
for (uint64_t i809 =  (int32_t)0; i809 <  (int32_t)1; i809++){
for (uint64_t i811 =  (int32_t)0; i811 <  (int32_t)32; i811++){
for (uint64_t i812 =  (int32_t)0; i812 <  (int32_t)32; i812++){
for (uint64_t i810 =  (int32_t)0; i810 <  (int32_t)128; i810++){
Arr4DIdxRowM(tmp398, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i809,i810,i811,i812) = Arr4DIdxRowM(tmp395, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i805,i806,i807,i808);
i808 = (i808 +  (int64_t)1);
if ((i808 ==  (int64_t)128)) {
i808 =  (int64_t)0;
i807 = (i807 +  (int64_t)1);
if ((i807 ==  (int64_t)32)) {
i807 =  (int64_t)0;
i806 = (i806 +  (int64_t)1);
if ((i806 ==  (int64_t)32)) {
i806 =  (int64_t)0;
i805 = (i805 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp395);

uint64_t* tmp400 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i820;

int64_t i819;

int64_t i818;

int64_t i817;

int64_t i816;

int64_t i815;

int64_t i814;

int64_t i813;
i813 =  (int64_t)0;
i814 =  (int64_t)0;
i815 =  (int64_t)0;
i816 =  (int64_t)0;
for (uint64_t i817 =  (int32_t)0; i817 <  (int32_t)1; i817++){
for (uint64_t i820 =  (int32_t)0; i820 <  (int32_t)128; i820++){
for (uint64_t i818 =  (int32_t)0; i818 <  (int32_t)32; i818++){
for (uint64_t i819 =  (int32_t)0; i819 <  (int32_t)32; i819++){
Arr4DIdxRowM(tmp400, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i817,i818,i819,i820) = Arr4DIdxRowM(tmp398, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i813,i814,i815,i816);
i816 = (i816 +  (int64_t)1);
if ((i816 ==  (int64_t)32)) {
i816 =  (int64_t)0;
i815 = (i815 +  (int64_t)1);
if ((i815 ==  (int64_t)32)) {
i815 =  (int64_t)0;
i814 = (i814 +  (int64_t)1);
if ((i814 ==  (int64_t)128)) {
i814 =  (int64_t)0;
i813 = (i813 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp398);

uint64_t* tmp402 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp400, tmp402,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp400);

uint64_t* tmp404 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i828;

int64_t i827;

int64_t i826;

int64_t i825;

int64_t i824;

int64_t i823;

int64_t i822;

int64_t i821;
i821 =  (int64_t)0;
i822 =  (int64_t)0;
i823 =  (int64_t)0;
i824 =  (int64_t)0;
for (uint64_t i825 =  (int32_t)0; i825 <  (int32_t)1; i825++){
for (uint64_t i827 =  (int32_t)0; i827 <  (int32_t)32; i827++){
for (uint64_t i828 =  (int32_t)0; i828 <  (int32_t)32; i828++){
for (uint64_t i826 =  (int32_t)0; i826 <  (int32_t)128; i826++){
Arr4DIdxRowM(tmp404, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i825,i826,i827,i828) = Arr4DIdxRowM(tmp402, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i821,i822,i823,i824);
i824 = (i824 +  (int64_t)1);
if ((i824 ==  (int64_t)128)) {
i824 =  (int64_t)0;
i823 = (i823 +  (int64_t)1);
if ((i823 ==  (int64_t)32)) {
i823 =  (int64_t)0;
i822 = (i822 +  (int64_t)1);
if ((i822 ==  (int64_t)32)) {
i822 =  (int64_t)0;
i821 = (i821 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp402);

uint64_t* tmp406 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i836;

int64_t i835;

int64_t i834;

int64_t i833;

int64_t i832;

int64_t i831;

int64_t i830;

int64_t i829;
i829 =  (int64_t)0;
i830 =  (int64_t)0;
i831 =  (int64_t)0;
i832 =  (int64_t)0;
for (uint64_t i833 =  (int32_t)0; i833 <  (int32_t)1; i833++){
for (uint64_t i836 =  (int32_t)0; i836 <  (int32_t)128; i836++){
for (uint64_t i834 =  (int32_t)0; i834 <  (int32_t)32; i834++){
for (uint64_t i835 =  (int32_t)0; i835 <  (int32_t)32; i835++){
Arr4DIdxRowM(tmp406, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i833,i834,i835,i836) = Arr4DIdxRowM(tmp404, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i829,i830,i831,i832);
i832 = (i832 +  (int64_t)1);
if ((i832 ==  (int64_t)32)) {
i832 =  (int64_t)0;
i831 = (i831 +  (int64_t)1);
if ((i831 ==  (int64_t)32)) {
i831 =  (int64_t)0;
i830 = (i830 +  (int64_t)1);
if ((i830 ==  (int64_t)128)) {
i830 =  (int64_t)0;
i829 = (i829 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp404);

uint64_t* tmp408 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);

int64_t i844;

int64_t i843;

int64_t i842;

int64_t i841;

int64_t i840;

int64_t i839;

int64_t i838;

int64_t i837;
i837 =  (int64_t)0;
i838 =  (int64_t)0;
i839 =  (int64_t)0;
i840 =  (int64_t)0;
for (uint64_t i844 =  (int32_t)0; i844 <  (int32_t)512; i844++){
for (uint64_t i843 =  (int32_t)0; i843 <  (int32_t)128; i843++){
for (uint64_t i841 =  (int32_t)0; i841 <  (int32_t)1; i841++){
for (uint64_t i842 =  (int32_t)0; i842 <  (int32_t)1; i842++){
Arr4DIdxRowM(tmp408, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)512,i841,i842,i843,i844) = Arr4DIdxRowM(tmp24, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i837,i838,i839,i840);
i840 = (i840 +  (int64_t)1);
if ((i840 ==  (int64_t)1)) {
i840 =  (int64_t)0;
i839 = (i839 +  (int64_t)1);
if ((i839 ==  (int64_t)1)) {
i839 =  (int64_t)0;
i838 = (i838 +  (int64_t)1);
if ((i838 ==  (int64_t)128)) {
i838 =  (int64_t)0;
i837 = (i837 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1, tmp24);

uint64_t* tmp410 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp406, tmp408, tmp410);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp406);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp408);

uint64_t* tmp413 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i849;

int64_t i848;

int64_t i847;

int64_t i846;

int64_t i845;
i845 =  (int64_t)0;
for (uint64_t i846 =  (int32_t)0; i846 <  (int32_t)1; i846++){
for (uint64_t i847 =  (int32_t)0; i847 <  (int32_t)1; i847++){
for (uint64_t i848 =  (int32_t)0; i848 <  (int32_t)1; i848++){
for (uint64_t i849 =  (int32_t)0; i849 <  (int32_t)512; i849++){
Arr4DIdxRowM(tmp413, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i846,i847,i848,i849) = Arr1DIdxRowM(tmp20, (int32_t)512,i845);
i845 = (i845 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp413,  (int32_t)12);

uint64_t* tmp414 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp414, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp410, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp413, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp410);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp413);

uint64_t* tmp417 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i857;

int64_t i856;

int64_t i855;

int64_t i854;

int64_t i853;

int64_t i852;

int64_t i851;

int64_t i850;
i850 =  (int64_t)0;
i851 =  (int64_t)0;
i852 =  (int64_t)0;
i853 =  (int64_t)0;
for (uint64_t i854 =  (int32_t)0; i854 <  (int32_t)1; i854++){
for (uint64_t i856 =  (int32_t)0; i856 <  (int32_t)32; i856++){
for (uint64_t i857 =  (int32_t)0; i857 <  (int32_t)32; i857++){
for (uint64_t i855 =  (int32_t)0; i855 <  (int32_t)512; i855++){
Arr4DIdxRowM(tmp417, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i854,i855,i856,i857) = Arr4DIdxRowM(tmp414, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i850,i851,i852,i853);
i853 = (i853 +  (int64_t)1);
if ((i853 ==  (int64_t)512)) {
i853 =  (int64_t)0;
i852 = (i852 +  (int64_t)1);
if ((i852 ==  (int64_t)32)) {
i852 =  (int64_t)0;
i851 = (i851 +  (int64_t)1);
if ((i851 ==  (int64_t)32)) {
i851 =  (int64_t)0;
i850 = (i850 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp414);

uint64_t* tmp419 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i865;

int64_t i864;

int64_t i863;

int64_t i862;

int64_t i861;

int64_t i860;

int64_t i859;

int64_t i858;
i858 =  (int64_t)0;
i859 =  (int64_t)0;
i860 =  (int64_t)0;
i861 =  (int64_t)0;
for (uint64_t i862 =  (int32_t)0; i862 <  (int32_t)1; i862++){
for (uint64_t i865 =  (int32_t)0; i865 <  (int32_t)512; i865++){
for (uint64_t i863 =  (int32_t)0; i863 <  (int32_t)32; i863++){
for (uint64_t i864 =  (int32_t)0; i864 <  (int32_t)32; i864++){
Arr4DIdxRowM(tmp419, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i862,i863,i864,i865) = Arr4DIdxRowM(tmp417, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i858,i859,i860,i861);
i861 = (i861 +  (int64_t)1);
if ((i861 ==  (int64_t)32)) {
i861 =  (int64_t)0;
i860 = (i860 +  (int64_t)1);
if ((i860 ==  (int64_t)32)) {
i860 =  (int64_t)0;
i859 = (i859 +  (int64_t)1);
if ((i859 ==  (int64_t)512)) {
i859 =  (int64_t)0;
i858 = (i858 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp417);

uint64_t* tmp421 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i873;

int64_t i872;

int64_t i871;

int64_t i870;

int64_t i869;

int64_t i868;

int64_t i867;

int64_t i866;
i866 =  (int64_t)0;
i867 =  (int64_t)0;
i868 =  (int64_t)0;
i869 =  (int64_t)0;
for (uint64_t i870 =  (int32_t)0; i870 <  (int32_t)1; i870++){
for (uint64_t i873 =  (int32_t)0; i873 <  (int32_t)512; i873++){
for (uint64_t i871 =  (int32_t)0; i871 <  (int32_t)32; i871++){
for (uint64_t i872 =  (int32_t)0; i872 <  (int32_t)32; i872++){
Arr4DIdxRowM(tmp421, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i870,i871,i872,i873) = Arr4DIdxRowM(tmp367, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i866,i867,i868,i869);
i869 = (i869 +  (int64_t)1);
if ((i869 ==  (int64_t)32)) {
i869 =  (int64_t)0;
i868 = (i868 +  (int64_t)1);
if ((i868 ==  (int64_t)32)) {
i868 =  (int64_t)0;
i867 = (i867 +  (int64_t)1);
if ((i867 ==  (int64_t)512)) {
i867 =  (int64_t)0;
i866 = (i866 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp367);
ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp421,  (int32_t)12);

uint64_t* tmp423 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp423, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp419, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp421, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp419);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp421);

uint64_t* tmp426 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i881;

int64_t i880;

int64_t i879;

int64_t i878;

int64_t i877;

int64_t i876;

int64_t i875;

int64_t i874;
i874 =  (int64_t)0;
i875 =  (int64_t)0;
i876 =  (int64_t)0;
i877 =  (int64_t)0;
for (uint64_t i878 =  (int32_t)0; i878 <  (int32_t)1; i878++){
for (uint64_t i880 =  (int32_t)0; i880 <  (int32_t)32; i880++){
for (uint64_t i881 =  (int32_t)0; i881 <  (int32_t)32; i881++){
for (uint64_t i879 =  (int32_t)0; i879 <  (int32_t)512; i879++){
Arr4DIdxRowM(tmp426, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i878,i879,i880,i881) = Arr4DIdxRowM(tmp423, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i874,i875,i876,i877);
i877 = (i877 +  (int64_t)1);
if ((i877 ==  (int64_t)512)) {
i877 =  (int64_t)0;
i876 = (i876 +  (int64_t)1);
if ((i876 ==  (int64_t)32)) {
i876 =  (int64_t)0;
i875 = (i875 +  (int64_t)1);
if ((i875 ==  (int64_t)32)) {
i875 =  (int64_t)0;
i874 = (i874 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp423);

uint64_t* tmp428 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i889;

int64_t i888;

int64_t i887;

int64_t i886;

int64_t i885;

int64_t i884;

int64_t i883;

int64_t i882;
i882 =  (int64_t)0;
i883 =  (int64_t)0;
i884 =  (int64_t)0;
i885 =  (int64_t)0;
for (uint64_t i886 =  (int32_t)0; i886 <  (int32_t)1; i886++){
for (uint64_t i889 =  (int32_t)0; i889 <  (int32_t)512; i889++){
for (uint64_t i887 =  (int32_t)0; i887 <  (int32_t)32; i887++){
for (uint64_t i888 =  (int32_t)0; i888 <  (int32_t)32; i888++){
Arr4DIdxRowM(tmp428, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i886,i887,i888,i889) = Arr4DIdxRowM(tmp426, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i882,i883,i884,i885);
i885 = (i885 +  (int64_t)1);
if ((i885 ==  (int64_t)32)) {
i885 =  (int64_t)0;
i884 = (i884 +  (int64_t)1);
if ((i884 ==  (int64_t)32)) {
i884 =  (int64_t)0;
i883 = (i883 +  (int64_t)1);
if ((i883 ==  (int64_t)512)) {
i883 =  (int64_t)0;
i882 = (i882 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp426);

uint64_t* tmp430 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp428, tmp430,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp428);

uint64_t* tmp432 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i897;

int64_t i896;

int64_t i895;

int64_t i894;

int64_t i893;

int64_t i892;

int64_t i891;

int64_t i890;
i890 =  (int64_t)0;
i891 =  (int64_t)0;
i892 =  (int64_t)0;
i893 =  (int64_t)0;
for (uint64_t i894 =  (int32_t)0; i894 <  (int32_t)1; i894++){
for (uint64_t i896 =  (int32_t)0; i896 <  (int32_t)32; i896++){
for (uint64_t i897 =  (int32_t)0; i897 <  (int32_t)32; i897++){
for (uint64_t i895 =  (int32_t)0; i895 <  (int32_t)512; i895++){
Arr4DIdxRowM(tmp432, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i894,i895,i896,i897) = Arr4DIdxRowM(tmp430, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i890,i891,i892,i893);
i893 = (i893 +  (int64_t)1);
if ((i893 ==  (int64_t)512)) {
i893 =  (int64_t)0;
i892 = (i892 +  (int64_t)1);
if ((i892 ==  (int64_t)32)) {
i892 =  (int64_t)0;
i891 = (i891 +  (int64_t)1);
if ((i891 ==  (int64_t)32)) {
i891 =  (int64_t)0;
i890 = (i890 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp430);

uint64_t* tmp434 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i905;

int64_t i904;

int64_t i903;

int64_t i902;

int64_t i901;

int64_t i900;

int64_t i899;

int64_t i898;
i898 =  (int64_t)0;
i899 =  (int64_t)0;
i900 =  (int64_t)0;
i901 =  (int64_t)0;
for (uint64_t i902 =  (int32_t)0; i902 <  (int32_t)1; i902++){
for (uint64_t i905 =  (int32_t)0; i905 <  (int32_t)512; i905++){
for (uint64_t i903 =  (int32_t)0; i903 <  (int32_t)32; i903++){
for (uint64_t i904 =  (int32_t)0; i904 <  (int32_t)32; i904++){
Arr4DIdxRowM(tmp434, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i902,i903,i904,i905) = Arr4DIdxRowM(tmp432, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i898,i899,i900,i901);
i901 = (i901 +  (int64_t)1);
if ((i901 ==  (int64_t)32)) {
i901 =  (int64_t)0;
i900 = (i900 +  (int64_t)1);
if ((i900 ==  (int64_t)32)) {
i900 =  (int64_t)0;
i899 = (i899 +  (int64_t)1);
if ((i899 ==  (int64_t)512)) {
i899 =  (int64_t)0;
i898 = (i898 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp435 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);

int64_t i913;

int64_t i912;

int64_t i911;

int64_t i910;

int64_t i909;

int64_t i908;

int64_t i907;

int64_t i906;
i906 =  (int64_t)0;
i907 =  (int64_t)0;
i908 =  (int64_t)0;
i909 =  (int64_t)0;
for (uint64_t i913 =  (int32_t)0; i913 <  (int32_t)128; i913++){
for (uint64_t i912 =  (int32_t)0; i912 <  (int32_t)512; i912++){
for (uint64_t i910 =  (int32_t)0; i910 <  (int32_t)1; i910++){
for (uint64_t i911 =  (int32_t)0; i911 <  (int32_t)1; i911++){
Arr4DIdxRowM(tmp435, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)128,i910,i911,i912,i913) = Arr4DIdxRowM(tmp25, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i906,i907,i908,i909);
i909 = (i909 +  (int64_t)1);
if ((i909 ==  (int64_t)1)) {
i909 =  (int64_t)0;
i908 = (i908 +  (int64_t)1);
if ((i908 ==  (int64_t)1)) {
i908 =  (int64_t)0;
i907 = (i907 +  (int64_t)1);
if ((i907 ==  (int64_t)512)) {
i907 =  (int64_t)0;
i906 = (i906 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp25);

uint64_t* tmp437 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp434, tmp435, tmp437);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp434);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp435);

uint64_t* tmp440 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i918;

int64_t i917;

int64_t i916;

int64_t i915;

int64_t i914;
i914 =  (int64_t)0;
for (uint64_t i915 =  (int32_t)0; i915 <  (int32_t)1; i915++){
for (uint64_t i916 =  (int32_t)0; i916 <  (int32_t)1; i916++){
for (uint64_t i917 =  (int32_t)0; i917 <  (int32_t)1; i917++){
for (uint64_t i918 =  (int32_t)0; i918 <  (int32_t)128; i918++){
Arr4DIdxRowM(tmp440, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i915,i916,i917,i918) = Arr1DIdxRowM(tmp17, (int32_t)128,i914);
i914 = (i914 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp440,  (int32_t)12);

uint64_t* tmp441 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp441, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp437, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp440, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp440);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp437);

uint64_t* tmp444 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i926;

int64_t i925;

int64_t i924;

int64_t i923;

int64_t i922;

int64_t i921;

int64_t i920;

int64_t i919;
i919 =  (int64_t)0;
i920 =  (int64_t)0;
i921 =  (int64_t)0;
i922 =  (int64_t)0;
for (uint64_t i923 =  (int32_t)0; i923 <  (int32_t)1; i923++){
for (uint64_t i925 =  (int32_t)0; i925 <  (int32_t)32; i925++){
for (uint64_t i926 =  (int32_t)0; i926 <  (int32_t)32; i926++){
for (uint64_t i924 =  (int32_t)0; i924 <  (int32_t)128; i924++){
Arr4DIdxRowM(tmp444, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i923,i924,i925,i926) = Arr4DIdxRowM(tmp441, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i919,i920,i921,i922);
i922 = (i922 +  (int64_t)1);
if ((i922 ==  (int64_t)128)) {
i922 =  (int64_t)0;
i921 = (i921 +  (int64_t)1);
if ((i921 ==  (int64_t)32)) {
i921 =  (int64_t)0;
i920 = (i920 +  (int64_t)1);
if ((i920 ==  (int64_t)32)) {
i920 =  (int64_t)0;
i919 = (i919 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp441);

uint64_t* tmp446 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i934;

int64_t i933;

int64_t i932;

int64_t i931;

int64_t i930;

int64_t i929;

int64_t i928;

int64_t i927;
i927 =  (int64_t)0;
i928 =  (int64_t)0;
i929 =  (int64_t)0;
i930 =  (int64_t)0;
for (uint64_t i931 =  (int32_t)0; i931 <  (int32_t)1; i931++){
for (uint64_t i934 =  (int32_t)0; i934 <  (int32_t)128; i934++){
for (uint64_t i932 =  (int32_t)0; i932 <  (int32_t)32; i932++){
for (uint64_t i933 =  (int32_t)0; i933 <  (int32_t)32; i933++){
Arr4DIdxRowM(tmp446, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i931,i932,i933,i934) = Arr4DIdxRowM(tmp444, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i927,i928,i929,i930);
i930 = (i930 +  (int64_t)1);
if ((i930 ==  (int64_t)32)) {
i930 =  (int64_t)0;
i929 = (i929 +  (int64_t)1);
if ((i929 ==  (int64_t)32)) {
i929 =  (int64_t)0;
i928 = (i928 +  (int64_t)1);
if ((i928 ==  (int64_t)128)) {
i928 =  (int64_t)0;
i927 = (i927 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp444);

uint64_t* tmp448 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp446, tmp448,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp446);

uint64_t* tmp450 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i942;

int64_t i941;

int64_t i940;

int64_t i939;

int64_t i938;

int64_t i937;

int64_t i936;

int64_t i935;
i935 =  (int64_t)0;
i936 =  (int64_t)0;
i937 =  (int64_t)0;
i938 =  (int64_t)0;
for (uint64_t i939 =  (int32_t)0; i939 <  (int32_t)1; i939++){
for (uint64_t i941 =  (int32_t)0; i941 <  (int32_t)32; i941++){
for (uint64_t i942 =  (int32_t)0; i942 <  (int32_t)32; i942++){
for (uint64_t i940 =  (int32_t)0; i940 <  (int32_t)128; i940++){
Arr4DIdxRowM(tmp450, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i939,i940,i941,i942) = Arr4DIdxRowM(tmp448, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i935,i936,i937,i938);
i938 = (i938 +  (int64_t)1);
if ((i938 ==  (int64_t)128)) {
i938 =  (int64_t)0;
i937 = (i937 +  (int64_t)1);
if ((i937 ==  (int64_t)32)) {
i937 =  (int64_t)0;
i936 = (i936 +  (int64_t)1);
if ((i936 ==  (int64_t)32)) {
i936 =  (int64_t)0;
i935 = (i935 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp448);

uint64_t* tmp452 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i950;

int64_t i949;

int64_t i948;

int64_t i947;

int64_t i946;

int64_t i945;

int64_t i944;

int64_t i943;
i943 =  (int64_t)0;
i944 =  (int64_t)0;
i945 =  (int64_t)0;
i946 =  (int64_t)0;
for (uint64_t i947 =  (int32_t)0; i947 <  (int32_t)1; i947++){
for (uint64_t i950 =  (int32_t)0; i950 <  (int32_t)128; i950++){
for (uint64_t i948 =  (int32_t)0; i948 <  (int32_t)32; i948++){
for (uint64_t i949 =  (int32_t)0; i949 <  (int32_t)32; i949++){
Arr4DIdxRowM(tmp452, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i947,i948,i949,i950) = Arr4DIdxRowM(tmp450, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i943,i944,i945,i946);
i946 = (i946 +  (int64_t)1);
if ((i946 ==  (int64_t)32)) {
i946 =  (int64_t)0;
i945 = (i945 +  (int64_t)1);
if ((i945 ==  (int64_t)32)) {
i945 =  (int64_t)0;
i944 = (i944 +  (int64_t)1);
if ((i944 ==  (int64_t)128)) {
i944 =  (int64_t)0;
i943 = (i943 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp450);

uint64_t* tmp454 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);

int64_t i958;

int64_t i957;

int64_t i956;

int64_t i955;

int64_t i954;

int64_t i953;

int64_t i952;

int64_t i951;
i951 =  (int64_t)0;
i952 =  (int64_t)0;
i953 =  (int64_t)0;
i954 =  (int64_t)0;
for (uint64_t i958 =  (int32_t)0; i958 <  (int32_t)128; i958++){
for (uint64_t i957 =  (int32_t)0; i957 <  (int32_t)128; i957++){
for (uint64_t i955 =  (int32_t)0; i955 <  (int32_t)3; i955++){
for (uint64_t i956 =  (int32_t)0; i956 <  (int32_t)3; i956++){
Arr4DIdxRowM(tmp454, (int32_t)3, (int32_t)3, (int32_t)128, (int32_t)128,i955,i956,i957,i958) = Arr4DIdxRowM(tmp26, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i951,i952,i953,i954);
i954 = (i954 +  (int64_t)1);
if ((i954 ==  (int64_t)3)) {
i954 =  (int64_t)0;
i953 = (i953 +  (int64_t)1);
if ((i953 ==  (int64_t)3)) {
i953 =  (int64_t)0;
i952 = (i952 +  (int64_t)1);
if ((i952 ==  (int64_t)128)) {
i952 =  (int64_t)0;
i951 = (i951 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3, tmp26);

uint64_t* tmp456 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp452, tmp454, tmp456);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp452);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp454);

uint64_t* tmp459 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i963;

int64_t i962;

int64_t i961;

int64_t i960;

int64_t i959;
i959 =  (int64_t)0;
for (uint64_t i960 =  (int32_t)0; i960 <  (int32_t)1; i960++){
for (uint64_t i961 =  (int32_t)0; i961 <  (int32_t)1; i961++){
for (uint64_t i962 =  (int32_t)0; i962 <  (int32_t)1; i962++){
for (uint64_t i963 =  (int32_t)0; i963 <  (int32_t)128; i963++){
Arr4DIdxRowM(tmp459, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i960,i961,i962,i963) = Arr1DIdxRowM(tmp17, (int32_t)128,i959);
i959 = (i959 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp459,  (int32_t)12);

uint64_t* tmp460 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp460, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp456, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp459, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp456);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp459);

uint64_t* tmp463 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i971;

int64_t i970;

int64_t i969;

int64_t i968;

int64_t i967;

int64_t i966;

int64_t i965;

int64_t i964;
i964 =  (int64_t)0;
i965 =  (int64_t)0;
i966 =  (int64_t)0;
i967 =  (int64_t)0;
for (uint64_t i968 =  (int32_t)0; i968 <  (int32_t)1; i968++){
for (uint64_t i970 =  (int32_t)0; i970 <  (int32_t)32; i970++){
for (uint64_t i971 =  (int32_t)0; i971 <  (int32_t)32; i971++){
for (uint64_t i969 =  (int32_t)0; i969 <  (int32_t)128; i969++){
Arr4DIdxRowM(tmp463, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i968,i969,i970,i971) = Arr4DIdxRowM(tmp460, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i964,i965,i966,i967);
i967 = (i967 +  (int64_t)1);
if ((i967 ==  (int64_t)128)) {
i967 =  (int64_t)0;
i966 = (i966 +  (int64_t)1);
if ((i966 ==  (int64_t)32)) {
i966 =  (int64_t)0;
i965 = (i965 +  (int64_t)1);
if ((i965 ==  (int64_t)32)) {
i965 =  (int64_t)0;
i964 = (i964 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp460);

uint64_t* tmp465 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i979;

int64_t i978;

int64_t i977;

int64_t i976;

int64_t i975;

int64_t i974;

int64_t i973;

int64_t i972;
i972 =  (int64_t)0;
i973 =  (int64_t)0;
i974 =  (int64_t)0;
i975 =  (int64_t)0;
for (uint64_t i976 =  (int32_t)0; i976 <  (int32_t)1; i976++){
for (uint64_t i979 =  (int32_t)0; i979 <  (int32_t)128; i979++){
for (uint64_t i977 =  (int32_t)0; i977 <  (int32_t)32; i977++){
for (uint64_t i978 =  (int32_t)0; i978 <  (int32_t)32; i978++){
Arr4DIdxRowM(tmp465, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i976,i977,i978,i979) = Arr4DIdxRowM(tmp463, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i972,i973,i974,i975);
i975 = (i975 +  (int64_t)1);
if ((i975 ==  (int64_t)32)) {
i975 =  (int64_t)0;
i974 = (i974 +  (int64_t)1);
if ((i974 ==  (int64_t)32)) {
i974 =  (int64_t)0;
i973 = (i973 +  (int64_t)1);
if ((i973 ==  (int64_t)128)) {
i973 =  (int64_t)0;
i972 = (i972 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp463);

uint64_t* tmp467 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp465, tmp467,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp465);

uint64_t* tmp469 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i987;

int64_t i986;

int64_t i985;

int64_t i984;

int64_t i983;

int64_t i982;

int64_t i981;

int64_t i980;
i980 =  (int64_t)0;
i981 =  (int64_t)0;
i982 =  (int64_t)0;
i983 =  (int64_t)0;
for (uint64_t i984 =  (int32_t)0; i984 <  (int32_t)1; i984++){
for (uint64_t i986 =  (int32_t)0; i986 <  (int32_t)32; i986++){
for (uint64_t i987 =  (int32_t)0; i987 <  (int32_t)32; i987++){
for (uint64_t i985 =  (int32_t)0; i985 <  (int32_t)128; i985++){
Arr4DIdxRowM(tmp469, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i984,i985,i986,i987) = Arr4DIdxRowM(tmp467, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i980,i981,i982,i983);
i983 = (i983 +  (int64_t)1);
if ((i983 ==  (int64_t)128)) {
i983 =  (int64_t)0;
i982 = (i982 +  (int64_t)1);
if ((i982 ==  (int64_t)32)) {
i982 =  (int64_t)0;
i981 = (i981 +  (int64_t)1);
if ((i981 ==  (int64_t)32)) {
i981 =  (int64_t)0;
i980 = (i980 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp467);

uint64_t* tmp471 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i995;

int64_t i994;

int64_t i993;

int64_t i992;

int64_t i991;

int64_t i990;

int64_t i989;

int64_t i988;
i988 =  (int64_t)0;
i989 =  (int64_t)0;
i990 =  (int64_t)0;
i991 =  (int64_t)0;
for (uint64_t i992 =  (int32_t)0; i992 <  (int32_t)1; i992++){
for (uint64_t i995 =  (int32_t)0; i995 <  (int32_t)128; i995++){
for (uint64_t i993 =  (int32_t)0; i993 <  (int32_t)32; i993++){
for (uint64_t i994 =  (int32_t)0; i994 <  (int32_t)32; i994++){
Arr4DIdxRowM(tmp471, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i992,i993,i994,i995) = Arr4DIdxRowM(tmp469, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i988,i989,i990,i991);
i991 = (i991 +  (int64_t)1);
if ((i991 ==  (int64_t)32)) {
i991 =  (int64_t)0;
i990 = (i990 +  (int64_t)1);
if ((i990 ==  (int64_t)32)) {
i990 =  (int64_t)0;
i989 = (i989 +  (int64_t)1);
if ((i989 ==  (int64_t)128)) {
i989 =  (int64_t)0;
i988 = (i988 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp469);

uint64_t* tmp473 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);

int64_t i1003;

int64_t i1002;

int64_t i1001;

int64_t i1000;

int64_t i999;

int64_t i998;

int64_t i997;

int64_t i996;
i996 =  (int64_t)0;
i997 =  (int64_t)0;
i998 =  (int64_t)0;
i999 =  (int64_t)0;
for (uint64_t i1003 =  (int32_t)0; i1003 <  (int32_t)512; i1003++){
for (uint64_t i1002 =  (int32_t)0; i1002 <  (int32_t)128; i1002++){
for (uint64_t i1000 =  (int32_t)0; i1000 <  (int32_t)1; i1000++){
for (uint64_t i1001 =  (int32_t)0; i1001 <  (int32_t)1; i1001++){
Arr4DIdxRowM(tmp473, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)512,i1000,i1001,i1002,i1003) = Arr4DIdxRowM(tmp27, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i996,i997,i998,i999);
i999 = (i999 +  (int64_t)1);
if ((i999 ==  (int64_t)1)) {
i999 =  (int64_t)0;
i998 = (i998 +  (int64_t)1);
if ((i998 ==  (int64_t)1)) {
i998 =  (int64_t)0;
i997 = (i997 +  (int64_t)1);
if ((i997 ==  (int64_t)128)) {
i997 =  (int64_t)0;
i996 = (i996 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1, tmp27);

uint64_t* tmp475 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp471, tmp473, tmp475);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp471);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp473);

uint64_t* tmp478 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i1008;

int64_t i1007;

int64_t i1006;

int64_t i1005;

int64_t i1004;
i1004 =  (int64_t)0;
for (uint64_t i1005 =  (int32_t)0; i1005 <  (int32_t)1; i1005++){
for (uint64_t i1006 =  (int32_t)0; i1006 <  (int32_t)1; i1006++){
for (uint64_t i1007 =  (int32_t)0; i1007 <  (int32_t)1; i1007++){
for (uint64_t i1008 =  (int32_t)0; i1008 <  (int32_t)512; i1008++){
Arr4DIdxRowM(tmp478, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i1005,i1006,i1007,i1008) = Arr1DIdxRowM(tmp20, (int32_t)512,i1004);
i1004 = (i1004 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp478,  (int32_t)12);

uint64_t* tmp479 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp479, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp475, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp478, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp475);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp478);

uint64_t* tmp482 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1016;

int64_t i1015;

int64_t i1014;

int64_t i1013;

int64_t i1012;

int64_t i1011;

int64_t i1010;

int64_t i1009;
i1009 =  (int64_t)0;
i1010 =  (int64_t)0;
i1011 =  (int64_t)0;
i1012 =  (int64_t)0;
for (uint64_t i1013 =  (int32_t)0; i1013 <  (int32_t)1; i1013++){
for (uint64_t i1015 =  (int32_t)0; i1015 <  (int32_t)32; i1015++){
for (uint64_t i1016 =  (int32_t)0; i1016 <  (int32_t)32; i1016++){
for (uint64_t i1014 =  (int32_t)0; i1014 <  (int32_t)512; i1014++){
Arr4DIdxRowM(tmp482, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1013,i1014,i1015,i1016) = Arr4DIdxRowM(tmp479, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1009,i1010,i1011,i1012);
i1012 = (i1012 +  (int64_t)1);
if ((i1012 ==  (int64_t)512)) {
i1012 =  (int64_t)0;
i1011 = (i1011 +  (int64_t)1);
if ((i1011 ==  (int64_t)32)) {
i1011 =  (int64_t)0;
i1010 = (i1010 +  (int64_t)1);
if ((i1010 ==  (int64_t)32)) {
i1010 =  (int64_t)0;
i1009 = (i1009 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp479);

uint64_t* tmp484 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1024;

int64_t i1023;

int64_t i1022;

int64_t i1021;

int64_t i1020;

int64_t i1019;

int64_t i1018;

int64_t i1017;
i1017 =  (int64_t)0;
i1018 =  (int64_t)0;
i1019 =  (int64_t)0;
i1020 =  (int64_t)0;
for (uint64_t i1021 =  (int32_t)0; i1021 <  (int32_t)1; i1021++){
for (uint64_t i1024 =  (int32_t)0; i1024 <  (int32_t)512; i1024++){
for (uint64_t i1022 =  (int32_t)0; i1022 <  (int32_t)32; i1022++){
for (uint64_t i1023 =  (int32_t)0; i1023 <  (int32_t)32; i1023++){
Arr4DIdxRowM(tmp484, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1021,i1022,i1023,i1024) = Arr4DIdxRowM(tmp482, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1017,i1018,i1019,i1020);
i1020 = (i1020 +  (int64_t)1);
if ((i1020 ==  (int64_t)32)) {
i1020 =  (int64_t)0;
i1019 = (i1019 +  (int64_t)1);
if ((i1019 ==  (int64_t)32)) {
i1019 =  (int64_t)0;
i1018 = (i1018 +  (int64_t)1);
if ((i1018 ==  (int64_t)512)) {
i1018 =  (int64_t)0;
i1017 = (i1017 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp482);

uint64_t* tmp486 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1032;

int64_t i1031;

int64_t i1030;

int64_t i1029;

int64_t i1028;

int64_t i1027;

int64_t i1026;

int64_t i1025;
i1025 =  (int64_t)0;
i1026 =  (int64_t)0;
i1027 =  (int64_t)0;
i1028 =  (int64_t)0;
for (uint64_t i1029 =  (int32_t)0; i1029 <  (int32_t)1; i1029++){
for (uint64_t i1032 =  (int32_t)0; i1032 <  (int32_t)512; i1032++){
for (uint64_t i1030 =  (int32_t)0; i1030 <  (int32_t)32; i1030++){
for (uint64_t i1031 =  (int32_t)0; i1031 <  (int32_t)32; i1031++){
Arr4DIdxRowM(tmp486, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1029,i1030,i1031,i1032) = Arr4DIdxRowM(tmp432, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1025,i1026,i1027,i1028);
i1028 = (i1028 +  (int64_t)1);
if ((i1028 ==  (int64_t)32)) {
i1028 =  (int64_t)0;
i1027 = (i1027 +  (int64_t)1);
if ((i1027 ==  (int64_t)32)) {
i1027 =  (int64_t)0;
i1026 = (i1026 +  (int64_t)1);
if ((i1026 ==  (int64_t)512)) {
i1026 =  (int64_t)0;
i1025 = (i1025 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp432);
ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp486,  (int32_t)12);

uint64_t* tmp488 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp488, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp484, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp486, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp486);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp484);

uint64_t* tmp491 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1040;

int64_t i1039;

int64_t i1038;

int64_t i1037;

int64_t i1036;

int64_t i1035;

int64_t i1034;

int64_t i1033;
i1033 =  (int64_t)0;
i1034 =  (int64_t)0;
i1035 =  (int64_t)0;
i1036 =  (int64_t)0;
for (uint64_t i1037 =  (int32_t)0; i1037 <  (int32_t)1; i1037++){
for (uint64_t i1039 =  (int32_t)0; i1039 <  (int32_t)32; i1039++){
for (uint64_t i1040 =  (int32_t)0; i1040 <  (int32_t)32; i1040++){
for (uint64_t i1038 =  (int32_t)0; i1038 <  (int32_t)512; i1038++){
Arr4DIdxRowM(tmp491, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1037,i1038,i1039,i1040) = Arr4DIdxRowM(tmp488, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1033,i1034,i1035,i1036);
i1036 = (i1036 +  (int64_t)1);
if ((i1036 ==  (int64_t)512)) {
i1036 =  (int64_t)0;
i1035 = (i1035 +  (int64_t)1);
if ((i1035 ==  (int64_t)32)) {
i1035 =  (int64_t)0;
i1034 = (i1034 +  (int64_t)1);
if ((i1034 ==  (int64_t)32)) {
i1034 =  (int64_t)0;
i1033 = (i1033 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp488);

uint64_t* tmp493 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1048;

int64_t i1047;

int64_t i1046;

int64_t i1045;

int64_t i1044;

int64_t i1043;

int64_t i1042;

int64_t i1041;
i1041 =  (int64_t)0;
i1042 =  (int64_t)0;
i1043 =  (int64_t)0;
i1044 =  (int64_t)0;
for (uint64_t i1045 =  (int32_t)0; i1045 <  (int32_t)1; i1045++){
for (uint64_t i1048 =  (int32_t)0; i1048 <  (int32_t)512; i1048++){
for (uint64_t i1046 =  (int32_t)0; i1046 <  (int32_t)32; i1046++){
for (uint64_t i1047 =  (int32_t)0; i1047 <  (int32_t)32; i1047++){
Arr4DIdxRowM(tmp493, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1045,i1046,i1047,i1048) = Arr4DIdxRowM(tmp491, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1041,i1042,i1043,i1044);
i1044 = (i1044 +  (int64_t)1);
if ((i1044 ==  (int64_t)32)) {
i1044 =  (int64_t)0;
i1043 = (i1043 +  (int64_t)1);
if ((i1043 ==  (int64_t)32)) {
i1043 =  (int64_t)0;
i1042 = (i1042 +  (int64_t)1);
if ((i1042 ==  (int64_t)512)) {
i1042 =  (int64_t)0;
i1041 = (i1041 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp491);

uint64_t* tmp495 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp493, tmp495,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp493);

uint64_t* tmp497 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1056;

int64_t i1055;

int64_t i1054;

int64_t i1053;

int64_t i1052;

int64_t i1051;

int64_t i1050;

int64_t i1049;
i1049 =  (int64_t)0;
i1050 =  (int64_t)0;
i1051 =  (int64_t)0;
i1052 =  (int64_t)0;
for (uint64_t i1053 =  (int32_t)0; i1053 <  (int32_t)1; i1053++){
for (uint64_t i1055 =  (int32_t)0; i1055 <  (int32_t)32; i1055++){
for (uint64_t i1056 =  (int32_t)0; i1056 <  (int32_t)32; i1056++){
for (uint64_t i1054 =  (int32_t)0; i1054 <  (int32_t)512; i1054++){
Arr4DIdxRowM(tmp497, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1053,i1054,i1055,i1056) = Arr4DIdxRowM(tmp495, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1049,i1050,i1051,i1052);
i1052 = (i1052 +  (int64_t)1);
if ((i1052 ==  (int64_t)512)) {
i1052 =  (int64_t)0;
i1051 = (i1051 +  (int64_t)1);
if ((i1051 ==  (int64_t)32)) {
i1051 =  (int64_t)0;
i1050 = (i1050 +  (int64_t)1);
if ((i1050 ==  (int64_t)32)) {
i1050 =  (int64_t)0;
i1049 = (i1049 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp495);

uint64_t* tmp499 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1064;

int64_t i1063;

int64_t i1062;

int64_t i1061;

int64_t i1060;

int64_t i1059;

int64_t i1058;

int64_t i1057;
i1057 =  (int64_t)0;
i1058 =  (int64_t)0;
i1059 =  (int64_t)0;
i1060 =  (int64_t)0;
for (uint64_t i1061 =  (int32_t)0; i1061 <  (int32_t)1; i1061++){
for (uint64_t i1064 =  (int32_t)0; i1064 <  (int32_t)512; i1064++){
for (uint64_t i1062 =  (int32_t)0; i1062 <  (int32_t)32; i1062++){
for (uint64_t i1063 =  (int32_t)0; i1063 <  (int32_t)32; i1063++){
Arr4DIdxRowM(tmp499, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1061,i1062,i1063,i1064) = Arr4DIdxRowM(tmp497, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1057,i1058,i1059,i1060);
i1060 = (i1060 +  (int64_t)1);
if ((i1060 ==  (int64_t)32)) {
i1060 =  (int64_t)0;
i1059 = (i1059 +  (int64_t)1);
if ((i1059 ==  (int64_t)32)) {
i1059 =  (int64_t)0;
i1058 = (i1058 +  (int64_t)1);
if ((i1058 ==  (int64_t)512)) {
i1058 =  (int64_t)0;
i1057 = (i1057 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp500 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);

int64_t i1072;

int64_t i1071;

int64_t i1070;

int64_t i1069;

int64_t i1068;

int64_t i1067;

int64_t i1066;

int64_t i1065;
i1065 =  (int64_t)0;
i1066 =  (int64_t)0;
i1067 =  (int64_t)0;
i1068 =  (int64_t)0;
for (uint64_t i1072 =  (int32_t)0; i1072 <  (int32_t)128; i1072++){
for (uint64_t i1071 =  (int32_t)0; i1071 <  (int32_t)512; i1071++){
for (uint64_t i1069 =  (int32_t)0; i1069 <  (int32_t)1; i1069++){
for (uint64_t i1070 =  (int32_t)0; i1070 <  (int32_t)1; i1070++){
Arr4DIdxRowM(tmp500, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)128,i1069,i1070,i1071,i1072) = Arr4DIdxRowM(tmp28, (int32_t)128, (int32_t)512, (int32_t)1, (int32_t)1,i1065,i1066,i1067,i1068);
i1068 = (i1068 +  (int64_t)1);
if ((i1068 ==  (int64_t)1)) {
i1068 =  (int64_t)0;
i1067 = (i1067 +  (int64_t)1);
if ((i1067 ==  (int64_t)1)) {
i1067 =  (int64_t)0;
i1066 = (i1066 +  (int64_t)1);
if ((i1066 ==  (int64_t)512)) {
i1066 =  (int64_t)0;
i1065 = (i1065 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp28);

uint64_t* tmp502 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp499, tmp500, tmp502);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp499);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp500);

uint64_t* tmp505 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i1077;

int64_t i1076;

int64_t i1075;

int64_t i1074;

int64_t i1073;
i1073 =  (int64_t)0;
for (uint64_t i1074 =  (int32_t)0; i1074 <  (int32_t)1; i1074++){
for (uint64_t i1075 =  (int32_t)0; i1075 <  (int32_t)1; i1075++){
for (uint64_t i1076 =  (int32_t)0; i1076 <  (int32_t)1; i1076++){
for (uint64_t i1077 =  (int32_t)0; i1077 <  (int32_t)128; i1077++){
Arr4DIdxRowM(tmp505, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i1074,i1075,i1076,i1077) = Arr1DIdxRowM(tmp17, (int32_t)128,i1073);
i1073 = (i1073 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp505,  (int32_t)12);

uint64_t* tmp506 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp506, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp502, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp505, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp502);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp505);

uint64_t* tmp509 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i1085;

int64_t i1084;

int64_t i1083;

int64_t i1082;

int64_t i1081;

int64_t i1080;

int64_t i1079;

int64_t i1078;
i1078 =  (int64_t)0;
i1079 =  (int64_t)0;
i1080 =  (int64_t)0;
i1081 =  (int64_t)0;
for (uint64_t i1082 =  (int32_t)0; i1082 <  (int32_t)1; i1082++){
for (uint64_t i1084 =  (int32_t)0; i1084 <  (int32_t)32; i1084++){
for (uint64_t i1085 =  (int32_t)0; i1085 <  (int32_t)32; i1085++){
for (uint64_t i1083 =  (int32_t)0; i1083 <  (int32_t)128; i1083++){
Arr4DIdxRowM(tmp509, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1082,i1083,i1084,i1085) = Arr4DIdxRowM(tmp506, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1078,i1079,i1080,i1081);
i1081 = (i1081 +  (int64_t)1);
if ((i1081 ==  (int64_t)128)) {
i1081 =  (int64_t)0;
i1080 = (i1080 +  (int64_t)1);
if ((i1080 ==  (int64_t)32)) {
i1080 =  (int64_t)0;
i1079 = (i1079 +  (int64_t)1);
if ((i1079 ==  (int64_t)32)) {
i1079 =  (int64_t)0;
i1078 = (i1078 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp506);

uint64_t* tmp511 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i1093;

int64_t i1092;

int64_t i1091;

int64_t i1090;

int64_t i1089;

int64_t i1088;

int64_t i1087;

int64_t i1086;
i1086 =  (int64_t)0;
i1087 =  (int64_t)0;
i1088 =  (int64_t)0;
i1089 =  (int64_t)0;
for (uint64_t i1090 =  (int32_t)0; i1090 <  (int32_t)1; i1090++){
for (uint64_t i1093 =  (int32_t)0; i1093 <  (int32_t)128; i1093++){
for (uint64_t i1091 =  (int32_t)0; i1091 <  (int32_t)32; i1091++){
for (uint64_t i1092 =  (int32_t)0; i1092 <  (int32_t)32; i1092++){
Arr4DIdxRowM(tmp511, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1090,i1091,i1092,i1093) = Arr4DIdxRowM(tmp509, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1086,i1087,i1088,i1089);
i1089 = (i1089 +  (int64_t)1);
if ((i1089 ==  (int64_t)32)) {
i1089 =  (int64_t)0;
i1088 = (i1088 +  (int64_t)1);
if ((i1088 ==  (int64_t)32)) {
i1088 =  (int64_t)0;
i1087 = (i1087 +  (int64_t)1);
if ((i1087 ==  (int64_t)128)) {
i1087 =  (int64_t)0;
i1086 = (i1086 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp509);

uint64_t* tmp513 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp511, tmp513,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp511);

uint64_t* tmp515 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i1101;

int64_t i1100;

int64_t i1099;

int64_t i1098;

int64_t i1097;

int64_t i1096;

int64_t i1095;

int64_t i1094;
i1094 =  (int64_t)0;
i1095 =  (int64_t)0;
i1096 =  (int64_t)0;
i1097 =  (int64_t)0;
for (uint64_t i1098 =  (int32_t)0; i1098 <  (int32_t)1; i1098++){
for (uint64_t i1100 =  (int32_t)0; i1100 <  (int32_t)32; i1100++){
for (uint64_t i1101 =  (int32_t)0; i1101 <  (int32_t)32; i1101++){
for (uint64_t i1099 =  (int32_t)0; i1099 <  (int32_t)128; i1099++){
Arr4DIdxRowM(tmp515, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1098,i1099,i1100,i1101) = Arr4DIdxRowM(tmp513, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1094,i1095,i1096,i1097);
i1097 = (i1097 +  (int64_t)1);
if ((i1097 ==  (int64_t)128)) {
i1097 =  (int64_t)0;
i1096 = (i1096 +  (int64_t)1);
if ((i1096 ==  (int64_t)32)) {
i1096 =  (int64_t)0;
i1095 = (i1095 +  (int64_t)1);
if ((i1095 ==  (int64_t)32)) {
i1095 =  (int64_t)0;
i1094 = (i1094 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp513);

uint64_t* tmp517 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i1109;

int64_t i1108;

int64_t i1107;

int64_t i1106;

int64_t i1105;

int64_t i1104;

int64_t i1103;

int64_t i1102;
i1102 =  (int64_t)0;
i1103 =  (int64_t)0;
i1104 =  (int64_t)0;
i1105 =  (int64_t)0;
for (uint64_t i1106 =  (int32_t)0; i1106 <  (int32_t)1; i1106++){
for (uint64_t i1109 =  (int32_t)0; i1109 <  (int32_t)128; i1109++){
for (uint64_t i1107 =  (int32_t)0; i1107 <  (int32_t)32; i1107++){
for (uint64_t i1108 =  (int32_t)0; i1108 <  (int32_t)32; i1108++){
Arr4DIdxRowM(tmp517, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1106,i1107,i1108,i1109) = Arr4DIdxRowM(tmp515, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1102,i1103,i1104,i1105);
i1105 = (i1105 +  (int64_t)1);
if ((i1105 ==  (int64_t)32)) {
i1105 =  (int64_t)0;
i1104 = (i1104 +  (int64_t)1);
if ((i1104 ==  (int64_t)32)) {
i1104 =  (int64_t)0;
i1103 = (i1103 +  (int64_t)1);
if ((i1103 ==  (int64_t)128)) {
i1103 =  (int64_t)0;
i1102 = (i1102 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp515);

uint64_t* tmp519 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);

int64_t i1117;

int64_t i1116;

int64_t i1115;

int64_t i1114;

int64_t i1113;

int64_t i1112;

int64_t i1111;

int64_t i1110;
i1110 =  (int64_t)0;
i1111 =  (int64_t)0;
i1112 =  (int64_t)0;
i1113 =  (int64_t)0;
for (uint64_t i1117 =  (int32_t)0; i1117 <  (int32_t)128; i1117++){
for (uint64_t i1116 =  (int32_t)0; i1116 <  (int32_t)128; i1116++){
for (uint64_t i1114 =  (int32_t)0; i1114 <  (int32_t)3; i1114++){
for (uint64_t i1115 =  (int32_t)0; i1115 <  (int32_t)3; i1115++){
Arr4DIdxRowM(tmp519, (int32_t)3, (int32_t)3, (int32_t)128, (int32_t)128,i1114,i1115,i1116,i1117) = Arr4DIdxRowM(tmp29, (int32_t)128, (int32_t)128, (int32_t)3, (int32_t)3,i1110,i1111,i1112,i1113);
i1113 = (i1113 +  (int64_t)1);
if ((i1113 ==  (int64_t)3)) {
i1113 =  (int64_t)0;
i1112 = (i1112 +  (int64_t)1);
if ((i1112 ==  (int64_t)3)) {
i1112 =  (int64_t)0;
i1111 = (i1111 +  (int64_t)1);
if ((i1111 ==  (int64_t)128)) {
i1111 =  (int64_t)0;
i1110 = (i1110 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)128,  (int32_t)128,  (int32_t)3,  (int32_t)3, tmp29);

uint64_t* tmp521 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp517, tmp519, tmp521);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp519);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp517);

uint64_t* tmp524 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128);

int64_t i1122;

int64_t i1121;

int64_t i1120;

int64_t i1119;

int64_t i1118;
i1118 =  (int64_t)0;
for (uint64_t i1119 =  (int32_t)0; i1119 <  (int32_t)1; i1119++){
for (uint64_t i1120 =  (int32_t)0; i1120 <  (int32_t)1; i1120++){
for (uint64_t i1121 =  (int32_t)0; i1121 <  (int32_t)1; i1121++){
for (uint64_t i1122 =  (int32_t)0; i1122 <  (int32_t)128; i1122++){
Arr4DIdxRowM(tmp524, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i1119,i1120,i1121,i1122) = Arr1DIdxRowM(tmp17, (int32_t)128,i1118);
i1118 = (i1118 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)128, tmp17);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp524,  (int32_t)12);

uint64_t* tmp526 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)128; i3++){
Arr4DIdxRowM(tmp526, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp521, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i0,i1,i2,i3), Arr4DIdxRowM(tmp524, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)128,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp521);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128, tmp524);

uint64_t* tmp529 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i1130;

int64_t i1129;

int64_t i1128;

int64_t i1127;

int64_t i1126;

int64_t i1125;

int64_t i1124;

int64_t i1123;
i1123 =  (int64_t)0;
i1124 =  (int64_t)0;
i1125 =  (int64_t)0;
i1126 =  (int64_t)0;
for (uint64_t i1127 =  (int32_t)0; i1127 <  (int32_t)1; i1127++){
for (uint64_t i1129 =  (int32_t)0; i1129 <  (int32_t)32; i1129++){
for (uint64_t i1130 =  (int32_t)0; i1130 <  (int32_t)32; i1130++){
for (uint64_t i1128 =  (int32_t)0; i1128 <  (int32_t)128; i1128++){
Arr4DIdxRowM(tmp529, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1127,i1128,i1129,i1130) = Arr4DIdxRowM(tmp526, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1123,i1124,i1125,i1126);
i1126 = (i1126 +  (int64_t)1);
if ((i1126 ==  (int64_t)128)) {
i1126 =  (int64_t)0;
i1125 = (i1125 +  (int64_t)1);
if ((i1125 ==  (int64_t)32)) {
i1125 =  (int64_t)0;
i1124 = (i1124 +  (int64_t)1);
if ((i1124 ==  (int64_t)32)) {
i1124 =  (int64_t)0;
i1123 = (i1123 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp526);

uint64_t* tmp531 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i1138;

int64_t i1137;

int64_t i1136;

int64_t i1135;

int64_t i1134;

int64_t i1133;

int64_t i1132;

int64_t i1131;
i1131 =  (int64_t)0;
i1132 =  (int64_t)0;
i1133 =  (int64_t)0;
i1134 =  (int64_t)0;
for (uint64_t i1135 =  (int32_t)0; i1135 <  (int32_t)1; i1135++){
for (uint64_t i1138 =  (int32_t)0; i1138 <  (int32_t)128; i1138++){
for (uint64_t i1136 =  (int32_t)0; i1136 <  (int32_t)32; i1136++){
for (uint64_t i1137 =  (int32_t)0; i1137 <  (int32_t)32; i1137++){
Arr4DIdxRowM(tmp531, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1135,i1136,i1137,i1138) = Arr4DIdxRowM(tmp529, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1131,i1132,i1133,i1134);
i1134 = (i1134 +  (int64_t)1);
if ((i1134 ==  (int64_t)32)) {
i1134 =  (int64_t)0;
i1133 = (i1133 +  (int64_t)1);
if ((i1133 ==  (int64_t)32)) {
i1133 =  (int64_t)0;
i1132 = (i1132 +  (int64_t)1);
if ((i1132 ==  (int64_t)128)) {
i1132 =  (int64_t)0;
i1131 = (i1131 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp529);

uint64_t* tmp533 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp531, tmp533,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp531);

uint64_t* tmp535 = make_array<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32);

int64_t i1146;

int64_t i1145;

int64_t i1144;

int64_t i1143;

int64_t i1142;

int64_t i1141;

int64_t i1140;

int64_t i1139;
i1139 =  (int64_t)0;
i1140 =  (int64_t)0;
i1141 =  (int64_t)0;
i1142 =  (int64_t)0;
for (uint64_t i1143 =  (int32_t)0; i1143 <  (int32_t)1; i1143++){
for (uint64_t i1145 =  (int32_t)0; i1145 <  (int32_t)32; i1145++){
for (uint64_t i1146 =  (int32_t)0; i1146 <  (int32_t)32; i1146++){
for (uint64_t i1144 =  (int32_t)0; i1144 <  (int32_t)128; i1144++){
Arr4DIdxRowM(tmp535, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1143,i1144,i1145,i1146) = Arr4DIdxRowM(tmp533, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1139,i1140,i1141,i1142);
i1142 = (i1142 +  (int64_t)1);
if ((i1142 ==  (int64_t)128)) {
i1142 =  (int64_t)0;
i1141 = (i1141 +  (int64_t)1);
if ((i1141 ==  (int64_t)32)) {
i1141 =  (int64_t)0;
i1140 = (i1140 +  (int64_t)1);
if ((i1140 ==  (int64_t)32)) {
i1140 =  (int64_t)0;
i1139 = (i1139 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp533);

uint64_t* tmp537 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128);

int64_t i1154;

int64_t i1153;

int64_t i1152;

int64_t i1151;

int64_t i1150;

int64_t i1149;

int64_t i1148;

int64_t i1147;
i1147 =  (int64_t)0;
i1148 =  (int64_t)0;
i1149 =  (int64_t)0;
i1150 =  (int64_t)0;
for (uint64_t i1151 =  (int32_t)0; i1151 <  (int32_t)1; i1151++){
for (uint64_t i1154 =  (int32_t)0; i1154 <  (int32_t)128; i1154++){
for (uint64_t i1152 =  (int32_t)0; i1152 <  (int32_t)32; i1152++){
for (uint64_t i1153 =  (int32_t)0; i1153 <  (int32_t)32; i1153++){
Arr4DIdxRowM(tmp537, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)128,i1151,i1152,i1153,i1154) = Arr4DIdxRowM(tmp535, (int32_t)1, (int32_t)128, (int32_t)32, (int32_t)32,i1147,i1148,i1149,i1150);
i1150 = (i1150 +  (int64_t)1);
if ((i1150 ==  (int64_t)32)) {
i1150 =  (int64_t)0;
i1149 = (i1149 +  (int64_t)1);
if ((i1149 ==  (int64_t)32)) {
i1149 =  (int64_t)0;
i1148 = (i1148 +  (int64_t)1);
if ((i1148 ==  (int64_t)128)) {
i1148 =  (int64_t)0;
i1147 = (i1147 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)128,  (int32_t)32,  (int32_t)32, tmp535);

uint64_t* tmp539 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);

int64_t i1162;

int64_t i1161;

int64_t i1160;

int64_t i1159;

int64_t i1158;

int64_t i1157;

int64_t i1156;

int64_t i1155;
i1155 =  (int64_t)0;
i1156 =  (int64_t)0;
i1157 =  (int64_t)0;
i1158 =  (int64_t)0;
for (uint64_t i1162 =  (int32_t)0; i1162 <  (int32_t)512; i1162++){
for (uint64_t i1161 =  (int32_t)0; i1161 <  (int32_t)128; i1161++){
for (uint64_t i1159 =  (int32_t)0; i1159 <  (int32_t)1; i1159++){
for (uint64_t i1160 =  (int32_t)0; i1160 <  (int32_t)1; i1160++){
Arr4DIdxRowM(tmp539, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)512,i1159,i1160,i1161,i1162) = Arr4DIdxRowM(tmp30, (int32_t)512, (int32_t)128, (int32_t)1, (int32_t)1,i1155,i1156,i1157,i1158);
i1158 = (i1158 +  (int64_t)1);
if ((i1158 ==  (int64_t)1)) {
i1158 =  (int64_t)0;
i1157 = (i1157 +  (int64_t)1);
if ((i1157 ==  (int64_t)1)) {
i1157 =  (int64_t)0;
i1156 = (i1156 +  (int64_t)1);
if ((i1156 ==  (int64_t)128)) {
i1156 =  (int64_t)0;
i1155 = (i1155 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)128,  (int32_t)1,  (int32_t)1, tmp30);

uint64_t* tmp541 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp537, tmp539, tmp541);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)128, tmp537);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp539);

uint64_t* tmp544 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i1167;

int64_t i1166;

int64_t i1165;

int64_t i1164;

int64_t i1163;
i1163 =  (int64_t)0;
for (uint64_t i1164 =  (int32_t)0; i1164 <  (int32_t)1; i1164++){
for (uint64_t i1165 =  (int32_t)0; i1165 <  (int32_t)1; i1165++){
for (uint64_t i1166 =  (int32_t)0; i1166 <  (int32_t)1; i1166++){
for (uint64_t i1167 =  (int32_t)0; i1167 <  (int32_t)512; i1167++){
Arr4DIdxRowM(tmp544, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i1164,i1165,i1166,i1167) = Arr1DIdxRowM(tmp20, (int32_t)512,i1163);
i1163 = (i1163 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp544,  (int32_t)12);

uint64_t* tmp545 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp545, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp541, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp544, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp544);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp541);

uint64_t* tmp548 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1175;

int64_t i1174;

int64_t i1173;

int64_t i1172;

int64_t i1171;

int64_t i1170;

int64_t i1169;

int64_t i1168;
i1168 =  (int64_t)0;
i1169 =  (int64_t)0;
i1170 =  (int64_t)0;
i1171 =  (int64_t)0;
for (uint64_t i1172 =  (int32_t)0; i1172 <  (int32_t)1; i1172++){
for (uint64_t i1174 =  (int32_t)0; i1174 <  (int32_t)32; i1174++){
for (uint64_t i1175 =  (int32_t)0; i1175 <  (int32_t)32; i1175++){
for (uint64_t i1173 =  (int32_t)0; i1173 <  (int32_t)512; i1173++){
Arr4DIdxRowM(tmp548, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1172,i1173,i1174,i1175) = Arr4DIdxRowM(tmp545, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1168,i1169,i1170,i1171);
i1171 = (i1171 +  (int64_t)1);
if ((i1171 ==  (int64_t)512)) {
i1171 =  (int64_t)0;
i1170 = (i1170 +  (int64_t)1);
if ((i1170 ==  (int64_t)32)) {
i1170 =  (int64_t)0;
i1169 = (i1169 +  (int64_t)1);
if ((i1169 ==  (int64_t)32)) {
i1169 =  (int64_t)0;
i1168 = (i1168 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp545);

uint64_t* tmp550 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1183;

int64_t i1182;

int64_t i1181;

int64_t i1180;

int64_t i1179;

int64_t i1178;

int64_t i1177;

int64_t i1176;
i1176 =  (int64_t)0;
i1177 =  (int64_t)0;
i1178 =  (int64_t)0;
i1179 =  (int64_t)0;
for (uint64_t i1180 =  (int32_t)0; i1180 <  (int32_t)1; i1180++){
for (uint64_t i1183 =  (int32_t)0; i1183 <  (int32_t)512; i1183++){
for (uint64_t i1181 =  (int32_t)0; i1181 <  (int32_t)32; i1181++){
for (uint64_t i1182 =  (int32_t)0; i1182 <  (int32_t)32; i1182++){
Arr4DIdxRowM(tmp550, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1180,i1181,i1182,i1183) = Arr4DIdxRowM(tmp548, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1176,i1177,i1178,i1179);
i1179 = (i1179 +  (int64_t)1);
if ((i1179 ==  (int64_t)32)) {
i1179 =  (int64_t)0;
i1178 = (i1178 +  (int64_t)1);
if ((i1178 ==  (int64_t)32)) {
i1178 =  (int64_t)0;
i1177 = (i1177 +  (int64_t)1);
if ((i1177 ==  (int64_t)512)) {
i1177 =  (int64_t)0;
i1176 = (i1176 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp548);

uint64_t* tmp552 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1191;

int64_t i1190;

int64_t i1189;

int64_t i1188;

int64_t i1187;

int64_t i1186;

int64_t i1185;

int64_t i1184;
i1184 =  (int64_t)0;
i1185 =  (int64_t)0;
i1186 =  (int64_t)0;
i1187 =  (int64_t)0;
for (uint64_t i1188 =  (int32_t)0; i1188 <  (int32_t)1; i1188++){
for (uint64_t i1191 =  (int32_t)0; i1191 <  (int32_t)512; i1191++){
for (uint64_t i1189 =  (int32_t)0; i1189 <  (int32_t)32; i1189++){
for (uint64_t i1190 =  (int32_t)0; i1190 <  (int32_t)32; i1190++){
Arr4DIdxRowM(tmp552, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1188,i1189,i1190,i1191) = Arr4DIdxRowM(tmp497, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1184,i1185,i1186,i1187);
i1187 = (i1187 +  (int64_t)1);
if ((i1187 ==  (int64_t)32)) {
i1187 =  (int64_t)0;
i1186 = (i1186 +  (int64_t)1);
if ((i1186 ==  (int64_t)32)) {
i1186 =  (int64_t)0;
i1185 = (i1185 +  (int64_t)1);
if ((i1185 ==  (int64_t)512)) {
i1185 =  (int64_t)0;
i1184 = (i1184 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp497);
ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp552,  (int32_t)12);

uint64_t* tmp554 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)32; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)32; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp554, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp550, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp552, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp552);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp550);

uint64_t* tmp557 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1199;

int64_t i1198;

int64_t i1197;

int64_t i1196;

int64_t i1195;

int64_t i1194;

int64_t i1193;

int64_t i1192;
i1192 =  (int64_t)0;
i1193 =  (int64_t)0;
i1194 =  (int64_t)0;
i1195 =  (int64_t)0;
for (uint64_t i1196 =  (int32_t)0; i1196 <  (int32_t)1; i1196++){
for (uint64_t i1198 =  (int32_t)0; i1198 <  (int32_t)32; i1198++){
for (uint64_t i1199 =  (int32_t)0; i1199 <  (int32_t)32; i1199++){
for (uint64_t i1197 =  (int32_t)0; i1197 <  (int32_t)512; i1197++){
Arr4DIdxRowM(tmp557, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1196,i1197,i1198,i1199) = Arr4DIdxRowM(tmp554, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1192,i1193,i1194,i1195);
i1195 = (i1195 +  (int64_t)1);
if ((i1195 ==  (int64_t)512)) {
i1195 =  (int64_t)0;
i1194 = (i1194 +  (int64_t)1);
if ((i1194 ==  (int64_t)32)) {
i1194 =  (int64_t)0;
i1193 = (i1193 +  (int64_t)1);
if ((i1193 ==  (int64_t)32)) {
i1193 =  (int64_t)0;
i1192 = (i1192 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp554);

uint64_t* tmp559 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1207;

int64_t i1206;

int64_t i1205;

int64_t i1204;

int64_t i1203;

int64_t i1202;

int64_t i1201;

int64_t i1200;
i1200 =  (int64_t)0;
i1201 =  (int64_t)0;
i1202 =  (int64_t)0;
i1203 =  (int64_t)0;
for (uint64_t i1204 =  (int32_t)0; i1204 <  (int32_t)1; i1204++){
for (uint64_t i1207 =  (int32_t)0; i1207 <  (int32_t)512; i1207++){
for (uint64_t i1205 =  (int32_t)0; i1205 <  (int32_t)32; i1205++){
for (uint64_t i1206 =  (int32_t)0; i1206 <  (int32_t)32; i1206++){
Arr4DIdxRowM(tmp559, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1204,i1205,i1206,i1207) = Arr4DIdxRowM(tmp557, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1200,i1201,i1202,i1203);
i1203 = (i1203 +  (int64_t)1);
if ((i1203 ==  (int64_t)32)) {
i1203 =  (int64_t)0;
i1202 = (i1202 +  (int64_t)1);
if ((i1202 ==  (int64_t)32)) {
i1202 =  (int64_t)0;
i1201 = (i1201 +  (int64_t)1);
if ((i1201 ==  (int64_t)512)) {
i1201 =  (int64_t)0;
i1200 = (i1200 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp557);

uint64_t* tmp561 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp559, tmp561,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp559);

uint64_t* tmp563 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32);

int64_t i1215;

int64_t i1214;

int64_t i1213;

int64_t i1212;

int64_t i1211;

int64_t i1210;

int64_t i1209;

int64_t i1208;
i1208 =  (int64_t)0;
i1209 =  (int64_t)0;
i1210 =  (int64_t)0;
i1211 =  (int64_t)0;
for (uint64_t i1212 =  (int32_t)0; i1212 <  (int32_t)1; i1212++){
for (uint64_t i1214 =  (int32_t)0; i1214 <  (int32_t)32; i1214++){
for (uint64_t i1215 =  (int32_t)0; i1215 <  (int32_t)32; i1215++){
for (uint64_t i1213 =  (int32_t)0; i1213 <  (int32_t)512; i1213++){
Arr4DIdxRowM(tmp563, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1212,i1213,i1214,i1215) = Arr4DIdxRowM(tmp561, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1208,i1209,i1210,i1211);
i1211 = (i1211 +  (int64_t)1);
if ((i1211 ==  (int64_t)512)) {
i1211 =  (int64_t)0;
i1210 = (i1210 +  (int64_t)1);
if ((i1210 ==  (int64_t)32)) {
i1210 =  (int64_t)0;
i1209 = (i1209 +  (int64_t)1);
if ((i1209 ==  (int64_t)32)) {
i1209 =  (int64_t)0;
i1208 = (i1208 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp561);

uint64_t* tmp565 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1223;

int64_t i1222;

int64_t i1221;

int64_t i1220;

int64_t i1219;

int64_t i1218;

int64_t i1217;

int64_t i1216;
i1216 =  (int64_t)0;
i1217 =  (int64_t)0;
i1218 =  (int64_t)0;
i1219 =  (int64_t)0;
for (uint64_t i1220 =  (int32_t)0; i1220 <  (int32_t)1; i1220++){
for (uint64_t i1223 =  (int32_t)0; i1223 <  (int32_t)512; i1223++){
for (uint64_t i1221 =  (int32_t)0; i1221 <  (int32_t)32; i1221++){
for (uint64_t i1222 =  (int32_t)0; i1222 <  (int32_t)32; i1222++){
Arr4DIdxRowM(tmp565, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1220,i1221,i1222,i1223) = Arr4DIdxRowM(tmp563, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1216,i1217,i1218,i1219);
i1219 = (i1219 +  (int64_t)1);
if ((i1219 ==  (int64_t)32)) {
i1219 =  (int64_t)0;
i1218 = (i1218 +  (int64_t)1);
if ((i1218 ==  (int64_t)32)) {
i1218 =  (int64_t)0;
i1217 = (i1217 +  (int64_t)1);
if ((i1217 ==  (int64_t)512)) {
i1217 =  (int64_t)0;
i1216 = (i1216 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp566 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256);

int64_t i1231;

int64_t i1230;

int64_t i1229;

int64_t i1228;

int64_t i1227;

int64_t i1226;

int64_t i1225;

int64_t i1224;
i1224 =  (int64_t)0;
i1225 =  (int64_t)0;
i1226 =  (int64_t)0;
i1227 =  (int64_t)0;
for (uint64_t i1231 =  (int32_t)0; i1231 <  (int32_t)256; i1231++){
for (uint64_t i1230 =  (int32_t)0; i1230 <  (int32_t)512; i1230++){
for (uint64_t i1228 =  (int32_t)0; i1228 <  (int32_t)1; i1228++){
for (uint64_t i1229 =  (int32_t)0; i1229 <  (int32_t)1; i1229++){
Arr4DIdxRowM(tmp566, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)256,i1228,i1229,i1230,i1231) = Arr4DIdxRowM(tmp31, (int32_t)256, (int32_t)512, (int32_t)1, (int32_t)1,i1224,i1225,i1226,i1227);
i1227 = (i1227 +  (int64_t)1);
if ((i1227 ==  (int64_t)1)) {
i1227 =  (int64_t)0;
i1226 = (i1226 +  (int64_t)1);
if ((i1226 ==  (int64_t)1)) {
i1226 =  (int64_t)0;
i1225 = (i1225 +  (int64_t)1);
if ((i1225 ==  (int64_t)512)) {
i1225 =  (int64_t)0;
i1224 = (i1224 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp31);

uint64_t* tmp568 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp565, tmp566, tmp568);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256, tmp566);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp565);

uint64_t* tmp571 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1236;

int64_t i1235;

int64_t i1234;

int64_t i1233;

int64_t i1232;
i1232 =  (int64_t)0;
for (uint64_t i1233 =  (int32_t)0; i1233 <  (int32_t)1; i1233++){
for (uint64_t i1234 =  (int32_t)0; i1234 <  (int32_t)1; i1234++){
for (uint64_t i1235 =  (int32_t)0; i1235 <  (int32_t)1; i1235++){
for (uint64_t i1236 =  (int32_t)0; i1236 <  (int32_t)256; i1236++){
Arr4DIdxRowM(tmp571, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1233,i1234,i1235,i1236) = Arr1DIdxRowM(tmp8, (int32_t)256,i1232);
i1232 = (i1232 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp571,  (int32_t)12);

uint64_t* tmp572 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp572, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp568, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp571, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp571);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp568);

uint64_t* tmp575 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1244;

int64_t i1243;

int64_t i1242;

int64_t i1241;

int64_t i1240;

int64_t i1239;

int64_t i1238;

int64_t i1237;
i1237 =  (int64_t)0;
i1238 =  (int64_t)0;
i1239 =  (int64_t)0;
i1240 =  (int64_t)0;
for (uint64_t i1241 =  (int32_t)0; i1241 <  (int32_t)1; i1241++){
for (uint64_t i1243 =  (int32_t)0; i1243 <  (int32_t)16; i1243++){
for (uint64_t i1244 =  (int32_t)0; i1244 <  (int32_t)16; i1244++){
for (uint64_t i1242 =  (int32_t)0; i1242 <  (int32_t)256; i1242++){
Arr4DIdxRowM(tmp575, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1241,i1242,i1243,i1244) = Arr4DIdxRowM(tmp572, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1237,i1238,i1239,i1240);
i1240 = (i1240 +  (int64_t)1);
if ((i1240 ==  (int64_t)256)) {
i1240 =  (int64_t)0;
i1239 = (i1239 +  (int64_t)1);
if ((i1239 ==  (int64_t)16)) {
i1239 =  (int64_t)0;
i1238 = (i1238 +  (int64_t)1);
if ((i1238 ==  (int64_t)16)) {
i1238 =  (int64_t)0;
i1237 = (i1237 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp572);

uint64_t* tmp577 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1252;

int64_t i1251;

int64_t i1250;

int64_t i1249;

int64_t i1248;

int64_t i1247;

int64_t i1246;

int64_t i1245;
i1245 =  (int64_t)0;
i1246 =  (int64_t)0;
i1247 =  (int64_t)0;
i1248 =  (int64_t)0;
for (uint64_t i1249 =  (int32_t)0; i1249 <  (int32_t)1; i1249++){
for (uint64_t i1252 =  (int32_t)0; i1252 <  (int32_t)256; i1252++){
for (uint64_t i1250 =  (int32_t)0; i1250 <  (int32_t)16; i1250++){
for (uint64_t i1251 =  (int32_t)0; i1251 <  (int32_t)16; i1251++){
Arr4DIdxRowM(tmp577, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1249,i1250,i1251,i1252) = Arr4DIdxRowM(tmp575, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1245,i1246,i1247,i1248);
i1248 = (i1248 +  (int64_t)1);
if ((i1248 ==  (int64_t)16)) {
i1248 =  (int64_t)0;
i1247 = (i1247 +  (int64_t)1);
if ((i1247 ==  (int64_t)16)) {
i1247 =  (int64_t)0;
i1246 = (i1246 +  (int64_t)1);
if ((i1246 ==  (int64_t)256)) {
i1246 =  (int64_t)0;
i1245 = (i1245 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp575);

uint64_t* tmp579 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp577, tmp579,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp577);

uint64_t* tmp581 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1260;

int64_t i1259;

int64_t i1258;

int64_t i1257;

int64_t i1256;

int64_t i1255;

int64_t i1254;

int64_t i1253;
i1253 =  (int64_t)0;
i1254 =  (int64_t)0;
i1255 =  (int64_t)0;
i1256 =  (int64_t)0;
for (uint64_t i1257 =  (int32_t)0; i1257 <  (int32_t)1; i1257++){
for (uint64_t i1259 =  (int32_t)0; i1259 <  (int32_t)16; i1259++){
for (uint64_t i1260 =  (int32_t)0; i1260 <  (int32_t)16; i1260++){
for (uint64_t i1258 =  (int32_t)0; i1258 <  (int32_t)256; i1258++){
Arr4DIdxRowM(tmp581, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1257,i1258,i1259,i1260) = Arr4DIdxRowM(tmp579, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1253,i1254,i1255,i1256);
i1256 = (i1256 +  (int64_t)1);
if ((i1256 ==  (int64_t)256)) {
i1256 =  (int64_t)0;
i1255 = (i1255 +  (int64_t)1);
if ((i1255 ==  (int64_t)16)) {
i1255 =  (int64_t)0;
i1254 = (i1254 +  (int64_t)1);
if ((i1254 ==  (int64_t)16)) {
i1254 =  (int64_t)0;
i1253 = (i1253 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp579);

uint64_t* tmp583 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1268;

int64_t i1267;

int64_t i1266;

int64_t i1265;

int64_t i1264;

int64_t i1263;

int64_t i1262;

int64_t i1261;
i1261 =  (int64_t)0;
i1262 =  (int64_t)0;
i1263 =  (int64_t)0;
i1264 =  (int64_t)0;
for (uint64_t i1265 =  (int32_t)0; i1265 <  (int32_t)1; i1265++){
for (uint64_t i1268 =  (int32_t)0; i1268 <  (int32_t)256; i1268++){
for (uint64_t i1266 =  (int32_t)0; i1266 <  (int32_t)16; i1266++){
for (uint64_t i1267 =  (int32_t)0; i1267 <  (int32_t)16; i1267++){
Arr4DIdxRowM(tmp583, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1265,i1266,i1267,i1268) = Arr4DIdxRowM(tmp581, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1261,i1262,i1263,i1264);
i1264 = (i1264 +  (int64_t)1);
if ((i1264 ==  (int64_t)16)) {
i1264 =  (int64_t)0;
i1263 = (i1263 +  (int64_t)1);
if ((i1263 ==  (int64_t)16)) {
i1263 =  (int64_t)0;
i1262 = (i1262 +  (int64_t)1);
if ((i1262 ==  (int64_t)256)) {
i1262 =  (int64_t)0;
i1261 = (i1261 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp581);

uint64_t* tmp585 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i1276;

int64_t i1275;

int64_t i1274;

int64_t i1273;

int64_t i1272;

int64_t i1271;

int64_t i1270;

int64_t i1269;
i1269 =  (int64_t)0;
i1270 =  (int64_t)0;
i1271 =  (int64_t)0;
i1272 =  (int64_t)0;
for (uint64_t i1276 =  (int32_t)0; i1276 <  (int32_t)256; i1276++){
for (uint64_t i1275 =  (int32_t)0; i1275 <  (int32_t)256; i1275++){
for (uint64_t i1273 =  (int32_t)0; i1273 <  (int32_t)3; i1273++){
for (uint64_t i1274 =  (int32_t)0; i1274 <  (int32_t)3; i1274++){
Arr4DIdxRowM(tmp585, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i1273,i1274,i1275,i1276) = Arr4DIdxRowM(tmp32, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i1269,i1270,i1271,i1272);
i1272 = (i1272 +  (int64_t)1);
if ((i1272 ==  (int64_t)3)) {
i1272 =  (int64_t)0;
i1271 = (i1271 +  (int64_t)1);
if ((i1271 ==  (int64_t)3)) {
i1271 =  (int64_t)0;
i1270 = (i1270 +  (int64_t)1);
if ((i1270 ==  (int64_t)256)) {
i1270 =  (int64_t)0;
i1269 = (i1269 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp32);

uint64_t* tmp587 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  tmp583, tmp585, tmp587);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp585);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp583);

uint64_t* tmp590 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1281;

int64_t i1280;

int64_t i1279;

int64_t i1278;

int64_t i1277;
i1277 =  (int64_t)0;
for (uint64_t i1278 =  (int32_t)0; i1278 <  (int32_t)1; i1278++){
for (uint64_t i1279 =  (int32_t)0; i1279 <  (int32_t)1; i1279++){
for (uint64_t i1280 =  (int32_t)0; i1280 <  (int32_t)1; i1280++){
for (uint64_t i1281 =  (int32_t)0; i1281 <  (int32_t)256; i1281++){
Arr4DIdxRowM(tmp590, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1278,i1279,i1280,i1281) = Arr1DIdxRowM(tmp8, (int32_t)256,i1277);
i1277 = (i1277 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp590,  (int32_t)12);

uint64_t* tmp591 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp591, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp587, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp590, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp587);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp590);

uint64_t* tmp594 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1289;

int64_t i1288;

int64_t i1287;

int64_t i1286;

int64_t i1285;

int64_t i1284;

int64_t i1283;

int64_t i1282;
i1282 =  (int64_t)0;
i1283 =  (int64_t)0;
i1284 =  (int64_t)0;
i1285 =  (int64_t)0;
for (uint64_t i1286 =  (int32_t)0; i1286 <  (int32_t)1; i1286++){
for (uint64_t i1288 =  (int32_t)0; i1288 <  (int32_t)16; i1288++){
for (uint64_t i1289 =  (int32_t)0; i1289 <  (int32_t)16; i1289++){
for (uint64_t i1287 =  (int32_t)0; i1287 <  (int32_t)256; i1287++){
Arr4DIdxRowM(tmp594, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1286,i1287,i1288,i1289) = Arr4DIdxRowM(tmp591, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1282,i1283,i1284,i1285);
i1285 = (i1285 +  (int64_t)1);
if ((i1285 ==  (int64_t)256)) {
i1285 =  (int64_t)0;
i1284 = (i1284 +  (int64_t)1);
if ((i1284 ==  (int64_t)16)) {
i1284 =  (int64_t)0;
i1283 = (i1283 +  (int64_t)1);
if ((i1283 ==  (int64_t)16)) {
i1283 =  (int64_t)0;
i1282 = (i1282 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp591);

uint64_t* tmp596 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1297;

int64_t i1296;

int64_t i1295;

int64_t i1294;

int64_t i1293;

int64_t i1292;

int64_t i1291;

int64_t i1290;
i1290 =  (int64_t)0;
i1291 =  (int64_t)0;
i1292 =  (int64_t)0;
i1293 =  (int64_t)0;
for (uint64_t i1294 =  (int32_t)0; i1294 <  (int32_t)1; i1294++){
for (uint64_t i1297 =  (int32_t)0; i1297 <  (int32_t)256; i1297++){
for (uint64_t i1295 =  (int32_t)0; i1295 <  (int32_t)16; i1295++){
for (uint64_t i1296 =  (int32_t)0; i1296 <  (int32_t)16; i1296++){
Arr4DIdxRowM(tmp596, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1294,i1295,i1296,i1297) = Arr4DIdxRowM(tmp594, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1290,i1291,i1292,i1293);
i1293 = (i1293 +  (int64_t)1);
if ((i1293 ==  (int64_t)16)) {
i1293 =  (int64_t)0;
i1292 = (i1292 +  (int64_t)1);
if ((i1292 ==  (int64_t)16)) {
i1292 =  (int64_t)0;
i1291 = (i1291 +  (int64_t)1);
if ((i1291 ==  (int64_t)256)) {
i1291 =  (int64_t)0;
i1290 = (i1290 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp594);

uint64_t* tmp598 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp596, tmp598,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp596);

uint64_t* tmp600 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1305;

int64_t i1304;

int64_t i1303;

int64_t i1302;

int64_t i1301;

int64_t i1300;

int64_t i1299;

int64_t i1298;
i1298 =  (int64_t)0;
i1299 =  (int64_t)0;
i1300 =  (int64_t)0;
i1301 =  (int64_t)0;
for (uint64_t i1302 =  (int32_t)0; i1302 <  (int32_t)1; i1302++){
for (uint64_t i1304 =  (int32_t)0; i1304 <  (int32_t)16; i1304++){
for (uint64_t i1305 =  (int32_t)0; i1305 <  (int32_t)16; i1305++){
for (uint64_t i1303 =  (int32_t)0; i1303 <  (int32_t)256; i1303++){
Arr4DIdxRowM(tmp600, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1302,i1303,i1304,i1305) = Arr4DIdxRowM(tmp598, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1298,i1299,i1300,i1301);
i1301 = (i1301 +  (int64_t)1);
if ((i1301 ==  (int64_t)256)) {
i1301 =  (int64_t)0;
i1300 = (i1300 +  (int64_t)1);
if ((i1300 ==  (int64_t)16)) {
i1300 =  (int64_t)0;
i1299 = (i1299 +  (int64_t)1);
if ((i1299 ==  (int64_t)16)) {
i1299 =  (int64_t)0;
i1298 = (i1298 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp598);

uint64_t* tmp602 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1313;

int64_t i1312;

int64_t i1311;

int64_t i1310;

int64_t i1309;

int64_t i1308;

int64_t i1307;

int64_t i1306;
i1306 =  (int64_t)0;
i1307 =  (int64_t)0;
i1308 =  (int64_t)0;
i1309 =  (int64_t)0;
for (uint64_t i1310 =  (int32_t)0; i1310 <  (int32_t)1; i1310++){
for (uint64_t i1313 =  (int32_t)0; i1313 <  (int32_t)256; i1313++){
for (uint64_t i1311 =  (int32_t)0; i1311 <  (int32_t)16; i1311++){
for (uint64_t i1312 =  (int32_t)0; i1312 <  (int32_t)16; i1312++){
Arr4DIdxRowM(tmp602, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1310,i1311,i1312,i1313) = Arr4DIdxRowM(tmp600, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1306,i1307,i1308,i1309);
i1309 = (i1309 +  (int64_t)1);
if ((i1309 ==  (int64_t)16)) {
i1309 =  (int64_t)0;
i1308 = (i1308 +  (int64_t)1);
if ((i1308 ==  (int64_t)16)) {
i1308 =  (int64_t)0;
i1307 = (i1307 +  (int64_t)1);
if ((i1307 ==  (int64_t)256)) {
i1307 =  (int64_t)0;
i1306 = (i1306 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp600);

uint64_t* tmp604 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i1321;

int64_t i1320;

int64_t i1319;

int64_t i1318;

int64_t i1317;

int64_t i1316;

int64_t i1315;

int64_t i1314;
i1314 =  (int64_t)0;
i1315 =  (int64_t)0;
i1316 =  (int64_t)0;
i1317 =  (int64_t)0;
for (uint64_t i1321 =  (int32_t)0; i1321 <  (int32_t)1024; i1321++){
for (uint64_t i1320 =  (int32_t)0; i1320 <  (int32_t)256; i1320++){
for (uint64_t i1318 =  (int32_t)0; i1318 <  (int32_t)1; i1318++){
for (uint64_t i1319 =  (int32_t)0; i1319 <  (int32_t)1; i1319++){
Arr4DIdxRowM(tmp604, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i1318,i1319,i1320,i1321) = Arr4DIdxRowM(tmp33, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i1314,i1315,i1316,i1317);
i1317 = (i1317 +  (int64_t)1);
if ((i1317 ==  (int64_t)1)) {
i1317 =  (int64_t)0;
i1316 = (i1316 +  (int64_t)1);
if ((i1316 ==  (int64_t)1)) {
i1316 =  (int64_t)0;
i1315 = (i1315 +  (int64_t)1);
if ((i1315 ==  (int64_t)256)) {
i1315 =  (int64_t)0;
i1314 = (i1314 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp33);

uint64_t* tmp606 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp602, tmp604, tmp606);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp602);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp604);

uint64_t* tmp609 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1326;

int64_t i1325;

int64_t i1324;

int64_t i1323;

int64_t i1322;
i1322 =  (int64_t)0;
for (uint64_t i1323 =  (int32_t)0; i1323 <  (int32_t)1; i1323++){
for (uint64_t i1324 =  (int32_t)0; i1324 <  (int32_t)1; i1324++){
for (uint64_t i1325 =  (int32_t)0; i1325 <  (int32_t)1; i1325++){
for (uint64_t i1326 =  (int32_t)0; i1326 <  (int32_t)1024; i1326++){
Arr4DIdxRowM(tmp609, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1323,i1324,i1325,i1326) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1322);
i1322 = (i1322 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp609,  (int32_t)12);

uint64_t* tmp610 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp610, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp606, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp609, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp609);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp606);

uint64_t* tmp613 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1334;

int64_t i1333;

int64_t i1332;

int64_t i1331;

int64_t i1330;

int64_t i1329;

int64_t i1328;

int64_t i1327;
i1327 =  (int64_t)0;
i1328 =  (int64_t)0;
i1329 =  (int64_t)0;
i1330 =  (int64_t)0;
for (uint64_t i1331 =  (int32_t)0; i1331 <  (int32_t)1; i1331++){
for (uint64_t i1333 =  (int32_t)0; i1333 <  (int32_t)16; i1333++){
for (uint64_t i1334 =  (int32_t)0; i1334 <  (int32_t)16; i1334++){
for (uint64_t i1332 =  (int32_t)0; i1332 <  (int32_t)1024; i1332++){
Arr4DIdxRowM(tmp613, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1331,i1332,i1333,i1334) = Arr4DIdxRowM(tmp610, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1327,i1328,i1329,i1330);
i1330 = (i1330 +  (int64_t)1);
if ((i1330 ==  (int64_t)1024)) {
i1330 =  (int64_t)0;
i1329 = (i1329 +  (int64_t)1);
if ((i1329 ==  (int64_t)16)) {
i1329 =  (int64_t)0;
i1328 = (i1328 +  (int64_t)1);
if ((i1328 ==  (int64_t)16)) {
i1328 =  (int64_t)0;
i1327 = (i1327 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp610);

uint64_t* tmp615 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512);

int64_t i1342;

int64_t i1341;

int64_t i1340;

int64_t i1339;

int64_t i1338;

int64_t i1337;

int64_t i1336;

int64_t i1335;
i1335 =  (int64_t)0;
i1336 =  (int64_t)0;
i1337 =  (int64_t)0;
i1338 =  (int64_t)0;
for (uint64_t i1339 =  (int32_t)0; i1339 <  (int32_t)1; i1339++){
for (uint64_t i1342 =  (int32_t)0; i1342 <  (int32_t)512; i1342++){
for (uint64_t i1340 =  (int32_t)0; i1340 <  (int32_t)32; i1340++){
for (uint64_t i1341 =  (int32_t)0; i1341 <  (int32_t)32; i1341++){
Arr4DIdxRowM(tmp615, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)512,i1339,i1340,i1341,i1342) = Arr4DIdxRowM(tmp563, (int32_t)1, (int32_t)512, (int32_t)32, (int32_t)32,i1335,i1336,i1337,i1338);
i1338 = (i1338 +  (int64_t)1);
if ((i1338 ==  (int64_t)32)) {
i1338 =  (int64_t)0;
i1337 = (i1337 +  (int64_t)1);
if ((i1337 ==  (int64_t)32)) {
i1337 =  (int64_t)0;
i1336 = (i1336 +  (int64_t)1);
if ((i1336 ==  (int64_t)512)) {
i1336 =  (int64_t)0;
i1335 = (i1335 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)32,  (int32_t)32, tmp563);

uint64_t* tmp617 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1024);

int64_t i1350;

int64_t i1349;

int64_t i1348;

int64_t i1347;

int64_t i1346;

int64_t i1345;

int64_t i1344;

int64_t i1343;
i1343 =  (int64_t)0;
i1344 =  (int64_t)0;
i1345 =  (int64_t)0;
i1346 =  (int64_t)0;
for (uint64_t i1350 =  (int32_t)0; i1350 <  (int32_t)1024; i1350++){
for (uint64_t i1349 =  (int32_t)0; i1349 <  (int32_t)512; i1349++){
for (uint64_t i1347 =  (int32_t)0; i1347 <  (int32_t)1; i1347++){
for (uint64_t i1348 =  (int32_t)0; i1348 <  (int32_t)1; i1348++){
Arr4DIdxRowM(tmp617, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)1024,i1347,i1348,i1349,i1350) = Arr4DIdxRowM(tmp35, (int32_t)1024, (int32_t)512, (int32_t)1, (int32_t)1,i1343,i1344,i1345,i1346);
i1346 = (i1346 +  (int64_t)1);
if ((i1346 ==  (int64_t)1)) {
i1346 =  (int64_t)0;
i1345 = (i1345 +  (int64_t)1);
if ((i1345 ==  (int64_t)1)) {
i1345 =  (int64_t)0;
i1344 = (i1344 +  (int64_t)1);
if ((i1344 ==  (int64_t)512)) {
i1344 =  (int64_t)0;
i1343 = (i1343 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp35);

uint64_t* tmp619 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp615, tmp617, tmp619);
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)512, tmp615);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1024, tmp617);

uint64_t* tmp622 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1355;

int64_t i1354;

int64_t i1353;

int64_t i1352;

int64_t i1351;
i1351 =  (int64_t)0;
for (uint64_t i1352 =  (int32_t)0; i1352 <  (int32_t)1; i1352++){
for (uint64_t i1353 =  (int32_t)0; i1353 <  (int32_t)1; i1353++){
for (uint64_t i1354 =  (int32_t)0; i1354 <  (int32_t)1; i1354++){
for (uint64_t i1355 =  (int32_t)0; i1355 <  (int32_t)1024; i1355++){
Arr4DIdxRowM(tmp622, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1352,i1353,i1354,i1355) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1351);
i1351 = (i1351 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp622,  (int32_t)12);

uint64_t* tmp623 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp623, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp619, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp622, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp619);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp622);

uint64_t* tmp626 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1363;

int64_t i1362;

int64_t i1361;

int64_t i1360;

int64_t i1359;

int64_t i1358;

int64_t i1357;

int64_t i1356;
i1356 =  (int64_t)0;
i1357 =  (int64_t)0;
i1358 =  (int64_t)0;
i1359 =  (int64_t)0;
for (uint64_t i1360 =  (int32_t)0; i1360 <  (int32_t)1; i1360++){
for (uint64_t i1362 =  (int32_t)0; i1362 <  (int32_t)16; i1362++){
for (uint64_t i1363 =  (int32_t)0; i1363 <  (int32_t)16; i1363++){
for (uint64_t i1361 =  (int32_t)0; i1361 <  (int32_t)1024; i1361++){
Arr4DIdxRowM(tmp626, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1360,i1361,i1362,i1363) = Arr4DIdxRowM(tmp623, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1356,i1357,i1358,i1359);
i1359 = (i1359 +  (int64_t)1);
if ((i1359 ==  (int64_t)1024)) {
i1359 =  (int64_t)0;
i1358 = (i1358 +  (int64_t)1);
if ((i1358 ==  (int64_t)16)) {
i1358 =  (int64_t)0;
i1357 = (i1357 +  (int64_t)1);
if ((i1357 ==  (int64_t)16)) {
i1357 =  (int64_t)0;
i1356 = (i1356 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp623);

uint64_t* tmp628 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1371;

int64_t i1370;

int64_t i1369;

int64_t i1368;

int64_t i1367;

int64_t i1366;

int64_t i1365;

int64_t i1364;
i1364 =  (int64_t)0;
i1365 =  (int64_t)0;
i1366 =  (int64_t)0;
i1367 =  (int64_t)0;
for (uint64_t i1368 =  (int32_t)0; i1368 <  (int32_t)1; i1368++){
for (uint64_t i1371 =  (int32_t)0; i1371 <  (int32_t)1024; i1371++){
for (uint64_t i1369 =  (int32_t)0; i1369 <  (int32_t)16; i1369++){
for (uint64_t i1370 =  (int32_t)0; i1370 <  (int32_t)16; i1370++){
Arr4DIdxRowM(tmp628, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1368,i1369,i1370,i1371) = Arr4DIdxRowM(tmp613, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1364,i1365,i1366,i1367);
i1367 = (i1367 +  (int64_t)1);
if ((i1367 ==  (int64_t)16)) {
i1367 =  (int64_t)0;
i1366 = (i1366 +  (int64_t)1);
if ((i1366 ==  (int64_t)16)) {
i1366 =  (int64_t)0;
i1365 = (i1365 +  (int64_t)1);
if ((i1365 ==  (int64_t)1024)) {
i1365 =  (int64_t)0;
i1364 = (i1364 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp613);

uint64_t* tmp630 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1379;

int64_t i1378;

int64_t i1377;

int64_t i1376;

int64_t i1375;

int64_t i1374;

int64_t i1373;

int64_t i1372;
i1372 =  (int64_t)0;
i1373 =  (int64_t)0;
i1374 =  (int64_t)0;
i1375 =  (int64_t)0;
for (uint64_t i1376 =  (int32_t)0; i1376 <  (int32_t)1; i1376++){
for (uint64_t i1379 =  (int32_t)0; i1379 <  (int32_t)1024; i1379++){
for (uint64_t i1377 =  (int32_t)0; i1377 <  (int32_t)16; i1377++){
for (uint64_t i1378 =  (int32_t)0; i1378 <  (int32_t)16; i1378++){
Arr4DIdxRowM(tmp630, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1376,i1377,i1378,i1379) = Arr4DIdxRowM(tmp626, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1372,i1373,i1374,i1375);
i1375 = (i1375 +  (int64_t)1);
if ((i1375 ==  (int64_t)16)) {
i1375 =  (int64_t)0;
i1374 = (i1374 +  (int64_t)1);
if ((i1374 ==  (int64_t)16)) {
i1374 =  (int64_t)0;
i1373 = (i1373 +  (int64_t)1);
if ((i1373 ==  (int64_t)1024)) {
i1373 =  (int64_t)0;
i1372 = (i1372 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp626);

uint64_t* tmp632 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp632, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp628, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp630, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp628);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp630);

uint64_t* tmp635 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1387;

int64_t i1386;

int64_t i1385;

int64_t i1384;

int64_t i1383;

int64_t i1382;

int64_t i1381;

int64_t i1380;
i1380 =  (int64_t)0;
i1381 =  (int64_t)0;
i1382 =  (int64_t)0;
i1383 =  (int64_t)0;
for (uint64_t i1384 =  (int32_t)0; i1384 <  (int32_t)1; i1384++){
for (uint64_t i1386 =  (int32_t)0; i1386 <  (int32_t)16; i1386++){
for (uint64_t i1387 =  (int32_t)0; i1387 <  (int32_t)16; i1387++){
for (uint64_t i1385 =  (int32_t)0; i1385 <  (int32_t)1024; i1385++){
Arr4DIdxRowM(tmp635, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1384,i1385,i1386,i1387) = Arr4DIdxRowM(tmp632, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1380,i1381,i1382,i1383);
i1383 = (i1383 +  (int64_t)1);
if ((i1383 ==  (int64_t)1024)) {
i1383 =  (int64_t)0;
i1382 = (i1382 +  (int64_t)1);
if ((i1382 ==  (int64_t)16)) {
i1382 =  (int64_t)0;
i1381 = (i1381 +  (int64_t)1);
if ((i1381 ==  (int64_t)16)) {
i1381 =  (int64_t)0;
i1380 = (i1380 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp632);

uint64_t* tmp637 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1395;

int64_t i1394;

int64_t i1393;

int64_t i1392;

int64_t i1391;

int64_t i1390;

int64_t i1389;

int64_t i1388;
i1388 =  (int64_t)0;
i1389 =  (int64_t)0;
i1390 =  (int64_t)0;
i1391 =  (int64_t)0;
for (uint64_t i1392 =  (int32_t)0; i1392 <  (int32_t)1; i1392++){
for (uint64_t i1395 =  (int32_t)0; i1395 <  (int32_t)1024; i1395++){
for (uint64_t i1393 =  (int32_t)0; i1393 <  (int32_t)16; i1393++){
for (uint64_t i1394 =  (int32_t)0; i1394 <  (int32_t)16; i1394++){
Arr4DIdxRowM(tmp637, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1392,i1393,i1394,i1395) = Arr4DIdxRowM(tmp635, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1388,i1389,i1390,i1391);
i1391 = (i1391 +  (int64_t)1);
if ((i1391 ==  (int64_t)16)) {
i1391 =  (int64_t)0;
i1390 = (i1390 +  (int64_t)1);
if ((i1390 ==  (int64_t)16)) {
i1390 =  (int64_t)0;
i1389 = (i1389 +  (int64_t)1);
if ((i1389 ==  (int64_t)1024)) {
i1389 =  (int64_t)0;
i1388 = (i1388 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp635);

uint64_t* tmp639 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp637, tmp639,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp637);

uint64_t* tmp641 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1403;

int64_t i1402;

int64_t i1401;

int64_t i1400;

int64_t i1399;

int64_t i1398;

int64_t i1397;

int64_t i1396;
i1396 =  (int64_t)0;
i1397 =  (int64_t)0;
i1398 =  (int64_t)0;
i1399 =  (int64_t)0;
for (uint64_t i1400 =  (int32_t)0; i1400 <  (int32_t)1; i1400++){
for (uint64_t i1402 =  (int32_t)0; i1402 <  (int32_t)16; i1402++){
for (uint64_t i1403 =  (int32_t)0; i1403 <  (int32_t)16; i1403++){
for (uint64_t i1401 =  (int32_t)0; i1401 <  (int32_t)1024; i1401++){
Arr4DIdxRowM(tmp641, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1400,i1401,i1402,i1403) = Arr4DIdxRowM(tmp639, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1396,i1397,i1398,i1399);
i1399 = (i1399 +  (int64_t)1);
if ((i1399 ==  (int64_t)1024)) {
i1399 =  (int64_t)0;
i1398 = (i1398 +  (int64_t)1);
if ((i1398 ==  (int64_t)16)) {
i1398 =  (int64_t)0;
i1397 = (i1397 +  (int64_t)1);
if ((i1397 ==  (int64_t)16)) {
i1397 =  (int64_t)0;
i1396 = (i1396 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp639);

uint64_t* tmp643 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1411;

int64_t i1410;

int64_t i1409;

int64_t i1408;

int64_t i1407;

int64_t i1406;

int64_t i1405;

int64_t i1404;
i1404 =  (int64_t)0;
i1405 =  (int64_t)0;
i1406 =  (int64_t)0;
i1407 =  (int64_t)0;
for (uint64_t i1408 =  (int32_t)0; i1408 <  (int32_t)1; i1408++){
for (uint64_t i1411 =  (int32_t)0; i1411 <  (int32_t)1024; i1411++){
for (uint64_t i1409 =  (int32_t)0; i1409 <  (int32_t)16; i1409++){
for (uint64_t i1410 =  (int32_t)0; i1410 <  (int32_t)16; i1410++){
Arr4DIdxRowM(tmp643, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1408,i1409,i1410,i1411) = Arr4DIdxRowM(tmp641, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1404,i1405,i1406,i1407);
i1407 = (i1407 +  (int64_t)1);
if ((i1407 ==  (int64_t)16)) {
i1407 =  (int64_t)0;
i1406 = (i1406 +  (int64_t)1);
if ((i1406 ==  (int64_t)16)) {
i1406 =  (int64_t)0;
i1405 = (i1405 +  (int64_t)1);
if ((i1405 ==  (int64_t)1024)) {
i1405 =  (int64_t)0;
i1404 = (i1404 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp644 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);

int64_t i1419;

int64_t i1418;

int64_t i1417;

int64_t i1416;

int64_t i1415;

int64_t i1414;

int64_t i1413;

int64_t i1412;
i1412 =  (int64_t)0;
i1413 =  (int64_t)0;
i1414 =  (int64_t)0;
i1415 =  (int64_t)0;
for (uint64_t i1419 =  (int32_t)0; i1419 <  (int32_t)256; i1419++){
for (uint64_t i1418 =  (int32_t)0; i1418 <  (int32_t)1024; i1418++){
for (uint64_t i1416 =  (int32_t)0; i1416 <  (int32_t)1; i1416++){
for (uint64_t i1417 =  (int32_t)0; i1417 <  (int32_t)1; i1417++){
Arr4DIdxRowM(tmp644, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)256,i1416,i1417,i1418,i1419) = Arr4DIdxRowM(tmp36, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i1412,i1413,i1414,i1415);
i1415 = (i1415 +  (int64_t)1);
if ((i1415 ==  (int64_t)1)) {
i1415 =  (int64_t)0;
i1414 = (i1414 +  (int64_t)1);
if ((i1414 ==  (int64_t)1)) {
i1414 =  (int64_t)0;
i1413 = (i1413 +  (int64_t)1);
if ((i1413 ==  (int64_t)1024)) {
i1413 =  (int64_t)0;
i1412 = (i1412 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp36);

uint64_t* tmp646 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp643, tmp644, tmp646);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp644);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp643);

uint64_t* tmp649 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1424;

int64_t i1423;

int64_t i1422;

int64_t i1421;

int64_t i1420;
i1420 =  (int64_t)0;
for (uint64_t i1421 =  (int32_t)0; i1421 <  (int32_t)1; i1421++){
for (uint64_t i1422 =  (int32_t)0; i1422 <  (int32_t)1; i1422++){
for (uint64_t i1423 =  (int32_t)0; i1423 <  (int32_t)1; i1423++){
for (uint64_t i1424 =  (int32_t)0; i1424 <  (int32_t)256; i1424++){
Arr4DIdxRowM(tmp649, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1421,i1422,i1423,i1424) = Arr1DIdxRowM(tmp8, (int32_t)256,i1420);
i1420 = (i1420 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp649,  (int32_t)12);

uint64_t* tmp650 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp650, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp646, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp649, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp646);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp649);

uint64_t* tmp653 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1432;

int64_t i1431;

int64_t i1430;

int64_t i1429;

int64_t i1428;

int64_t i1427;

int64_t i1426;

int64_t i1425;
i1425 =  (int64_t)0;
i1426 =  (int64_t)0;
i1427 =  (int64_t)0;
i1428 =  (int64_t)0;
for (uint64_t i1429 =  (int32_t)0; i1429 <  (int32_t)1; i1429++){
for (uint64_t i1431 =  (int32_t)0; i1431 <  (int32_t)16; i1431++){
for (uint64_t i1432 =  (int32_t)0; i1432 <  (int32_t)16; i1432++){
for (uint64_t i1430 =  (int32_t)0; i1430 <  (int32_t)256; i1430++){
Arr4DIdxRowM(tmp653, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1429,i1430,i1431,i1432) = Arr4DIdxRowM(tmp650, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1425,i1426,i1427,i1428);
i1428 = (i1428 +  (int64_t)1);
if ((i1428 ==  (int64_t)256)) {
i1428 =  (int64_t)0;
i1427 = (i1427 +  (int64_t)1);
if ((i1427 ==  (int64_t)16)) {
i1427 =  (int64_t)0;
i1426 = (i1426 +  (int64_t)1);
if ((i1426 ==  (int64_t)16)) {
i1426 =  (int64_t)0;
i1425 = (i1425 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp650);

uint64_t* tmp655 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1440;

int64_t i1439;

int64_t i1438;

int64_t i1437;

int64_t i1436;

int64_t i1435;

int64_t i1434;

int64_t i1433;
i1433 =  (int64_t)0;
i1434 =  (int64_t)0;
i1435 =  (int64_t)0;
i1436 =  (int64_t)0;
for (uint64_t i1437 =  (int32_t)0; i1437 <  (int32_t)1; i1437++){
for (uint64_t i1440 =  (int32_t)0; i1440 <  (int32_t)256; i1440++){
for (uint64_t i1438 =  (int32_t)0; i1438 <  (int32_t)16; i1438++){
for (uint64_t i1439 =  (int32_t)0; i1439 <  (int32_t)16; i1439++){
Arr4DIdxRowM(tmp655, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1437,i1438,i1439,i1440) = Arr4DIdxRowM(tmp653, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1433,i1434,i1435,i1436);
i1436 = (i1436 +  (int64_t)1);
if ((i1436 ==  (int64_t)16)) {
i1436 =  (int64_t)0;
i1435 = (i1435 +  (int64_t)1);
if ((i1435 ==  (int64_t)16)) {
i1435 =  (int64_t)0;
i1434 = (i1434 +  (int64_t)1);
if ((i1434 ==  (int64_t)256)) {
i1434 =  (int64_t)0;
i1433 = (i1433 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp653);

uint64_t* tmp657 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp655, tmp657,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp655);

uint64_t* tmp659 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1448;

int64_t i1447;

int64_t i1446;

int64_t i1445;

int64_t i1444;

int64_t i1443;

int64_t i1442;

int64_t i1441;
i1441 =  (int64_t)0;
i1442 =  (int64_t)0;
i1443 =  (int64_t)0;
i1444 =  (int64_t)0;
for (uint64_t i1445 =  (int32_t)0; i1445 <  (int32_t)1; i1445++){
for (uint64_t i1447 =  (int32_t)0; i1447 <  (int32_t)16; i1447++){
for (uint64_t i1448 =  (int32_t)0; i1448 <  (int32_t)16; i1448++){
for (uint64_t i1446 =  (int32_t)0; i1446 <  (int32_t)256; i1446++){
Arr4DIdxRowM(tmp659, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1445,i1446,i1447,i1448) = Arr4DIdxRowM(tmp657, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1441,i1442,i1443,i1444);
i1444 = (i1444 +  (int64_t)1);
if ((i1444 ==  (int64_t)256)) {
i1444 =  (int64_t)0;
i1443 = (i1443 +  (int64_t)1);
if ((i1443 ==  (int64_t)16)) {
i1443 =  (int64_t)0;
i1442 = (i1442 +  (int64_t)1);
if ((i1442 ==  (int64_t)16)) {
i1442 =  (int64_t)0;
i1441 = (i1441 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp657);

uint64_t* tmp661 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1456;

int64_t i1455;

int64_t i1454;

int64_t i1453;

int64_t i1452;

int64_t i1451;

int64_t i1450;

int64_t i1449;
i1449 =  (int64_t)0;
i1450 =  (int64_t)0;
i1451 =  (int64_t)0;
i1452 =  (int64_t)0;
for (uint64_t i1453 =  (int32_t)0; i1453 <  (int32_t)1; i1453++){
for (uint64_t i1456 =  (int32_t)0; i1456 <  (int32_t)256; i1456++){
for (uint64_t i1454 =  (int32_t)0; i1454 <  (int32_t)16; i1454++){
for (uint64_t i1455 =  (int32_t)0; i1455 <  (int32_t)16; i1455++){
Arr4DIdxRowM(tmp661, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1453,i1454,i1455,i1456) = Arr4DIdxRowM(tmp659, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1449,i1450,i1451,i1452);
i1452 = (i1452 +  (int64_t)1);
if ((i1452 ==  (int64_t)16)) {
i1452 =  (int64_t)0;
i1451 = (i1451 +  (int64_t)1);
if ((i1451 ==  (int64_t)16)) {
i1451 =  (int64_t)0;
i1450 = (i1450 +  (int64_t)1);
if ((i1450 ==  (int64_t)256)) {
i1450 =  (int64_t)0;
i1449 = (i1449 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp659);

uint64_t* tmp663 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i1464;

int64_t i1463;

int64_t i1462;

int64_t i1461;

int64_t i1460;

int64_t i1459;

int64_t i1458;

int64_t i1457;
i1457 =  (int64_t)0;
i1458 =  (int64_t)0;
i1459 =  (int64_t)0;
i1460 =  (int64_t)0;
for (uint64_t i1464 =  (int32_t)0; i1464 <  (int32_t)256; i1464++){
for (uint64_t i1463 =  (int32_t)0; i1463 <  (int32_t)256; i1463++){
for (uint64_t i1461 =  (int32_t)0; i1461 <  (int32_t)3; i1461++){
for (uint64_t i1462 =  (int32_t)0; i1462 <  (int32_t)3; i1462++){
Arr4DIdxRowM(tmp663, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i1461,i1462,i1463,i1464) = Arr4DIdxRowM(tmp37, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i1457,i1458,i1459,i1460);
i1460 = (i1460 +  (int64_t)1);
if ((i1460 ==  (int64_t)3)) {
i1460 =  (int64_t)0;
i1459 = (i1459 +  (int64_t)1);
if ((i1459 ==  (int64_t)3)) {
i1459 =  (int64_t)0;
i1458 = (i1458 +  (int64_t)1);
if ((i1458 ==  (int64_t)256)) {
i1458 =  (int64_t)0;
i1457 = (i1457 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp37);

uint64_t* tmp665 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp661, tmp663, tmp665);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp661);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp663);

uint64_t* tmp668 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1469;

int64_t i1468;

int64_t i1467;

int64_t i1466;

int64_t i1465;
i1465 =  (int64_t)0;
for (uint64_t i1466 =  (int32_t)0; i1466 <  (int32_t)1; i1466++){
for (uint64_t i1467 =  (int32_t)0; i1467 <  (int32_t)1; i1467++){
for (uint64_t i1468 =  (int32_t)0; i1468 <  (int32_t)1; i1468++){
for (uint64_t i1469 =  (int32_t)0; i1469 <  (int32_t)256; i1469++){
Arr4DIdxRowM(tmp668, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1466,i1467,i1468,i1469) = Arr1DIdxRowM(tmp8, (int32_t)256,i1465);
i1465 = (i1465 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp668,  (int32_t)12);

uint64_t* tmp669 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp669, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp665, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp668, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp665);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp668);

uint64_t* tmp672 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1477;

int64_t i1476;

int64_t i1475;

int64_t i1474;

int64_t i1473;

int64_t i1472;

int64_t i1471;

int64_t i1470;
i1470 =  (int64_t)0;
i1471 =  (int64_t)0;
i1472 =  (int64_t)0;
i1473 =  (int64_t)0;
for (uint64_t i1474 =  (int32_t)0; i1474 <  (int32_t)1; i1474++){
for (uint64_t i1476 =  (int32_t)0; i1476 <  (int32_t)16; i1476++){
for (uint64_t i1477 =  (int32_t)0; i1477 <  (int32_t)16; i1477++){
for (uint64_t i1475 =  (int32_t)0; i1475 <  (int32_t)256; i1475++){
Arr4DIdxRowM(tmp672, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1474,i1475,i1476,i1477) = Arr4DIdxRowM(tmp669, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1470,i1471,i1472,i1473);
i1473 = (i1473 +  (int64_t)1);
if ((i1473 ==  (int64_t)256)) {
i1473 =  (int64_t)0;
i1472 = (i1472 +  (int64_t)1);
if ((i1472 ==  (int64_t)16)) {
i1472 =  (int64_t)0;
i1471 = (i1471 +  (int64_t)1);
if ((i1471 ==  (int64_t)16)) {
i1471 =  (int64_t)0;
i1470 = (i1470 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp669);

uint64_t* tmp674 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1485;

int64_t i1484;

int64_t i1483;

int64_t i1482;

int64_t i1481;

int64_t i1480;

int64_t i1479;

int64_t i1478;
i1478 =  (int64_t)0;
i1479 =  (int64_t)0;
i1480 =  (int64_t)0;
i1481 =  (int64_t)0;
for (uint64_t i1482 =  (int32_t)0; i1482 <  (int32_t)1; i1482++){
for (uint64_t i1485 =  (int32_t)0; i1485 <  (int32_t)256; i1485++){
for (uint64_t i1483 =  (int32_t)0; i1483 <  (int32_t)16; i1483++){
for (uint64_t i1484 =  (int32_t)0; i1484 <  (int32_t)16; i1484++){
Arr4DIdxRowM(tmp674, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1482,i1483,i1484,i1485) = Arr4DIdxRowM(tmp672, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1478,i1479,i1480,i1481);
i1481 = (i1481 +  (int64_t)1);
if ((i1481 ==  (int64_t)16)) {
i1481 =  (int64_t)0;
i1480 = (i1480 +  (int64_t)1);
if ((i1480 ==  (int64_t)16)) {
i1480 =  (int64_t)0;
i1479 = (i1479 +  (int64_t)1);
if ((i1479 ==  (int64_t)256)) {
i1479 =  (int64_t)0;
i1478 = (i1478 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp672);

uint64_t* tmp676 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp674, tmp676,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp674);

uint64_t* tmp678 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1493;

int64_t i1492;

int64_t i1491;

int64_t i1490;

int64_t i1489;

int64_t i1488;

int64_t i1487;

int64_t i1486;
i1486 =  (int64_t)0;
i1487 =  (int64_t)0;
i1488 =  (int64_t)0;
i1489 =  (int64_t)0;
for (uint64_t i1490 =  (int32_t)0; i1490 <  (int32_t)1; i1490++){
for (uint64_t i1492 =  (int32_t)0; i1492 <  (int32_t)16; i1492++){
for (uint64_t i1493 =  (int32_t)0; i1493 <  (int32_t)16; i1493++){
for (uint64_t i1491 =  (int32_t)0; i1491 <  (int32_t)256; i1491++){
Arr4DIdxRowM(tmp678, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1490,i1491,i1492,i1493) = Arr4DIdxRowM(tmp676, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1486,i1487,i1488,i1489);
i1489 = (i1489 +  (int64_t)1);
if ((i1489 ==  (int64_t)256)) {
i1489 =  (int64_t)0;
i1488 = (i1488 +  (int64_t)1);
if ((i1488 ==  (int64_t)16)) {
i1488 =  (int64_t)0;
i1487 = (i1487 +  (int64_t)1);
if ((i1487 ==  (int64_t)16)) {
i1487 =  (int64_t)0;
i1486 = (i1486 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp676);

uint64_t* tmp680 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1501;

int64_t i1500;

int64_t i1499;

int64_t i1498;

int64_t i1497;

int64_t i1496;

int64_t i1495;

int64_t i1494;
i1494 =  (int64_t)0;
i1495 =  (int64_t)0;
i1496 =  (int64_t)0;
i1497 =  (int64_t)0;
for (uint64_t i1498 =  (int32_t)0; i1498 <  (int32_t)1; i1498++){
for (uint64_t i1501 =  (int32_t)0; i1501 <  (int32_t)256; i1501++){
for (uint64_t i1499 =  (int32_t)0; i1499 <  (int32_t)16; i1499++){
for (uint64_t i1500 =  (int32_t)0; i1500 <  (int32_t)16; i1500++){
Arr4DIdxRowM(tmp680, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1498,i1499,i1500,i1501) = Arr4DIdxRowM(tmp678, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1494,i1495,i1496,i1497);
i1497 = (i1497 +  (int64_t)1);
if ((i1497 ==  (int64_t)16)) {
i1497 =  (int64_t)0;
i1496 = (i1496 +  (int64_t)1);
if ((i1496 ==  (int64_t)16)) {
i1496 =  (int64_t)0;
i1495 = (i1495 +  (int64_t)1);
if ((i1495 ==  (int64_t)256)) {
i1495 =  (int64_t)0;
i1494 = (i1494 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp678);

uint64_t* tmp682 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i1509;

int64_t i1508;

int64_t i1507;

int64_t i1506;

int64_t i1505;

int64_t i1504;

int64_t i1503;

int64_t i1502;
i1502 =  (int64_t)0;
i1503 =  (int64_t)0;
i1504 =  (int64_t)0;
i1505 =  (int64_t)0;
for (uint64_t i1509 =  (int32_t)0; i1509 <  (int32_t)1024; i1509++){
for (uint64_t i1508 =  (int32_t)0; i1508 <  (int32_t)256; i1508++){
for (uint64_t i1506 =  (int32_t)0; i1506 <  (int32_t)1; i1506++){
for (uint64_t i1507 =  (int32_t)0; i1507 <  (int32_t)1; i1507++){
Arr4DIdxRowM(tmp682, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i1506,i1507,i1508,i1509) = Arr4DIdxRowM(tmp38, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i1502,i1503,i1504,i1505);
i1505 = (i1505 +  (int64_t)1);
if ((i1505 ==  (int64_t)1)) {
i1505 =  (int64_t)0;
i1504 = (i1504 +  (int64_t)1);
if ((i1504 ==  (int64_t)1)) {
i1504 =  (int64_t)0;
i1503 = (i1503 +  (int64_t)1);
if ((i1503 ==  (int64_t)256)) {
i1503 =  (int64_t)0;
i1502 = (i1502 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp38);

uint64_t* tmp684 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp680, tmp682, tmp684);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp680);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp682);

uint64_t* tmp687 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1514;

int64_t i1513;

int64_t i1512;

int64_t i1511;

int64_t i1510;
i1510 =  (int64_t)0;
for (uint64_t i1511 =  (int32_t)0; i1511 <  (int32_t)1; i1511++){
for (uint64_t i1512 =  (int32_t)0; i1512 <  (int32_t)1; i1512++){
for (uint64_t i1513 =  (int32_t)0; i1513 <  (int32_t)1; i1513++){
for (uint64_t i1514 =  (int32_t)0; i1514 <  (int32_t)1024; i1514++){
Arr4DIdxRowM(tmp687, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1511,i1512,i1513,i1514) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1510);
i1510 = (i1510 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp687,  (int32_t)12);

uint64_t* tmp688 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp688, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp684, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp687, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp684);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp687);

uint64_t* tmp691 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1522;

int64_t i1521;

int64_t i1520;

int64_t i1519;

int64_t i1518;

int64_t i1517;

int64_t i1516;

int64_t i1515;
i1515 =  (int64_t)0;
i1516 =  (int64_t)0;
i1517 =  (int64_t)0;
i1518 =  (int64_t)0;
for (uint64_t i1519 =  (int32_t)0; i1519 <  (int32_t)1; i1519++){
for (uint64_t i1521 =  (int32_t)0; i1521 <  (int32_t)16; i1521++){
for (uint64_t i1522 =  (int32_t)0; i1522 <  (int32_t)16; i1522++){
for (uint64_t i1520 =  (int32_t)0; i1520 <  (int32_t)1024; i1520++){
Arr4DIdxRowM(tmp691, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1519,i1520,i1521,i1522) = Arr4DIdxRowM(tmp688, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1515,i1516,i1517,i1518);
i1518 = (i1518 +  (int64_t)1);
if ((i1518 ==  (int64_t)1024)) {
i1518 =  (int64_t)0;
i1517 = (i1517 +  (int64_t)1);
if ((i1517 ==  (int64_t)16)) {
i1517 =  (int64_t)0;
i1516 = (i1516 +  (int64_t)1);
if ((i1516 ==  (int64_t)16)) {
i1516 =  (int64_t)0;
i1515 = (i1515 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp688);

uint64_t* tmp693 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1530;

int64_t i1529;

int64_t i1528;

int64_t i1527;

int64_t i1526;

int64_t i1525;

int64_t i1524;

int64_t i1523;
i1523 =  (int64_t)0;
i1524 =  (int64_t)0;
i1525 =  (int64_t)0;
i1526 =  (int64_t)0;
for (uint64_t i1527 =  (int32_t)0; i1527 <  (int32_t)1; i1527++){
for (uint64_t i1530 =  (int32_t)0; i1530 <  (int32_t)1024; i1530++){
for (uint64_t i1528 =  (int32_t)0; i1528 <  (int32_t)16; i1528++){
for (uint64_t i1529 =  (int32_t)0; i1529 <  (int32_t)16; i1529++){
Arr4DIdxRowM(tmp693, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1527,i1528,i1529,i1530) = Arr4DIdxRowM(tmp691, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1523,i1524,i1525,i1526);
i1526 = (i1526 +  (int64_t)1);
if ((i1526 ==  (int64_t)16)) {
i1526 =  (int64_t)0;
i1525 = (i1525 +  (int64_t)1);
if ((i1525 ==  (int64_t)16)) {
i1525 =  (int64_t)0;
i1524 = (i1524 +  (int64_t)1);
if ((i1524 ==  (int64_t)1024)) {
i1524 =  (int64_t)0;
i1523 = (i1523 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp691);

uint64_t* tmp695 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1538;

int64_t i1537;

int64_t i1536;

int64_t i1535;

int64_t i1534;

int64_t i1533;

int64_t i1532;

int64_t i1531;
i1531 =  (int64_t)0;
i1532 =  (int64_t)0;
i1533 =  (int64_t)0;
i1534 =  (int64_t)0;
for (uint64_t i1535 =  (int32_t)0; i1535 <  (int32_t)1; i1535++){
for (uint64_t i1538 =  (int32_t)0; i1538 <  (int32_t)1024; i1538++){
for (uint64_t i1536 =  (int32_t)0; i1536 <  (int32_t)16; i1536++){
for (uint64_t i1537 =  (int32_t)0; i1537 <  (int32_t)16; i1537++){
Arr4DIdxRowM(tmp695, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1535,i1536,i1537,i1538) = Arr4DIdxRowM(tmp641, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1531,i1532,i1533,i1534);
i1534 = (i1534 +  (int64_t)1);
if ((i1534 ==  (int64_t)16)) {
i1534 =  (int64_t)0;
i1533 = (i1533 +  (int64_t)1);
if ((i1533 ==  (int64_t)16)) {
i1533 =  (int64_t)0;
i1532 = (i1532 +  (int64_t)1);
if ((i1532 ==  (int64_t)1024)) {
i1532 =  (int64_t)0;
i1531 = (i1531 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp641);
ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp695,  (int32_t)12);

uint64_t* tmp697 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp697, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp693, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp695, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp695);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp693);

uint64_t* tmp700 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1546;

int64_t i1545;

int64_t i1544;

int64_t i1543;

int64_t i1542;

int64_t i1541;

int64_t i1540;

int64_t i1539;
i1539 =  (int64_t)0;
i1540 =  (int64_t)0;
i1541 =  (int64_t)0;
i1542 =  (int64_t)0;
for (uint64_t i1543 =  (int32_t)0; i1543 <  (int32_t)1; i1543++){
for (uint64_t i1545 =  (int32_t)0; i1545 <  (int32_t)16; i1545++){
for (uint64_t i1546 =  (int32_t)0; i1546 <  (int32_t)16; i1546++){
for (uint64_t i1544 =  (int32_t)0; i1544 <  (int32_t)1024; i1544++){
Arr4DIdxRowM(tmp700, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1543,i1544,i1545,i1546) = Arr4DIdxRowM(tmp697, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1539,i1540,i1541,i1542);
i1542 = (i1542 +  (int64_t)1);
if ((i1542 ==  (int64_t)1024)) {
i1542 =  (int64_t)0;
i1541 = (i1541 +  (int64_t)1);
if ((i1541 ==  (int64_t)16)) {
i1541 =  (int64_t)0;
i1540 = (i1540 +  (int64_t)1);
if ((i1540 ==  (int64_t)16)) {
i1540 =  (int64_t)0;
i1539 = (i1539 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp697);

uint64_t* tmp702 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1554;

int64_t i1553;

int64_t i1552;

int64_t i1551;

int64_t i1550;

int64_t i1549;

int64_t i1548;

int64_t i1547;
i1547 =  (int64_t)0;
i1548 =  (int64_t)0;
i1549 =  (int64_t)0;
i1550 =  (int64_t)0;
for (uint64_t i1551 =  (int32_t)0; i1551 <  (int32_t)1; i1551++){
for (uint64_t i1554 =  (int32_t)0; i1554 <  (int32_t)1024; i1554++){
for (uint64_t i1552 =  (int32_t)0; i1552 <  (int32_t)16; i1552++){
for (uint64_t i1553 =  (int32_t)0; i1553 <  (int32_t)16; i1553++){
Arr4DIdxRowM(tmp702, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1551,i1552,i1553,i1554) = Arr4DIdxRowM(tmp700, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1547,i1548,i1549,i1550);
i1550 = (i1550 +  (int64_t)1);
if ((i1550 ==  (int64_t)16)) {
i1550 =  (int64_t)0;
i1549 = (i1549 +  (int64_t)1);
if ((i1549 ==  (int64_t)16)) {
i1549 =  (int64_t)0;
i1548 = (i1548 +  (int64_t)1);
if ((i1548 ==  (int64_t)1024)) {
i1548 =  (int64_t)0;
i1547 = (i1547 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp700);

uint64_t* tmp704 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp702, tmp704,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp702);

uint64_t* tmp706 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1562;

int64_t i1561;

int64_t i1560;

int64_t i1559;

int64_t i1558;

int64_t i1557;

int64_t i1556;

int64_t i1555;
i1555 =  (int64_t)0;
i1556 =  (int64_t)0;
i1557 =  (int64_t)0;
i1558 =  (int64_t)0;
for (uint64_t i1559 =  (int32_t)0; i1559 <  (int32_t)1; i1559++){
for (uint64_t i1561 =  (int32_t)0; i1561 <  (int32_t)16; i1561++){
for (uint64_t i1562 =  (int32_t)0; i1562 <  (int32_t)16; i1562++){
for (uint64_t i1560 =  (int32_t)0; i1560 <  (int32_t)1024; i1560++){
Arr4DIdxRowM(tmp706, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1559,i1560,i1561,i1562) = Arr4DIdxRowM(tmp704, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1555,i1556,i1557,i1558);
i1558 = (i1558 +  (int64_t)1);
if ((i1558 ==  (int64_t)1024)) {
i1558 =  (int64_t)0;
i1557 = (i1557 +  (int64_t)1);
if ((i1557 ==  (int64_t)16)) {
i1557 =  (int64_t)0;
i1556 = (i1556 +  (int64_t)1);
if ((i1556 ==  (int64_t)16)) {
i1556 =  (int64_t)0;
i1555 = (i1555 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp704);

uint64_t* tmp708 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1570;

int64_t i1569;

int64_t i1568;

int64_t i1567;

int64_t i1566;

int64_t i1565;

int64_t i1564;

int64_t i1563;
i1563 =  (int64_t)0;
i1564 =  (int64_t)0;
i1565 =  (int64_t)0;
i1566 =  (int64_t)0;
for (uint64_t i1567 =  (int32_t)0; i1567 <  (int32_t)1; i1567++){
for (uint64_t i1570 =  (int32_t)0; i1570 <  (int32_t)1024; i1570++){
for (uint64_t i1568 =  (int32_t)0; i1568 <  (int32_t)16; i1568++){
for (uint64_t i1569 =  (int32_t)0; i1569 <  (int32_t)16; i1569++){
Arr4DIdxRowM(tmp708, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1567,i1568,i1569,i1570) = Arr4DIdxRowM(tmp706, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1563,i1564,i1565,i1566);
i1566 = (i1566 +  (int64_t)1);
if ((i1566 ==  (int64_t)16)) {
i1566 =  (int64_t)0;
i1565 = (i1565 +  (int64_t)1);
if ((i1565 ==  (int64_t)16)) {
i1565 =  (int64_t)0;
i1564 = (i1564 +  (int64_t)1);
if ((i1564 ==  (int64_t)1024)) {
i1564 =  (int64_t)0;
i1563 = (i1563 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp709 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);

int64_t i1578;

int64_t i1577;

int64_t i1576;

int64_t i1575;

int64_t i1574;

int64_t i1573;

int64_t i1572;

int64_t i1571;
i1571 =  (int64_t)0;
i1572 =  (int64_t)0;
i1573 =  (int64_t)0;
i1574 =  (int64_t)0;
for (uint64_t i1578 =  (int32_t)0; i1578 <  (int32_t)256; i1578++){
for (uint64_t i1577 =  (int32_t)0; i1577 <  (int32_t)1024; i1577++){
for (uint64_t i1575 =  (int32_t)0; i1575 <  (int32_t)1; i1575++){
for (uint64_t i1576 =  (int32_t)0; i1576 <  (int32_t)1; i1576++){
Arr4DIdxRowM(tmp709, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)256,i1575,i1576,i1577,i1578) = Arr4DIdxRowM(tmp39, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i1571,i1572,i1573,i1574);
i1574 = (i1574 +  (int64_t)1);
if ((i1574 ==  (int64_t)1)) {
i1574 =  (int64_t)0;
i1573 = (i1573 +  (int64_t)1);
if ((i1573 ==  (int64_t)1)) {
i1573 =  (int64_t)0;
i1572 = (i1572 +  (int64_t)1);
if ((i1572 ==  (int64_t)1024)) {
i1572 =  (int64_t)0;
i1571 = (i1571 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp39);

uint64_t* tmp711 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp708, tmp709, tmp711);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp709);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp708);

uint64_t* tmp714 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1583;

int64_t i1582;

int64_t i1581;

int64_t i1580;

int64_t i1579;
i1579 =  (int64_t)0;
for (uint64_t i1580 =  (int32_t)0; i1580 <  (int32_t)1; i1580++){
for (uint64_t i1581 =  (int32_t)0; i1581 <  (int32_t)1; i1581++){
for (uint64_t i1582 =  (int32_t)0; i1582 <  (int32_t)1; i1582++){
for (uint64_t i1583 =  (int32_t)0; i1583 <  (int32_t)256; i1583++){
Arr4DIdxRowM(tmp714, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1580,i1581,i1582,i1583) = Arr1DIdxRowM(tmp8, (int32_t)256,i1579);
i1579 = (i1579 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp714,  (int32_t)12);

uint64_t* tmp715 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp715, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp711, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp714, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp711);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp714);

uint64_t* tmp718 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1591;

int64_t i1590;

int64_t i1589;

int64_t i1588;

int64_t i1587;

int64_t i1586;

int64_t i1585;

int64_t i1584;
i1584 =  (int64_t)0;
i1585 =  (int64_t)0;
i1586 =  (int64_t)0;
i1587 =  (int64_t)0;
for (uint64_t i1588 =  (int32_t)0; i1588 <  (int32_t)1; i1588++){
for (uint64_t i1590 =  (int32_t)0; i1590 <  (int32_t)16; i1590++){
for (uint64_t i1591 =  (int32_t)0; i1591 <  (int32_t)16; i1591++){
for (uint64_t i1589 =  (int32_t)0; i1589 <  (int32_t)256; i1589++){
Arr4DIdxRowM(tmp718, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1588,i1589,i1590,i1591) = Arr4DIdxRowM(tmp715, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1584,i1585,i1586,i1587);
i1587 = (i1587 +  (int64_t)1);
if ((i1587 ==  (int64_t)256)) {
i1587 =  (int64_t)0;
i1586 = (i1586 +  (int64_t)1);
if ((i1586 ==  (int64_t)16)) {
i1586 =  (int64_t)0;
i1585 = (i1585 +  (int64_t)1);
if ((i1585 ==  (int64_t)16)) {
i1585 =  (int64_t)0;
i1584 = (i1584 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp715);

uint64_t* tmp720 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1599;

int64_t i1598;

int64_t i1597;

int64_t i1596;

int64_t i1595;

int64_t i1594;

int64_t i1593;

int64_t i1592;
i1592 =  (int64_t)0;
i1593 =  (int64_t)0;
i1594 =  (int64_t)0;
i1595 =  (int64_t)0;
for (uint64_t i1596 =  (int32_t)0; i1596 <  (int32_t)1; i1596++){
for (uint64_t i1599 =  (int32_t)0; i1599 <  (int32_t)256; i1599++){
for (uint64_t i1597 =  (int32_t)0; i1597 <  (int32_t)16; i1597++){
for (uint64_t i1598 =  (int32_t)0; i1598 <  (int32_t)16; i1598++){
Arr4DIdxRowM(tmp720, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1596,i1597,i1598,i1599) = Arr4DIdxRowM(tmp718, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1592,i1593,i1594,i1595);
i1595 = (i1595 +  (int64_t)1);
if ((i1595 ==  (int64_t)16)) {
i1595 =  (int64_t)0;
i1594 = (i1594 +  (int64_t)1);
if ((i1594 ==  (int64_t)16)) {
i1594 =  (int64_t)0;
i1593 = (i1593 +  (int64_t)1);
if ((i1593 ==  (int64_t)256)) {
i1593 =  (int64_t)0;
i1592 = (i1592 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp718);

uint64_t* tmp722 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp720, tmp722,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp720);

uint64_t* tmp724 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1607;

int64_t i1606;

int64_t i1605;

int64_t i1604;

int64_t i1603;

int64_t i1602;

int64_t i1601;

int64_t i1600;
i1600 =  (int64_t)0;
i1601 =  (int64_t)0;
i1602 =  (int64_t)0;
i1603 =  (int64_t)0;
for (uint64_t i1604 =  (int32_t)0; i1604 <  (int32_t)1; i1604++){
for (uint64_t i1606 =  (int32_t)0; i1606 <  (int32_t)16; i1606++){
for (uint64_t i1607 =  (int32_t)0; i1607 <  (int32_t)16; i1607++){
for (uint64_t i1605 =  (int32_t)0; i1605 <  (int32_t)256; i1605++){
Arr4DIdxRowM(tmp724, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1604,i1605,i1606,i1607) = Arr4DIdxRowM(tmp722, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1600,i1601,i1602,i1603);
i1603 = (i1603 +  (int64_t)1);
if ((i1603 ==  (int64_t)256)) {
i1603 =  (int64_t)0;
i1602 = (i1602 +  (int64_t)1);
if ((i1602 ==  (int64_t)16)) {
i1602 =  (int64_t)0;
i1601 = (i1601 +  (int64_t)1);
if ((i1601 ==  (int64_t)16)) {
i1601 =  (int64_t)0;
i1600 = (i1600 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp722);

uint64_t* tmp726 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1615;

int64_t i1614;

int64_t i1613;

int64_t i1612;

int64_t i1611;

int64_t i1610;

int64_t i1609;

int64_t i1608;
i1608 =  (int64_t)0;
i1609 =  (int64_t)0;
i1610 =  (int64_t)0;
i1611 =  (int64_t)0;
for (uint64_t i1612 =  (int32_t)0; i1612 <  (int32_t)1; i1612++){
for (uint64_t i1615 =  (int32_t)0; i1615 <  (int32_t)256; i1615++){
for (uint64_t i1613 =  (int32_t)0; i1613 <  (int32_t)16; i1613++){
for (uint64_t i1614 =  (int32_t)0; i1614 <  (int32_t)16; i1614++){
Arr4DIdxRowM(tmp726, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1612,i1613,i1614,i1615) = Arr4DIdxRowM(tmp724, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1608,i1609,i1610,i1611);
i1611 = (i1611 +  (int64_t)1);
if ((i1611 ==  (int64_t)16)) {
i1611 =  (int64_t)0;
i1610 = (i1610 +  (int64_t)1);
if ((i1610 ==  (int64_t)16)) {
i1610 =  (int64_t)0;
i1609 = (i1609 +  (int64_t)1);
if ((i1609 ==  (int64_t)256)) {
i1609 =  (int64_t)0;
i1608 = (i1608 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp724);

uint64_t* tmp728 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i1623;

int64_t i1622;

int64_t i1621;

int64_t i1620;

int64_t i1619;

int64_t i1618;

int64_t i1617;

int64_t i1616;
i1616 =  (int64_t)0;
i1617 =  (int64_t)0;
i1618 =  (int64_t)0;
i1619 =  (int64_t)0;
for (uint64_t i1623 =  (int32_t)0; i1623 <  (int32_t)256; i1623++){
for (uint64_t i1622 =  (int32_t)0; i1622 <  (int32_t)256; i1622++){
for (uint64_t i1620 =  (int32_t)0; i1620 <  (int32_t)3; i1620++){
for (uint64_t i1621 =  (int32_t)0; i1621 <  (int32_t)3; i1621++){
Arr4DIdxRowM(tmp728, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i1620,i1621,i1622,i1623) = Arr4DIdxRowM(tmp40, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i1616,i1617,i1618,i1619);
i1619 = (i1619 +  (int64_t)1);
if ((i1619 ==  (int64_t)3)) {
i1619 =  (int64_t)0;
i1618 = (i1618 +  (int64_t)1);
if ((i1618 ==  (int64_t)3)) {
i1618 =  (int64_t)0;
i1617 = (i1617 +  (int64_t)1);
if ((i1617 ==  (int64_t)256)) {
i1617 =  (int64_t)0;
i1616 = (i1616 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp40);

uint64_t* tmp730 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp726, tmp728, tmp730);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp728);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp726);

uint64_t* tmp733 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1628;

int64_t i1627;

int64_t i1626;

int64_t i1625;

int64_t i1624;
i1624 =  (int64_t)0;
for (uint64_t i1625 =  (int32_t)0; i1625 <  (int32_t)1; i1625++){
for (uint64_t i1626 =  (int32_t)0; i1626 <  (int32_t)1; i1626++){
for (uint64_t i1627 =  (int32_t)0; i1627 <  (int32_t)1; i1627++){
for (uint64_t i1628 =  (int32_t)0; i1628 <  (int32_t)256; i1628++){
Arr4DIdxRowM(tmp733, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1625,i1626,i1627,i1628) = Arr1DIdxRowM(tmp8, (int32_t)256,i1624);
i1624 = (i1624 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp733,  (int32_t)12);

uint64_t* tmp734 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp734, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp730, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp733, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp733);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp730);

uint64_t* tmp737 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1636;

int64_t i1635;

int64_t i1634;

int64_t i1633;

int64_t i1632;

int64_t i1631;

int64_t i1630;

int64_t i1629;
i1629 =  (int64_t)0;
i1630 =  (int64_t)0;
i1631 =  (int64_t)0;
i1632 =  (int64_t)0;
for (uint64_t i1633 =  (int32_t)0; i1633 <  (int32_t)1; i1633++){
for (uint64_t i1635 =  (int32_t)0; i1635 <  (int32_t)16; i1635++){
for (uint64_t i1636 =  (int32_t)0; i1636 <  (int32_t)16; i1636++){
for (uint64_t i1634 =  (int32_t)0; i1634 <  (int32_t)256; i1634++){
Arr4DIdxRowM(tmp737, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1633,i1634,i1635,i1636) = Arr4DIdxRowM(tmp734, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1629,i1630,i1631,i1632);
i1632 = (i1632 +  (int64_t)1);
if ((i1632 ==  (int64_t)256)) {
i1632 =  (int64_t)0;
i1631 = (i1631 +  (int64_t)1);
if ((i1631 ==  (int64_t)16)) {
i1631 =  (int64_t)0;
i1630 = (i1630 +  (int64_t)1);
if ((i1630 ==  (int64_t)16)) {
i1630 =  (int64_t)0;
i1629 = (i1629 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp734);

uint64_t* tmp739 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1644;

int64_t i1643;

int64_t i1642;

int64_t i1641;

int64_t i1640;

int64_t i1639;

int64_t i1638;

int64_t i1637;
i1637 =  (int64_t)0;
i1638 =  (int64_t)0;
i1639 =  (int64_t)0;
i1640 =  (int64_t)0;
for (uint64_t i1641 =  (int32_t)0; i1641 <  (int32_t)1; i1641++){
for (uint64_t i1644 =  (int32_t)0; i1644 <  (int32_t)256; i1644++){
for (uint64_t i1642 =  (int32_t)0; i1642 <  (int32_t)16; i1642++){
for (uint64_t i1643 =  (int32_t)0; i1643 <  (int32_t)16; i1643++){
Arr4DIdxRowM(tmp739, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1641,i1642,i1643,i1644) = Arr4DIdxRowM(tmp737, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1637,i1638,i1639,i1640);
i1640 = (i1640 +  (int64_t)1);
if ((i1640 ==  (int64_t)16)) {
i1640 =  (int64_t)0;
i1639 = (i1639 +  (int64_t)1);
if ((i1639 ==  (int64_t)16)) {
i1639 =  (int64_t)0;
i1638 = (i1638 +  (int64_t)1);
if ((i1638 ==  (int64_t)256)) {
i1638 =  (int64_t)0;
i1637 = (i1637 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp737);

uint64_t* tmp741 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp739, tmp741,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp739);

uint64_t* tmp743 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1652;

int64_t i1651;

int64_t i1650;

int64_t i1649;

int64_t i1648;

int64_t i1647;

int64_t i1646;

int64_t i1645;
i1645 =  (int64_t)0;
i1646 =  (int64_t)0;
i1647 =  (int64_t)0;
i1648 =  (int64_t)0;
for (uint64_t i1649 =  (int32_t)0; i1649 <  (int32_t)1; i1649++){
for (uint64_t i1651 =  (int32_t)0; i1651 <  (int32_t)16; i1651++){
for (uint64_t i1652 =  (int32_t)0; i1652 <  (int32_t)16; i1652++){
for (uint64_t i1650 =  (int32_t)0; i1650 <  (int32_t)256; i1650++){
Arr4DIdxRowM(tmp743, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1649,i1650,i1651,i1652) = Arr4DIdxRowM(tmp741, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1645,i1646,i1647,i1648);
i1648 = (i1648 +  (int64_t)1);
if ((i1648 ==  (int64_t)256)) {
i1648 =  (int64_t)0;
i1647 = (i1647 +  (int64_t)1);
if ((i1647 ==  (int64_t)16)) {
i1647 =  (int64_t)0;
i1646 = (i1646 +  (int64_t)1);
if ((i1646 ==  (int64_t)16)) {
i1646 =  (int64_t)0;
i1645 = (i1645 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp741);

uint64_t* tmp745 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1660;

int64_t i1659;

int64_t i1658;

int64_t i1657;

int64_t i1656;

int64_t i1655;

int64_t i1654;

int64_t i1653;
i1653 =  (int64_t)0;
i1654 =  (int64_t)0;
i1655 =  (int64_t)0;
i1656 =  (int64_t)0;
for (uint64_t i1657 =  (int32_t)0; i1657 <  (int32_t)1; i1657++){
for (uint64_t i1660 =  (int32_t)0; i1660 <  (int32_t)256; i1660++){
for (uint64_t i1658 =  (int32_t)0; i1658 <  (int32_t)16; i1658++){
for (uint64_t i1659 =  (int32_t)0; i1659 <  (int32_t)16; i1659++){
Arr4DIdxRowM(tmp745, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1657,i1658,i1659,i1660) = Arr4DIdxRowM(tmp743, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1653,i1654,i1655,i1656);
i1656 = (i1656 +  (int64_t)1);
if ((i1656 ==  (int64_t)16)) {
i1656 =  (int64_t)0;
i1655 = (i1655 +  (int64_t)1);
if ((i1655 ==  (int64_t)16)) {
i1655 =  (int64_t)0;
i1654 = (i1654 +  (int64_t)1);
if ((i1654 ==  (int64_t)256)) {
i1654 =  (int64_t)0;
i1653 = (i1653 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp743);

uint64_t* tmp747 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i1668;

int64_t i1667;

int64_t i1666;

int64_t i1665;

int64_t i1664;

int64_t i1663;

int64_t i1662;

int64_t i1661;
i1661 =  (int64_t)0;
i1662 =  (int64_t)0;
i1663 =  (int64_t)0;
i1664 =  (int64_t)0;
for (uint64_t i1668 =  (int32_t)0; i1668 <  (int32_t)1024; i1668++){
for (uint64_t i1667 =  (int32_t)0; i1667 <  (int32_t)256; i1667++){
for (uint64_t i1665 =  (int32_t)0; i1665 <  (int32_t)1; i1665++){
for (uint64_t i1666 =  (int32_t)0; i1666 <  (int32_t)1; i1666++){
Arr4DIdxRowM(tmp747, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i1665,i1666,i1667,i1668) = Arr4DIdxRowM(tmp41, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i1661,i1662,i1663,i1664);
i1664 = (i1664 +  (int64_t)1);
if ((i1664 ==  (int64_t)1)) {
i1664 =  (int64_t)0;
i1663 = (i1663 +  (int64_t)1);
if ((i1663 ==  (int64_t)1)) {
i1663 =  (int64_t)0;
i1662 = (i1662 +  (int64_t)1);
if ((i1662 ==  (int64_t)256)) {
i1662 =  (int64_t)0;
i1661 = (i1661 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp41);

uint64_t* tmp749 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp745, tmp747, tmp749);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp745);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp747);

uint64_t* tmp752 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1673;

int64_t i1672;

int64_t i1671;

int64_t i1670;

int64_t i1669;
i1669 =  (int64_t)0;
for (uint64_t i1670 =  (int32_t)0; i1670 <  (int32_t)1; i1670++){
for (uint64_t i1671 =  (int32_t)0; i1671 <  (int32_t)1; i1671++){
for (uint64_t i1672 =  (int32_t)0; i1672 <  (int32_t)1; i1672++){
for (uint64_t i1673 =  (int32_t)0; i1673 <  (int32_t)1024; i1673++){
Arr4DIdxRowM(tmp752, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1670,i1671,i1672,i1673) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1669);
i1669 = (i1669 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp752,  (int32_t)12);

uint64_t* tmp753 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp753, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp749, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp752, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp752);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp749);

uint64_t* tmp756 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1681;

int64_t i1680;

int64_t i1679;

int64_t i1678;

int64_t i1677;

int64_t i1676;

int64_t i1675;

int64_t i1674;
i1674 =  (int64_t)0;
i1675 =  (int64_t)0;
i1676 =  (int64_t)0;
i1677 =  (int64_t)0;
for (uint64_t i1678 =  (int32_t)0; i1678 <  (int32_t)1; i1678++){
for (uint64_t i1680 =  (int32_t)0; i1680 <  (int32_t)16; i1680++){
for (uint64_t i1681 =  (int32_t)0; i1681 <  (int32_t)16; i1681++){
for (uint64_t i1679 =  (int32_t)0; i1679 <  (int32_t)1024; i1679++){
Arr4DIdxRowM(tmp756, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1678,i1679,i1680,i1681) = Arr4DIdxRowM(tmp753, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1674,i1675,i1676,i1677);
i1677 = (i1677 +  (int64_t)1);
if ((i1677 ==  (int64_t)1024)) {
i1677 =  (int64_t)0;
i1676 = (i1676 +  (int64_t)1);
if ((i1676 ==  (int64_t)16)) {
i1676 =  (int64_t)0;
i1675 = (i1675 +  (int64_t)1);
if ((i1675 ==  (int64_t)16)) {
i1675 =  (int64_t)0;
i1674 = (i1674 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp753);

uint64_t* tmp758 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1689;

int64_t i1688;

int64_t i1687;

int64_t i1686;

int64_t i1685;

int64_t i1684;

int64_t i1683;

int64_t i1682;
i1682 =  (int64_t)0;
i1683 =  (int64_t)0;
i1684 =  (int64_t)0;
i1685 =  (int64_t)0;
for (uint64_t i1686 =  (int32_t)0; i1686 <  (int32_t)1; i1686++){
for (uint64_t i1689 =  (int32_t)0; i1689 <  (int32_t)1024; i1689++){
for (uint64_t i1687 =  (int32_t)0; i1687 <  (int32_t)16; i1687++){
for (uint64_t i1688 =  (int32_t)0; i1688 <  (int32_t)16; i1688++){
Arr4DIdxRowM(tmp758, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1686,i1687,i1688,i1689) = Arr4DIdxRowM(tmp756, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1682,i1683,i1684,i1685);
i1685 = (i1685 +  (int64_t)1);
if ((i1685 ==  (int64_t)16)) {
i1685 =  (int64_t)0;
i1684 = (i1684 +  (int64_t)1);
if ((i1684 ==  (int64_t)16)) {
i1684 =  (int64_t)0;
i1683 = (i1683 +  (int64_t)1);
if ((i1683 ==  (int64_t)1024)) {
i1683 =  (int64_t)0;
i1682 = (i1682 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp756);

uint64_t* tmp760 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1697;

int64_t i1696;

int64_t i1695;

int64_t i1694;

int64_t i1693;

int64_t i1692;

int64_t i1691;

int64_t i1690;
i1690 =  (int64_t)0;
i1691 =  (int64_t)0;
i1692 =  (int64_t)0;
i1693 =  (int64_t)0;
for (uint64_t i1694 =  (int32_t)0; i1694 <  (int32_t)1; i1694++){
for (uint64_t i1697 =  (int32_t)0; i1697 <  (int32_t)1024; i1697++){
for (uint64_t i1695 =  (int32_t)0; i1695 <  (int32_t)16; i1695++){
for (uint64_t i1696 =  (int32_t)0; i1696 <  (int32_t)16; i1696++){
Arr4DIdxRowM(tmp760, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1694,i1695,i1696,i1697) = Arr4DIdxRowM(tmp706, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1690,i1691,i1692,i1693);
i1693 = (i1693 +  (int64_t)1);
if ((i1693 ==  (int64_t)16)) {
i1693 =  (int64_t)0;
i1692 = (i1692 +  (int64_t)1);
if ((i1692 ==  (int64_t)16)) {
i1692 =  (int64_t)0;
i1691 = (i1691 +  (int64_t)1);
if ((i1691 ==  (int64_t)1024)) {
i1691 =  (int64_t)0;
i1690 = (i1690 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp706);
ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp760,  (int32_t)12);

uint64_t* tmp762 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp762, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp758, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp760, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp760);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp758);

uint64_t* tmp765 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1705;

int64_t i1704;

int64_t i1703;

int64_t i1702;

int64_t i1701;

int64_t i1700;

int64_t i1699;

int64_t i1698;
i1698 =  (int64_t)0;
i1699 =  (int64_t)0;
i1700 =  (int64_t)0;
i1701 =  (int64_t)0;
for (uint64_t i1702 =  (int32_t)0; i1702 <  (int32_t)1; i1702++){
for (uint64_t i1704 =  (int32_t)0; i1704 <  (int32_t)16; i1704++){
for (uint64_t i1705 =  (int32_t)0; i1705 <  (int32_t)16; i1705++){
for (uint64_t i1703 =  (int32_t)0; i1703 <  (int32_t)1024; i1703++){
Arr4DIdxRowM(tmp765, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1702,i1703,i1704,i1705) = Arr4DIdxRowM(tmp762, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1698,i1699,i1700,i1701);
i1701 = (i1701 +  (int64_t)1);
if ((i1701 ==  (int64_t)1024)) {
i1701 =  (int64_t)0;
i1700 = (i1700 +  (int64_t)1);
if ((i1700 ==  (int64_t)16)) {
i1700 =  (int64_t)0;
i1699 = (i1699 +  (int64_t)1);
if ((i1699 ==  (int64_t)16)) {
i1699 =  (int64_t)0;
i1698 = (i1698 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp762);

uint64_t* tmp767 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1713;

int64_t i1712;

int64_t i1711;

int64_t i1710;

int64_t i1709;

int64_t i1708;

int64_t i1707;

int64_t i1706;
i1706 =  (int64_t)0;
i1707 =  (int64_t)0;
i1708 =  (int64_t)0;
i1709 =  (int64_t)0;
for (uint64_t i1710 =  (int32_t)0; i1710 <  (int32_t)1; i1710++){
for (uint64_t i1713 =  (int32_t)0; i1713 <  (int32_t)1024; i1713++){
for (uint64_t i1711 =  (int32_t)0; i1711 <  (int32_t)16; i1711++){
for (uint64_t i1712 =  (int32_t)0; i1712 <  (int32_t)16; i1712++){
Arr4DIdxRowM(tmp767, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1710,i1711,i1712,i1713) = Arr4DIdxRowM(tmp765, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1706,i1707,i1708,i1709);
i1709 = (i1709 +  (int64_t)1);
if ((i1709 ==  (int64_t)16)) {
i1709 =  (int64_t)0;
i1708 = (i1708 +  (int64_t)1);
if ((i1708 ==  (int64_t)16)) {
i1708 =  (int64_t)0;
i1707 = (i1707 +  (int64_t)1);
if ((i1707 ==  (int64_t)1024)) {
i1707 =  (int64_t)0;
i1706 = (i1706 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp765);

uint64_t* tmp769 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp767, tmp769,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp767);

uint64_t* tmp771 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1721;

int64_t i1720;

int64_t i1719;

int64_t i1718;

int64_t i1717;

int64_t i1716;

int64_t i1715;

int64_t i1714;
i1714 =  (int64_t)0;
i1715 =  (int64_t)0;
i1716 =  (int64_t)0;
i1717 =  (int64_t)0;
for (uint64_t i1718 =  (int32_t)0; i1718 <  (int32_t)1; i1718++){
for (uint64_t i1720 =  (int32_t)0; i1720 <  (int32_t)16; i1720++){
for (uint64_t i1721 =  (int32_t)0; i1721 <  (int32_t)16; i1721++){
for (uint64_t i1719 =  (int32_t)0; i1719 <  (int32_t)1024; i1719++){
Arr4DIdxRowM(tmp771, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1718,i1719,i1720,i1721) = Arr4DIdxRowM(tmp769, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1714,i1715,i1716,i1717);
i1717 = (i1717 +  (int64_t)1);
if ((i1717 ==  (int64_t)1024)) {
i1717 =  (int64_t)0;
i1716 = (i1716 +  (int64_t)1);
if ((i1716 ==  (int64_t)16)) {
i1716 =  (int64_t)0;
i1715 = (i1715 +  (int64_t)1);
if ((i1715 ==  (int64_t)16)) {
i1715 =  (int64_t)0;
i1714 = (i1714 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp769);

uint64_t* tmp773 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1729;

int64_t i1728;

int64_t i1727;

int64_t i1726;

int64_t i1725;

int64_t i1724;

int64_t i1723;

int64_t i1722;
i1722 =  (int64_t)0;
i1723 =  (int64_t)0;
i1724 =  (int64_t)0;
i1725 =  (int64_t)0;
for (uint64_t i1726 =  (int32_t)0; i1726 <  (int32_t)1; i1726++){
for (uint64_t i1729 =  (int32_t)0; i1729 <  (int32_t)1024; i1729++){
for (uint64_t i1727 =  (int32_t)0; i1727 <  (int32_t)16; i1727++){
for (uint64_t i1728 =  (int32_t)0; i1728 <  (int32_t)16; i1728++){
Arr4DIdxRowM(tmp773, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1726,i1727,i1728,i1729) = Arr4DIdxRowM(tmp771, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1722,i1723,i1724,i1725);
i1725 = (i1725 +  (int64_t)1);
if ((i1725 ==  (int64_t)16)) {
i1725 =  (int64_t)0;
i1724 = (i1724 +  (int64_t)1);
if ((i1724 ==  (int64_t)16)) {
i1724 =  (int64_t)0;
i1723 = (i1723 +  (int64_t)1);
if ((i1723 ==  (int64_t)1024)) {
i1723 =  (int64_t)0;
i1722 = (i1722 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp774 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);

int64_t i1737;

int64_t i1736;

int64_t i1735;

int64_t i1734;

int64_t i1733;

int64_t i1732;

int64_t i1731;

int64_t i1730;
i1730 =  (int64_t)0;
i1731 =  (int64_t)0;
i1732 =  (int64_t)0;
i1733 =  (int64_t)0;
for (uint64_t i1737 =  (int32_t)0; i1737 <  (int32_t)256; i1737++){
for (uint64_t i1736 =  (int32_t)0; i1736 <  (int32_t)1024; i1736++){
for (uint64_t i1734 =  (int32_t)0; i1734 <  (int32_t)1; i1734++){
for (uint64_t i1735 =  (int32_t)0; i1735 <  (int32_t)1; i1735++){
Arr4DIdxRowM(tmp774, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)256,i1734,i1735,i1736,i1737) = Arr4DIdxRowM(tmp42, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i1730,i1731,i1732,i1733);
i1733 = (i1733 +  (int64_t)1);
if ((i1733 ==  (int64_t)1)) {
i1733 =  (int64_t)0;
i1732 = (i1732 +  (int64_t)1);
if ((i1732 ==  (int64_t)1)) {
i1732 =  (int64_t)0;
i1731 = (i1731 +  (int64_t)1);
if ((i1731 ==  (int64_t)1024)) {
i1731 =  (int64_t)0;
i1730 = (i1730 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp42);

uint64_t* tmp776 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp773, tmp774, tmp776);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp774);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp773);

uint64_t* tmp779 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1742;

int64_t i1741;

int64_t i1740;

int64_t i1739;

int64_t i1738;
i1738 =  (int64_t)0;
for (uint64_t i1739 =  (int32_t)0; i1739 <  (int32_t)1; i1739++){
for (uint64_t i1740 =  (int32_t)0; i1740 <  (int32_t)1; i1740++){
for (uint64_t i1741 =  (int32_t)0; i1741 <  (int32_t)1; i1741++){
for (uint64_t i1742 =  (int32_t)0; i1742 <  (int32_t)256; i1742++){
Arr4DIdxRowM(tmp779, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1739,i1740,i1741,i1742) = Arr1DIdxRowM(tmp8, (int32_t)256,i1738);
i1738 = (i1738 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp779,  (int32_t)12);

uint64_t* tmp780 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp780, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp776, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp779, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp776);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp779);

uint64_t* tmp783 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1750;

int64_t i1749;

int64_t i1748;

int64_t i1747;

int64_t i1746;

int64_t i1745;

int64_t i1744;

int64_t i1743;
i1743 =  (int64_t)0;
i1744 =  (int64_t)0;
i1745 =  (int64_t)0;
i1746 =  (int64_t)0;
for (uint64_t i1747 =  (int32_t)0; i1747 <  (int32_t)1; i1747++){
for (uint64_t i1749 =  (int32_t)0; i1749 <  (int32_t)16; i1749++){
for (uint64_t i1750 =  (int32_t)0; i1750 <  (int32_t)16; i1750++){
for (uint64_t i1748 =  (int32_t)0; i1748 <  (int32_t)256; i1748++){
Arr4DIdxRowM(tmp783, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1747,i1748,i1749,i1750) = Arr4DIdxRowM(tmp780, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1743,i1744,i1745,i1746);
i1746 = (i1746 +  (int64_t)1);
if ((i1746 ==  (int64_t)256)) {
i1746 =  (int64_t)0;
i1745 = (i1745 +  (int64_t)1);
if ((i1745 ==  (int64_t)16)) {
i1745 =  (int64_t)0;
i1744 = (i1744 +  (int64_t)1);
if ((i1744 ==  (int64_t)16)) {
i1744 =  (int64_t)0;
i1743 = (i1743 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp780);

uint64_t* tmp785 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1758;

int64_t i1757;

int64_t i1756;

int64_t i1755;

int64_t i1754;

int64_t i1753;

int64_t i1752;

int64_t i1751;
i1751 =  (int64_t)0;
i1752 =  (int64_t)0;
i1753 =  (int64_t)0;
i1754 =  (int64_t)0;
for (uint64_t i1755 =  (int32_t)0; i1755 <  (int32_t)1; i1755++){
for (uint64_t i1758 =  (int32_t)0; i1758 <  (int32_t)256; i1758++){
for (uint64_t i1756 =  (int32_t)0; i1756 <  (int32_t)16; i1756++){
for (uint64_t i1757 =  (int32_t)0; i1757 <  (int32_t)16; i1757++){
Arr4DIdxRowM(tmp785, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1755,i1756,i1757,i1758) = Arr4DIdxRowM(tmp783, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1751,i1752,i1753,i1754);
i1754 = (i1754 +  (int64_t)1);
if ((i1754 ==  (int64_t)16)) {
i1754 =  (int64_t)0;
i1753 = (i1753 +  (int64_t)1);
if ((i1753 ==  (int64_t)16)) {
i1753 =  (int64_t)0;
i1752 = (i1752 +  (int64_t)1);
if ((i1752 ==  (int64_t)256)) {
i1752 =  (int64_t)0;
i1751 = (i1751 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp783);

uint64_t* tmp787 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp785, tmp787,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp785);

uint64_t* tmp789 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1766;

int64_t i1765;

int64_t i1764;

int64_t i1763;

int64_t i1762;

int64_t i1761;

int64_t i1760;

int64_t i1759;
i1759 =  (int64_t)0;
i1760 =  (int64_t)0;
i1761 =  (int64_t)0;
i1762 =  (int64_t)0;
for (uint64_t i1763 =  (int32_t)0; i1763 <  (int32_t)1; i1763++){
for (uint64_t i1765 =  (int32_t)0; i1765 <  (int32_t)16; i1765++){
for (uint64_t i1766 =  (int32_t)0; i1766 <  (int32_t)16; i1766++){
for (uint64_t i1764 =  (int32_t)0; i1764 <  (int32_t)256; i1764++){
Arr4DIdxRowM(tmp789, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1763,i1764,i1765,i1766) = Arr4DIdxRowM(tmp787, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1759,i1760,i1761,i1762);
i1762 = (i1762 +  (int64_t)1);
if ((i1762 ==  (int64_t)256)) {
i1762 =  (int64_t)0;
i1761 = (i1761 +  (int64_t)1);
if ((i1761 ==  (int64_t)16)) {
i1761 =  (int64_t)0;
i1760 = (i1760 +  (int64_t)1);
if ((i1760 ==  (int64_t)16)) {
i1760 =  (int64_t)0;
i1759 = (i1759 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp787);

uint64_t* tmp791 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1774;

int64_t i1773;

int64_t i1772;

int64_t i1771;

int64_t i1770;

int64_t i1769;

int64_t i1768;

int64_t i1767;
i1767 =  (int64_t)0;
i1768 =  (int64_t)0;
i1769 =  (int64_t)0;
i1770 =  (int64_t)0;
for (uint64_t i1771 =  (int32_t)0; i1771 <  (int32_t)1; i1771++){
for (uint64_t i1774 =  (int32_t)0; i1774 <  (int32_t)256; i1774++){
for (uint64_t i1772 =  (int32_t)0; i1772 <  (int32_t)16; i1772++){
for (uint64_t i1773 =  (int32_t)0; i1773 <  (int32_t)16; i1773++){
Arr4DIdxRowM(tmp791, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1771,i1772,i1773,i1774) = Arr4DIdxRowM(tmp789, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1767,i1768,i1769,i1770);
i1770 = (i1770 +  (int64_t)1);
if ((i1770 ==  (int64_t)16)) {
i1770 =  (int64_t)0;
i1769 = (i1769 +  (int64_t)1);
if ((i1769 ==  (int64_t)16)) {
i1769 =  (int64_t)0;
i1768 = (i1768 +  (int64_t)1);
if ((i1768 ==  (int64_t)256)) {
i1768 =  (int64_t)0;
i1767 = (i1767 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp789);

uint64_t* tmp793 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i1782;

int64_t i1781;

int64_t i1780;

int64_t i1779;

int64_t i1778;

int64_t i1777;

int64_t i1776;

int64_t i1775;
i1775 =  (int64_t)0;
i1776 =  (int64_t)0;
i1777 =  (int64_t)0;
i1778 =  (int64_t)0;
for (uint64_t i1782 =  (int32_t)0; i1782 <  (int32_t)256; i1782++){
for (uint64_t i1781 =  (int32_t)0; i1781 <  (int32_t)256; i1781++){
for (uint64_t i1779 =  (int32_t)0; i1779 <  (int32_t)3; i1779++){
for (uint64_t i1780 =  (int32_t)0; i1780 <  (int32_t)3; i1780++){
Arr4DIdxRowM(tmp793, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i1779,i1780,i1781,i1782) = Arr4DIdxRowM(tmp43, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i1775,i1776,i1777,i1778);
i1778 = (i1778 +  (int64_t)1);
if ((i1778 ==  (int64_t)3)) {
i1778 =  (int64_t)0;
i1777 = (i1777 +  (int64_t)1);
if ((i1777 ==  (int64_t)3)) {
i1777 =  (int64_t)0;
i1776 = (i1776 +  (int64_t)1);
if ((i1776 ==  (int64_t)256)) {
i1776 =  (int64_t)0;
i1775 = (i1775 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp43);

uint64_t* tmp795 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp791, tmp793, tmp795);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp791);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp793);

uint64_t* tmp798 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1787;

int64_t i1786;

int64_t i1785;

int64_t i1784;

int64_t i1783;
i1783 =  (int64_t)0;
for (uint64_t i1784 =  (int32_t)0; i1784 <  (int32_t)1; i1784++){
for (uint64_t i1785 =  (int32_t)0; i1785 <  (int32_t)1; i1785++){
for (uint64_t i1786 =  (int32_t)0; i1786 <  (int32_t)1; i1786++){
for (uint64_t i1787 =  (int32_t)0; i1787 <  (int32_t)256; i1787++){
Arr4DIdxRowM(tmp798, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1784,i1785,i1786,i1787) = Arr1DIdxRowM(tmp8, (int32_t)256,i1783);
i1783 = (i1783 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp798,  (int32_t)12);

uint64_t* tmp799 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp799, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp795, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp798, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp798);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp795);

uint64_t* tmp802 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1795;

int64_t i1794;

int64_t i1793;

int64_t i1792;

int64_t i1791;

int64_t i1790;

int64_t i1789;

int64_t i1788;
i1788 =  (int64_t)0;
i1789 =  (int64_t)0;
i1790 =  (int64_t)0;
i1791 =  (int64_t)0;
for (uint64_t i1792 =  (int32_t)0; i1792 <  (int32_t)1; i1792++){
for (uint64_t i1794 =  (int32_t)0; i1794 <  (int32_t)16; i1794++){
for (uint64_t i1795 =  (int32_t)0; i1795 <  (int32_t)16; i1795++){
for (uint64_t i1793 =  (int32_t)0; i1793 <  (int32_t)256; i1793++){
Arr4DIdxRowM(tmp802, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1792,i1793,i1794,i1795) = Arr4DIdxRowM(tmp799, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1788,i1789,i1790,i1791);
i1791 = (i1791 +  (int64_t)1);
if ((i1791 ==  (int64_t)256)) {
i1791 =  (int64_t)0;
i1790 = (i1790 +  (int64_t)1);
if ((i1790 ==  (int64_t)16)) {
i1790 =  (int64_t)0;
i1789 = (i1789 +  (int64_t)1);
if ((i1789 ==  (int64_t)16)) {
i1789 =  (int64_t)0;
i1788 = (i1788 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp799);

uint64_t* tmp804 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1803;

int64_t i1802;

int64_t i1801;

int64_t i1800;

int64_t i1799;

int64_t i1798;

int64_t i1797;

int64_t i1796;
i1796 =  (int64_t)0;
i1797 =  (int64_t)0;
i1798 =  (int64_t)0;
i1799 =  (int64_t)0;
for (uint64_t i1800 =  (int32_t)0; i1800 <  (int32_t)1; i1800++){
for (uint64_t i1803 =  (int32_t)0; i1803 <  (int32_t)256; i1803++){
for (uint64_t i1801 =  (int32_t)0; i1801 <  (int32_t)16; i1801++){
for (uint64_t i1802 =  (int32_t)0; i1802 <  (int32_t)16; i1802++){
Arr4DIdxRowM(tmp804, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1800,i1801,i1802,i1803) = Arr4DIdxRowM(tmp802, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1796,i1797,i1798,i1799);
i1799 = (i1799 +  (int64_t)1);
if ((i1799 ==  (int64_t)16)) {
i1799 =  (int64_t)0;
i1798 = (i1798 +  (int64_t)1);
if ((i1798 ==  (int64_t)16)) {
i1798 =  (int64_t)0;
i1797 = (i1797 +  (int64_t)1);
if ((i1797 ==  (int64_t)256)) {
i1797 =  (int64_t)0;
i1796 = (i1796 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp802);

uint64_t* tmp806 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp804, tmp806,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp804);

uint64_t* tmp808 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1811;

int64_t i1810;

int64_t i1809;

int64_t i1808;

int64_t i1807;

int64_t i1806;

int64_t i1805;

int64_t i1804;
i1804 =  (int64_t)0;
i1805 =  (int64_t)0;
i1806 =  (int64_t)0;
i1807 =  (int64_t)0;
for (uint64_t i1808 =  (int32_t)0; i1808 <  (int32_t)1; i1808++){
for (uint64_t i1810 =  (int32_t)0; i1810 <  (int32_t)16; i1810++){
for (uint64_t i1811 =  (int32_t)0; i1811 <  (int32_t)16; i1811++){
for (uint64_t i1809 =  (int32_t)0; i1809 <  (int32_t)256; i1809++){
Arr4DIdxRowM(tmp808, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1808,i1809,i1810,i1811) = Arr4DIdxRowM(tmp806, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1804,i1805,i1806,i1807);
i1807 = (i1807 +  (int64_t)1);
if ((i1807 ==  (int64_t)256)) {
i1807 =  (int64_t)0;
i1806 = (i1806 +  (int64_t)1);
if ((i1806 ==  (int64_t)16)) {
i1806 =  (int64_t)0;
i1805 = (i1805 +  (int64_t)1);
if ((i1805 ==  (int64_t)16)) {
i1805 =  (int64_t)0;
i1804 = (i1804 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp806);

uint64_t* tmp810 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1819;

int64_t i1818;

int64_t i1817;

int64_t i1816;

int64_t i1815;

int64_t i1814;

int64_t i1813;

int64_t i1812;
i1812 =  (int64_t)0;
i1813 =  (int64_t)0;
i1814 =  (int64_t)0;
i1815 =  (int64_t)0;
for (uint64_t i1816 =  (int32_t)0; i1816 <  (int32_t)1; i1816++){
for (uint64_t i1819 =  (int32_t)0; i1819 <  (int32_t)256; i1819++){
for (uint64_t i1817 =  (int32_t)0; i1817 <  (int32_t)16; i1817++){
for (uint64_t i1818 =  (int32_t)0; i1818 <  (int32_t)16; i1818++){
Arr4DIdxRowM(tmp810, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1816,i1817,i1818,i1819) = Arr4DIdxRowM(tmp808, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1812,i1813,i1814,i1815);
i1815 = (i1815 +  (int64_t)1);
if ((i1815 ==  (int64_t)16)) {
i1815 =  (int64_t)0;
i1814 = (i1814 +  (int64_t)1);
if ((i1814 ==  (int64_t)16)) {
i1814 =  (int64_t)0;
i1813 = (i1813 +  (int64_t)1);
if ((i1813 ==  (int64_t)256)) {
i1813 =  (int64_t)0;
i1812 = (i1812 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp808);

uint64_t* tmp812 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i1827;

int64_t i1826;

int64_t i1825;

int64_t i1824;

int64_t i1823;

int64_t i1822;

int64_t i1821;

int64_t i1820;
i1820 =  (int64_t)0;
i1821 =  (int64_t)0;
i1822 =  (int64_t)0;
i1823 =  (int64_t)0;
for (uint64_t i1827 =  (int32_t)0; i1827 <  (int32_t)1024; i1827++){
for (uint64_t i1826 =  (int32_t)0; i1826 <  (int32_t)256; i1826++){
for (uint64_t i1824 =  (int32_t)0; i1824 <  (int32_t)1; i1824++){
for (uint64_t i1825 =  (int32_t)0; i1825 <  (int32_t)1; i1825++){
Arr4DIdxRowM(tmp812, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i1824,i1825,i1826,i1827) = Arr4DIdxRowM(tmp44, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i1820,i1821,i1822,i1823);
i1823 = (i1823 +  (int64_t)1);
if ((i1823 ==  (int64_t)1)) {
i1823 =  (int64_t)0;
i1822 = (i1822 +  (int64_t)1);
if ((i1822 ==  (int64_t)1)) {
i1822 =  (int64_t)0;
i1821 = (i1821 +  (int64_t)1);
if ((i1821 ==  (int64_t)256)) {
i1821 =  (int64_t)0;
i1820 = (i1820 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp44);

uint64_t* tmp814 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp810, tmp812, tmp814);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp812);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp810);

uint64_t* tmp817 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1832;

int64_t i1831;

int64_t i1830;

int64_t i1829;

int64_t i1828;
i1828 =  (int64_t)0;
for (uint64_t i1829 =  (int32_t)0; i1829 <  (int32_t)1; i1829++){
for (uint64_t i1830 =  (int32_t)0; i1830 <  (int32_t)1; i1830++){
for (uint64_t i1831 =  (int32_t)0; i1831 <  (int32_t)1; i1831++){
for (uint64_t i1832 =  (int32_t)0; i1832 <  (int32_t)1024; i1832++){
Arr4DIdxRowM(tmp817, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1829,i1830,i1831,i1832) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1828);
i1828 = (i1828 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp817,  (int32_t)12);

uint64_t* tmp818 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp818, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp814, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp817, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp814);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp817);

uint64_t* tmp821 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1840;

int64_t i1839;

int64_t i1838;

int64_t i1837;

int64_t i1836;

int64_t i1835;

int64_t i1834;

int64_t i1833;
i1833 =  (int64_t)0;
i1834 =  (int64_t)0;
i1835 =  (int64_t)0;
i1836 =  (int64_t)0;
for (uint64_t i1837 =  (int32_t)0; i1837 <  (int32_t)1; i1837++){
for (uint64_t i1839 =  (int32_t)0; i1839 <  (int32_t)16; i1839++){
for (uint64_t i1840 =  (int32_t)0; i1840 <  (int32_t)16; i1840++){
for (uint64_t i1838 =  (int32_t)0; i1838 <  (int32_t)1024; i1838++){
Arr4DIdxRowM(tmp821, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1837,i1838,i1839,i1840) = Arr4DIdxRowM(tmp818, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1833,i1834,i1835,i1836);
i1836 = (i1836 +  (int64_t)1);
if ((i1836 ==  (int64_t)1024)) {
i1836 =  (int64_t)0;
i1835 = (i1835 +  (int64_t)1);
if ((i1835 ==  (int64_t)16)) {
i1835 =  (int64_t)0;
i1834 = (i1834 +  (int64_t)1);
if ((i1834 ==  (int64_t)16)) {
i1834 =  (int64_t)0;
i1833 = (i1833 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp818);

uint64_t* tmp823 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1848;

int64_t i1847;

int64_t i1846;

int64_t i1845;

int64_t i1844;

int64_t i1843;

int64_t i1842;

int64_t i1841;
i1841 =  (int64_t)0;
i1842 =  (int64_t)0;
i1843 =  (int64_t)0;
i1844 =  (int64_t)0;
for (uint64_t i1845 =  (int32_t)0; i1845 <  (int32_t)1; i1845++){
for (uint64_t i1848 =  (int32_t)0; i1848 <  (int32_t)1024; i1848++){
for (uint64_t i1846 =  (int32_t)0; i1846 <  (int32_t)16; i1846++){
for (uint64_t i1847 =  (int32_t)0; i1847 <  (int32_t)16; i1847++){
Arr4DIdxRowM(tmp823, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1845,i1846,i1847,i1848) = Arr4DIdxRowM(tmp821, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1841,i1842,i1843,i1844);
i1844 = (i1844 +  (int64_t)1);
if ((i1844 ==  (int64_t)16)) {
i1844 =  (int64_t)0;
i1843 = (i1843 +  (int64_t)1);
if ((i1843 ==  (int64_t)16)) {
i1843 =  (int64_t)0;
i1842 = (i1842 +  (int64_t)1);
if ((i1842 ==  (int64_t)1024)) {
i1842 =  (int64_t)0;
i1841 = (i1841 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp821);

uint64_t* tmp825 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1856;

int64_t i1855;

int64_t i1854;

int64_t i1853;

int64_t i1852;

int64_t i1851;

int64_t i1850;

int64_t i1849;
i1849 =  (int64_t)0;
i1850 =  (int64_t)0;
i1851 =  (int64_t)0;
i1852 =  (int64_t)0;
for (uint64_t i1853 =  (int32_t)0; i1853 <  (int32_t)1; i1853++){
for (uint64_t i1856 =  (int32_t)0; i1856 <  (int32_t)1024; i1856++){
for (uint64_t i1854 =  (int32_t)0; i1854 <  (int32_t)16; i1854++){
for (uint64_t i1855 =  (int32_t)0; i1855 <  (int32_t)16; i1855++){
Arr4DIdxRowM(tmp825, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1853,i1854,i1855,i1856) = Arr4DIdxRowM(tmp771, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1849,i1850,i1851,i1852);
i1852 = (i1852 +  (int64_t)1);
if ((i1852 ==  (int64_t)16)) {
i1852 =  (int64_t)0;
i1851 = (i1851 +  (int64_t)1);
if ((i1851 ==  (int64_t)16)) {
i1851 =  (int64_t)0;
i1850 = (i1850 +  (int64_t)1);
if ((i1850 ==  (int64_t)1024)) {
i1850 =  (int64_t)0;
i1849 = (i1849 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp771);
ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp825,  (int32_t)12);

uint64_t* tmp827 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp827, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp823, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp825, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp823);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp825);

uint64_t* tmp830 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1864;

int64_t i1863;

int64_t i1862;

int64_t i1861;

int64_t i1860;

int64_t i1859;

int64_t i1858;

int64_t i1857;
i1857 =  (int64_t)0;
i1858 =  (int64_t)0;
i1859 =  (int64_t)0;
i1860 =  (int64_t)0;
for (uint64_t i1861 =  (int32_t)0; i1861 <  (int32_t)1; i1861++){
for (uint64_t i1863 =  (int32_t)0; i1863 <  (int32_t)16; i1863++){
for (uint64_t i1864 =  (int32_t)0; i1864 <  (int32_t)16; i1864++){
for (uint64_t i1862 =  (int32_t)0; i1862 <  (int32_t)1024; i1862++){
Arr4DIdxRowM(tmp830, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1861,i1862,i1863,i1864) = Arr4DIdxRowM(tmp827, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1857,i1858,i1859,i1860);
i1860 = (i1860 +  (int64_t)1);
if ((i1860 ==  (int64_t)1024)) {
i1860 =  (int64_t)0;
i1859 = (i1859 +  (int64_t)1);
if ((i1859 ==  (int64_t)16)) {
i1859 =  (int64_t)0;
i1858 = (i1858 +  (int64_t)1);
if ((i1858 ==  (int64_t)16)) {
i1858 =  (int64_t)0;
i1857 = (i1857 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp827);

uint64_t* tmp832 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1872;

int64_t i1871;

int64_t i1870;

int64_t i1869;

int64_t i1868;

int64_t i1867;

int64_t i1866;

int64_t i1865;
i1865 =  (int64_t)0;
i1866 =  (int64_t)0;
i1867 =  (int64_t)0;
i1868 =  (int64_t)0;
for (uint64_t i1869 =  (int32_t)0; i1869 <  (int32_t)1; i1869++){
for (uint64_t i1872 =  (int32_t)0; i1872 <  (int32_t)1024; i1872++){
for (uint64_t i1870 =  (int32_t)0; i1870 <  (int32_t)16; i1870++){
for (uint64_t i1871 =  (int32_t)0; i1871 <  (int32_t)16; i1871++){
Arr4DIdxRowM(tmp832, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1869,i1870,i1871,i1872) = Arr4DIdxRowM(tmp830, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1865,i1866,i1867,i1868);
i1868 = (i1868 +  (int64_t)1);
if ((i1868 ==  (int64_t)16)) {
i1868 =  (int64_t)0;
i1867 = (i1867 +  (int64_t)1);
if ((i1867 ==  (int64_t)16)) {
i1867 =  (int64_t)0;
i1866 = (i1866 +  (int64_t)1);
if ((i1866 ==  (int64_t)1024)) {
i1866 =  (int64_t)0;
i1865 = (i1865 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp830);

uint64_t* tmp834 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp832, tmp834,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp832);

uint64_t* tmp836 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1880;

int64_t i1879;

int64_t i1878;

int64_t i1877;

int64_t i1876;

int64_t i1875;

int64_t i1874;

int64_t i1873;
i1873 =  (int64_t)0;
i1874 =  (int64_t)0;
i1875 =  (int64_t)0;
i1876 =  (int64_t)0;
for (uint64_t i1877 =  (int32_t)0; i1877 <  (int32_t)1; i1877++){
for (uint64_t i1879 =  (int32_t)0; i1879 <  (int32_t)16; i1879++){
for (uint64_t i1880 =  (int32_t)0; i1880 <  (int32_t)16; i1880++){
for (uint64_t i1878 =  (int32_t)0; i1878 <  (int32_t)1024; i1878++){
Arr4DIdxRowM(tmp836, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1877,i1878,i1879,i1880) = Arr4DIdxRowM(tmp834, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1873,i1874,i1875,i1876);
i1876 = (i1876 +  (int64_t)1);
if ((i1876 ==  (int64_t)1024)) {
i1876 =  (int64_t)0;
i1875 = (i1875 +  (int64_t)1);
if ((i1875 ==  (int64_t)16)) {
i1875 =  (int64_t)0;
i1874 = (i1874 +  (int64_t)1);
if ((i1874 ==  (int64_t)16)) {
i1874 =  (int64_t)0;
i1873 = (i1873 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp834);

uint64_t* tmp838 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i1888;

int64_t i1887;

int64_t i1886;

int64_t i1885;

int64_t i1884;

int64_t i1883;

int64_t i1882;

int64_t i1881;
i1881 =  (int64_t)0;
i1882 =  (int64_t)0;
i1883 =  (int64_t)0;
i1884 =  (int64_t)0;
for (uint64_t i1885 =  (int32_t)0; i1885 <  (int32_t)1; i1885++){
for (uint64_t i1888 =  (int32_t)0; i1888 <  (int32_t)1024; i1888++){
for (uint64_t i1886 =  (int32_t)0; i1886 <  (int32_t)16; i1886++){
for (uint64_t i1887 =  (int32_t)0; i1887 <  (int32_t)16; i1887++){
Arr4DIdxRowM(tmp838, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1885,i1886,i1887,i1888) = Arr4DIdxRowM(tmp836, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1881,i1882,i1883,i1884);
i1884 = (i1884 +  (int64_t)1);
if ((i1884 ==  (int64_t)16)) {
i1884 =  (int64_t)0;
i1883 = (i1883 +  (int64_t)1);
if ((i1883 ==  (int64_t)16)) {
i1883 =  (int64_t)0;
i1882 = (i1882 +  (int64_t)1);
if ((i1882 ==  (int64_t)1024)) {
i1882 =  (int64_t)0;
i1881 = (i1881 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp839 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);

int64_t i1896;

int64_t i1895;

int64_t i1894;

int64_t i1893;

int64_t i1892;

int64_t i1891;

int64_t i1890;

int64_t i1889;
i1889 =  (int64_t)0;
i1890 =  (int64_t)0;
i1891 =  (int64_t)0;
i1892 =  (int64_t)0;
for (uint64_t i1896 =  (int32_t)0; i1896 <  (int32_t)256; i1896++){
for (uint64_t i1895 =  (int32_t)0; i1895 <  (int32_t)1024; i1895++){
for (uint64_t i1893 =  (int32_t)0; i1893 <  (int32_t)1; i1893++){
for (uint64_t i1894 =  (int32_t)0; i1894 <  (int32_t)1; i1894++){
Arr4DIdxRowM(tmp839, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)256,i1893,i1894,i1895,i1896) = Arr4DIdxRowM(tmp45, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i1889,i1890,i1891,i1892);
i1892 = (i1892 +  (int64_t)1);
if ((i1892 ==  (int64_t)1)) {
i1892 =  (int64_t)0;
i1891 = (i1891 +  (int64_t)1);
if ((i1891 ==  (int64_t)1)) {
i1891 =  (int64_t)0;
i1890 = (i1890 +  (int64_t)1);
if ((i1890 ==  (int64_t)1024)) {
i1890 =  (int64_t)0;
i1889 = (i1889 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp45);

uint64_t* tmp841 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp838, tmp839, tmp841);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp839);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp838);

uint64_t* tmp844 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1901;

int64_t i1900;

int64_t i1899;

int64_t i1898;

int64_t i1897;
i1897 =  (int64_t)0;
for (uint64_t i1898 =  (int32_t)0; i1898 <  (int32_t)1; i1898++){
for (uint64_t i1899 =  (int32_t)0; i1899 <  (int32_t)1; i1899++){
for (uint64_t i1900 =  (int32_t)0; i1900 <  (int32_t)1; i1900++){
for (uint64_t i1901 =  (int32_t)0; i1901 <  (int32_t)256; i1901++){
Arr4DIdxRowM(tmp844, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1898,i1899,i1900,i1901) = Arr1DIdxRowM(tmp8, (int32_t)256,i1897);
i1897 = (i1897 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp844,  (int32_t)12);

uint64_t* tmp845 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp845, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp841, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp844, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp844);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp841);

uint64_t* tmp848 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1909;

int64_t i1908;

int64_t i1907;

int64_t i1906;

int64_t i1905;

int64_t i1904;

int64_t i1903;

int64_t i1902;
i1902 =  (int64_t)0;
i1903 =  (int64_t)0;
i1904 =  (int64_t)0;
i1905 =  (int64_t)0;
for (uint64_t i1906 =  (int32_t)0; i1906 <  (int32_t)1; i1906++){
for (uint64_t i1908 =  (int32_t)0; i1908 <  (int32_t)16; i1908++){
for (uint64_t i1909 =  (int32_t)0; i1909 <  (int32_t)16; i1909++){
for (uint64_t i1907 =  (int32_t)0; i1907 <  (int32_t)256; i1907++){
Arr4DIdxRowM(tmp848, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1906,i1907,i1908,i1909) = Arr4DIdxRowM(tmp845, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1902,i1903,i1904,i1905);
i1905 = (i1905 +  (int64_t)1);
if ((i1905 ==  (int64_t)256)) {
i1905 =  (int64_t)0;
i1904 = (i1904 +  (int64_t)1);
if ((i1904 ==  (int64_t)16)) {
i1904 =  (int64_t)0;
i1903 = (i1903 +  (int64_t)1);
if ((i1903 ==  (int64_t)16)) {
i1903 =  (int64_t)0;
i1902 = (i1902 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp845);

uint64_t* tmp850 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1917;

int64_t i1916;

int64_t i1915;

int64_t i1914;

int64_t i1913;

int64_t i1912;

int64_t i1911;

int64_t i1910;
i1910 =  (int64_t)0;
i1911 =  (int64_t)0;
i1912 =  (int64_t)0;
i1913 =  (int64_t)0;
for (uint64_t i1914 =  (int32_t)0; i1914 <  (int32_t)1; i1914++){
for (uint64_t i1917 =  (int32_t)0; i1917 <  (int32_t)256; i1917++){
for (uint64_t i1915 =  (int32_t)0; i1915 <  (int32_t)16; i1915++){
for (uint64_t i1916 =  (int32_t)0; i1916 <  (int32_t)16; i1916++){
Arr4DIdxRowM(tmp850, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1914,i1915,i1916,i1917) = Arr4DIdxRowM(tmp848, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1910,i1911,i1912,i1913);
i1913 = (i1913 +  (int64_t)1);
if ((i1913 ==  (int64_t)16)) {
i1913 =  (int64_t)0;
i1912 = (i1912 +  (int64_t)1);
if ((i1912 ==  (int64_t)16)) {
i1912 =  (int64_t)0;
i1911 = (i1911 +  (int64_t)1);
if ((i1911 ==  (int64_t)256)) {
i1911 =  (int64_t)0;
i1910 = (i1910 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp848);

uint64_t* tmp852 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp850, tmp852,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp850);

uint64_t* tmp854 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1925;

int64_t i1924;

int64_t i1923;

int64_t i1922;

int64_t i1921;

int64_t i1920;

int64_t i1919;

int64_t i1918;
i1918 =  (int64_t)0;
i1919 =  (int64_t)0;
i1920 =  (int64_t)0;
i1921 =  (int64_t)0;
for (uint64_t i1922 =  (int32_t)0; i1922 <  (int32_t)1; i1922++){
for (uint64_t i1924 =  (int32_t)0; i1924 <  (int32_t)16; i1924++){
for (uint64_t i1925 =  (int32_t)0; i1925 <  (int32_t)16; i1925++){
for (uint64_t i1923 =  (int32_t)0; i1923 <  (int32_t)256; i1923++){
Arr4DIdxRowM(tmp854, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1922,i1923,i1924,i1925) = Arr4DIdxRowM(tmp852, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1918,i1919,i1920,i1921);
i1921 = (i1921 +  (int64_t)1);
if ((i1921 ==  (int64_t)256)) {
i1921 =  (int64_t)0;
i1920 = (i1920 +  (int64_t)1);
if ((i1920 ==  (int64_t)16)) {
i1920 =  (int64_t)0;
i1919 = (i1919 +  (int64_t)1);
if ((i1919 ==  (int64_t)16)) {
i1919 =  (int64_t)0;
i1918 = (i1918 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp852);

uint64_t* tmp856 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1933;

int64_t i1932;

int64_t i1931;

int64_t i1930;

int64_t i1929;

int64_t i1928;

int64_t i1927;

int64_t i1926;
i1926 =  (int64_t)0;
i1927 =  (int64_t)0;
i1928 =  (int64_t)0;
i1929 =  (int64_t)0;
for (uint64_t i1930 =  (int32_t)0; i1930 <  (int32_t)1; i1930++){
for (uint64_t i1933 =  (int32_t)0; i1933 <  (int32_t)256; i1933++){
for (uint64_t i1931 =  (int32_t)0; i1931 <  (int32_t)16; i1931++){
for (uint64_t i1932 =  (int32_t)0; i1932 <  (int32_t)16; i1932++){
Arr4DIdxRowM(tmp856, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1930,i1931,i1932,i1933) = Arr4DIdxRowM(tmp854, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1926,i1927,i1928,i1929);
i1929 = (i1929 +  (int64_t)1);
if ((i1929 ==  (int64_t)16)) {
i1929 =  (int64_t)0;
i1928 = (i1928 +  (int64_t)1);
if ((i1928 ==  (int64_t)16)) {
i1928 =  (int64_t)0;
i1927 = (i1927 +  (int64_t)1);
if ((i1927 ==  (int64_t)256)) {
i1927 =  (int64_t)0;
i1926 = (i1926 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp854);

uint64_t* tmp858 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i1941;

int64_t i1940;

int64_t i1939;

int64_t i1938;

int64_t i1937;

int64_t i1936;

int64_t i1935;

int64_t i1934;
i1934 =  (int64_t)0;
i1935 =  (int64_t)0;
i1936 =  (int64_t)0;
i1937 =  (int64_t)0;
for (uint64_t i1941 =  (int32_t)0; i1941 <  (int32_t)256; i1941++){
for (uint64_t i1940 =  (int32_t)0; i1940 <  (int32_t)256; i1940++){
for (uint64_t i1938 =  (int32_t)0; i1938 <  (int32_t)3; i1938++){
for (uint64_t i1939 =  (int32_t)0; i1939 <  (int32_t)3; i1939++){
Arr4DIdxRowM(tmp858, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i1938,i1939,i1940,i1941) = Arr4DIdxRowM(tmp46, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i1934,i1935,i1936,i1937);
i1937 = (i1937 +  (int64_t)1);
if ((i1937 ==  (int64_t)3)) {
i1937 =  (int64_t)0;
i1936 = (i1936 +  (int64_t)1);
if ((i1936 ==  (int64_t)3)) {
i1936 =  (int64_t)0;
i1935 = (i1935 +  (int64_t)1);
if ((i1935 ==  (int64_t)256)) {
i1935 =  (int64_t)0;
i1934 = (i1934 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp46);

uint64_t* tmp860 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp856, tmp858, tmp860);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp858);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp856);

uint64_t* tmp863 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i1946;

int64_t i1945;

int64_t i1944;

int64_t i1943;

int64_t i1942;
i1942 =  (int64_t)0;
for (uint64_t i1943 =  (int32_t)0; i1943 <  (int32_t)1; i1943++){
for (uint64_t i1944 =  (int32_t)0; i1944 <  (int32_t)1; i1944++){
for (uint64_t i1945 =  (int32_t)0; i1945 <  (int32_t)1; i1945++){
for (uint64_t i1946 =  (int32_t)0; i1946 <  (int32_t)256; i1946++){
Arr4DIdxRowM(tmp863, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i1943,i1944,i1945,i1946) = Arr1DIdxRowM(tmp8, (int32_t)256,i1942);
i1942 = (i1942 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp863,  (int32_t)12);

uint64_t* tmp864 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp864, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp860, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp863, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp863);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp860);

uint64_t* tmp867 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1954;

int64_t i1953;

int64_t i1952;

int64_t i1951;

int64_t i1950;

int64_t i1949;

int64_t i1948;

int64_t i1947;
i1947 =  (int64_t)0;
i1948 =  (int64_t)0;
i1949 =  (int64_t)0;
i1950 =  (int64_t)0;
for (uint64_t i1951 =  (int32_t)0; i1951 <  (int32_t)1; i1951++){
for (uint64_t i1953 =  (int32_t)0; i1953 <  (int32_t)16; i1953++){
for (uint64_t i1954 =  (int32_t)0; i1954 <  (int32_t)16; i1954++){
for (uint64_t i1952 =  (int32_t)0; i1952 <  (int32_t)256; i1952++){
Arr4DIdxRowM(tmp867, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1951,i1952,i1953,i1954) = Arr4DIdxRowM(tmp864, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1947,i1948,i1949,i1950);
i1950 = (i1950 +  (int64_t)1);
if ((i1950 ==  (int64_t)256)) {
i1950 =  (int64_t)0;
i1949 = (i1949 +  (int64_t)1);
if ((i1949 ==  (int64_t)16)) {
i1949 =  (int64_t)0;
i1948 = (i1948 +  (int64_t)1);
if ((i1948 ==  (int64_t)16)) {
i1948 =  (int64_t)0;
i1947 = (i1947 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp864);

uint64_t* tmp869 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1962;

int64_t i1961;

int64_t i1960;

int64_t i1959;

int64_t i1958;

int64_t i1957;

int64_t i1956;

int64_t i1955;
i1955 =  (int64_t)0;
i1956 =  (int64_t)0;
i1957 =  (int64_t)0;
i1958 =  (int64_t)0;
for (uint64_t i1959 =  (int32_t)0; i1959 <  (int32_t)1; i1959++){
for (uint64_t i1962 =  (int32_t)0; i1962 <  (int32_t)256; i1962++){
for (uint64_t i1960 =  (int32_t)0; i1960 <  (int32_t)16; i1960++){
for (uint64_t i1961 =  (int32_t)0; i1961 <  (int32_t)16; i1961++){
Arr4DIdxRowM(tmp869, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1959,i1960,i1961,i1962) = Arr4DIdxRowM(tmp867, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1955,i1956,i1957,i1958);
i1958 = (i1958 +  (int64_t)1);
if ((i1958 ==  (int64_t)16)) {
i1958 =  (int64_t)0;
i1957 = (i1957 +  (int64_t)1);
if ((i1957 ==  (int64_t)16)) {
i1957 =  (int64_t)0;
i1956 = (i1956 +  (int64_t)1);
if ((i1956 ==  (int64_t)256)) {
i1956 =  (int64_t)0;
i1955 = (i1955 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp867);

uint64_t* tmp871 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp869, tmp871,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp869);

uint64_t* tmp873 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i1970;

int64_t i1969;

int64_t i1968;

int64_t i1967;

int64_t i1966;

int64_t i1965;

int64_t i1964;

int64_t i1963;
i1963 =  (int64_t)0;
i1964 =  (int64_t)0;
i1965 =  (int64_t)0;
i1966 =  (int64_t)0;
for (uint64_t i1967 =  (int32_t)0; i1967 <  (int32_t)1; i1967++){
for (uint64_t i1969 =  (int32_t)0; i1969 <  (int32_t)16; i1969++){
for (uint64_t i1970 =  (int32_t)0; i1970 <  (int32_t)16; i1970++){
for (uint64_t i1968 =  (int32_t)0; i1968 <  (int32_t)256; i1968++){
Arr4DIdxRowM(tmp873, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1967,i1968,i1969,i1970) = Arr4DIdxRowM(tmp871, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1963,i1964,i1965,i1966);
i1966 = (i1966 +  (int64_t)1);
if ((i1966 ==  (int64_t)256)) {
i1966 =  (int64_t)0;
i1965 = (i1965 +  (int64_t)1);
if ((i1965 ==  (int64_t)16)) {
i1965 =  (int64_t)0;
i1964 = (i1964 +  (int64_t)1);
if ((i1964 ==  (int64_t)16)) {
i1964 =  (int64_t)0;
i1963 = (i1963 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp871);

uint64_t* tmp875 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i1978;

int64_t i1977;

int64_t i1976;

int64_t i1975;

int64_t i1974;

int64_t i1973;

int64_t i1972;

int64_t i1971;
i1971 =  (int64_t)0;
i1972 =  (int64_t)0;
i1973 =  (int64_t)0;
i1974 =  (int64_t)0;
for (uint64_t i1975 =  (int32_t)0; i1975 <  (int32_t)1; i1975++){
for (uint64_t i1978 =  (int32_t)0; i1978 <  (int32_t)256; i1978++){
for (uint64_t i1976 =  (int32_t)0; i1976 <  (int32_t)16; i1976++){
for (uint64_t i1977 =  (int32_t)0; i1977 <  (int32_t)16; i1977++){
Arr4DIdxRowM(tmp875, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i1975,i1976,i1977,i1978) = Arr4DIdxRowM(tmp873, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i1971,i1972,i1973,i1974);
i1974 = (i1974 +  (int64_t)1);
if ((i1974 ==  (int64_t)16)) {
i1974 =  (int64_t)0;
i1973 = (i1973 +  (int64_t)1);
if ((i1973 ==  (int64_t)16)) {
i1973 =  (int64_t)0;
i1972 = (i1972 +  (int64_t)1);
if ((i1972 ==  (int64_t)256)) {
i1972 =  (int64_t)0;
i1971 = (i1971 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp873);

uint64_t* tmp877 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i1986;

int64_t i1985;

int64_t i1984;

int64_t i1983;

int64_t i1982;

int64_t i1981;

int64_t i1980;

int64_t i1979;
i1979 =  (int64_t)0;
i1980 =  (int64_t)0;
i1981 =  (int64_t)0;
i1982 =  (int64_t)0;
for (uint64_t i1986 =  (int32_t)0; i1986 <  (int32_t)1024; i1986++){
for (uint64_t i1985 =  (int32_t)0; i1985 <  (int32_t)256; i1985++){
for (uint64_t i1983 =  (int32_t)0; i1983 <  (int32_t)1; i1983++){
for (uint64_t i1984 =  (int32_t)0; i1984 <  (int32_t)1; i1984++){
Arr4DIdxRowM(tmp877, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i1983,i1984,i1985,i1986) = Arr4DIdxRowM(tmp47, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i1979,i1980,i1981,i1982);
i1982 = (i1982 +  (int64_t)1);
if ((i1982 ==  (int64_t)1)) {
i1982 =  (int64_t)0;
i1981 = (i1981 +  (int64_t)1);
if ((i1981 ==  (int64_t)1)) {
i1981 =  (int64_t)0;
i1980 = (i1980 +  (int64_t)1);
if ((i1980 ==  (int64_t)256)) {
i1980 =  (int64_t)0;
i1979 = (i1979 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp47);

uint64_t* tmp879 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp875, tmp877, tmp879);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp875);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp877);

uint64_t* tmp882 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i1991;

int64_t i1990;

int64_t i1989;

int64_t i1988;

int64_t i1987;
i1987 =  (int64_t)0;
for (uint64_t i1988 =  (int32_t)0; i1988 <  (int32_t)1; i1988++){
for (uint64_t i1989 =  (int32_t)0; i1989 <  (int32_t)1; i1989++){
for (uint64_t i1990 =  (int32_t)0; i1990 <  (int32_t)1; i1990++){
for (uint64_t i1991 =  (int32_t)0; i1991 <  (int32_t)1024; i1991++){
Arr4DIdxRowM(tmp882, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i1988,i1989,i1990,i1991) = Arr1DIdxRowM(tmp34, (int32_t)1024,i1987);
i1987 = (i1987 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp882,  (int32_t)12);

uint64_t* tmp883 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp883, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp879, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp882, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp882);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp879);

uint64_t* tmp886 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i1999;

int64_t i1998;

int64_t i1997;

int64_t i1996;

int64_t i1995;

int64_t i1994;

int64_t i1993;

int64_t i1992;
i1992 =  (int64_t)0;
i1993 =  (int64_t)0;
i1994 =  (int64_t)0;
i1995 =  (int64_t)0;
for (uint64_t i1996 =  (int32_t)0; i1996 <  (int32_t)1; i1996++){
for (uint64_t i1998 =  (int32_t)0; i1998 <  (int32_t)16; i1998++){
for (uint64_t i1999 =  (int32_t)0; i1999 <  (int32_t)16; i1999++){
for (uint64_t i1997 =  (int32_t)0; i1997 <  (int32_t)1024; i1997++){
Arr4DIdxRowM(tmp886, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i1996,i1997,i1998,i1999) = Arr4DIdxRowM(tmp883, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i1992,i1993,i1994,i1995);
i1995 = (i1995 +  (int64_t)1);
if ((i1995 ==  (int64_t)1024)) {
i1995 =  (int64_t)0;
i1994 = (i1994 +  (int64_t)1);
if ((i1994 ==  (int64_t)16)) {
i1994 =  (int64_t)0;
i1993 = (i1993 +  (int64_t)1);
if ((i1993 ==  (int64_t)16)) {
i1993 =  (int64_t)0;
i1992 = (i1992 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp883);

uint64_t* tmp888 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2007;

int64_t i2006;

int64_t i2005;

int64_t i2004;

int64_t i2003;

int64_t i2002;

int64_t i2001;

int64_t i2000;
i2000 =  (int64_t)0;
i2001 =  (int64_t)0;
i2002 =  (int64_t)0;
i2003 =  (int64_t)0;
for (uint64_t i2004 =  (int32_t)0; i2004 <  (int32_t)1; i2004++){
for (uint64_t i2007 =  (int32_t)0; i2007 <  (int32_t)1024; i2007++){
for (uint64_t i2005 =  (int32_t)0; i2005 <  (int32_t)16; i2005++){
for (uint64_t i2006 =  (int32_t)0; i2006 <  (int32_t)16; i2006++){
Arr4DIdxRowM(tmp888, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2004,i2005,i2006,i2007) = Arr4DIdxRowM(tmp886, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2000,i2001,i2002,i2003);
i2003 = (i2003 +  (int64_t)1);
if ((i2003 ==  (int64_t)16)) {
i2003 =  (int64_t)0;
i2002 = (i2002 +  (int64_t)1);
if ((i2002 ==  (int64_t)16)) {
i2002 =  (int64_t)0;
i2001 = (i2001 +  (int64_t)1);
if ((i2001 ==  (int64_t)1024)) {
i2001 =  (int64_t)0;
i2000 = (i2000 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp886);

uint64_t* tmp890 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2015;

int64_t i2014;

int64_t i2013;

int64_t i2012;

int64_t i2011;

int64_t i2010;

int64_t i2009;

int64_t i2008;
i2008 =  (int64_t)0;
i2009 =  (int64_t)0;
i2010 =  (int64_t)0;
i2011 =  (int64_t)0;
for (uint64_t i2012 =  (int32_t)0; i2012 <  (int32_t)1; i2012++){
for (uint64_t i2015 =  (int32_t)0; i2015 <  (int32_t)1024; i2015++){
for (uint64_t i2013 =  (int32_t)0; i2013 <  (int32_t)16; i2013++){
for (uint64_t i2014 =  (int32_t)0; i2014 <  (int32_t)16; i2014++){
Arr4DIdxRowM(tmp890, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2012,i2013,i2014,i2015) = Arr4DIdxRowM(tmp836, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2008,i2009,i2010,i2011);
i2011 = (i2011 +  (int64_t)1);
if ((i2011 ==  (int64_t)16)) {
i2011 =  (int64_t)0;
i2010 = (i2010 +  (int64_t)1);
if ((i2010 ==  (int64_t)16)) {
i2010 =  (int64_t)0;
i2009 = (i2009 +  (int64_t)1);
if ((i2009 ==  (int64_t)1024)) {
i2009 =  (int64_t)0;
i2008 = (i2008 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp836);
ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp890,  (int32_t)12);

uint64_t* tmp892 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp892, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp888, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp890, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp890);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp888);

uint64_t* tmp895 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i2023;

int64_t i2022;

int64_t i2021;

int64_t i2020;

int64_t i2019;

int64_t i2018;

int64_t i2017;

int64_t i2016;
i2016 =  (int64_t)0;
i2017 =  (int64_t)0;
i2018 =  (int64_t)0;
i2019 =  (int64_t)0;
for (uint64_t i2020 =  (int32_t)0; i2020 <  (int32_t)1; i2020++){
for (uint64_t i2022 =  (int32_t)0; i2022 <  (int32_t)16; i2022++){
for (uint64_t i2023 =  (int32_t)0; i2023 <  (int32_t)16; i2023++){
for (uint64_t i2021 =  (int32_t)0; i2021 <  (int32_t)1024; i2021++){
Arr4DIdxRowM(tmp895, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2020,i2021,i2022,i2023) = Arr4DIdxRowM(tmp892, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2016,i2017,i2018,i2019);
i2019 = (i2019 +  (int64_t)1);
if ((i2019 ==  (int64_t)1024)) {
i2019 =  (int64_t)0;
i2018 = (i2018 +  (int64_t)1);
if ((i2018 ==  (int64_t)16)) {
i2018 =  (int64_t)0;
i2017 = (i2017 +  (int64_t)1);
if ((i2017 ==  (int64_t)16)) {
i2017 =  (int64_t)0;
i2016 = (i2016 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp892);

uint64_t* tmp897 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2031;

int64_t i2030;

int64_t i2029;

int64_t i2028;

int64_t i2027;

int64_t i2026;

int64_t i2025;

int64_t i2024;
i2024 =  (int64_t)0;
i2025 =  (int64_t)0;
i2026 =  (int64_t)0;
i2027 =  (int64_t)0;
for (uint64_t i2028 =  (int32_t)0; i2028 <  (int32_t)1; i2028++){
for (uint64_t i2031 =  (int32_t)0; i2031 <  (int32_t)1024; i2031++){
for (uint64_t i2029 =  (int32_t)0; i2029 <  (int32_t)16; i2029++){
for (uint64_t i2030 =  (int32_t)0; i2030 <  (int32_t)16; i2030++){
Arr4DIdxRowM(tmp897, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2028,i2029,i2030,i2031) = Arr4DIdxRowM(tmp895, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2024,i2025,i2026,i2027);
i2027 = (i2027 +  (int64_t)1);
if ((i2027 ==  (int64_t)16)) {
i2027 =  (int64_t)0;
i2026 = (i2026 +  (int64_t)1);
if ((i2026 ==  (int64_t)16)) {
i2026 =  (int64_t)0;
i2025 = (i2025 +  (int64_t)1);
if ((i2025 ==  (int64_t)1024)) {
i2025 =  (int64_t)0;
i2024 = (i2024 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp895);

uint64_t* tmp899 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp897, tmp899,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp897);

uint64_t* tmp901 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i2039;

int64_t i2038;

int64_t i2037;

int64_t i2036;

int64_t i2035;

int64_t i2034;

int64_t i2033;

int64_t i2032;
i2032 =  (int64_t)0;
i2033 =  (int64_t)0;
i2034 =  (int64_t)0;
i2035 =  (int64_t)0;
for (uint64_t i2036 =  (int32_t)0; i2036 <  (int32_t)1; i2036++){
for (uint64_t i2038 =  (int32_t)0; i2038 <  (int32_t)16; i2038++){
for (uint64_t i2039 =  (int32_t)0; i2039 <  (int32_t)16; i2039++){
for (uint64_t i2037 =  (int32_t)0; i2037 <  (int32_t)1024; i2037++){
Arr4DIdxRowM(tmp901, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2036,i2037,i2038,i2039) = Arr4DIdxRowM(tmp899, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2032,i2033,i2034,i2035);
i2035 = (i2035 +  (int64_t)1);
if ((i2035 ==  (int64_t)1024)) {
i2035 =  (int64_t)0;
i2034 = (i2034 +  (int64_t)1);
if ((i2034 ==  (int64_t)16)) {
i2034 =  (int64_t)0;
i2033 = (i2033 +  (int64_t)1);
if ((i2033 ==  (int64_t)16)) {
i2033 =  (int64_t)0;
i2032 = (i2032 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp899);

uint64_t* tmp903 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2047;

int64_t i2046;

int64_t i2045;

int64_t i2044;

int64_t i2043;

int64_t i2042;

int64_t i2041;

int64_t i2040;
i2040 =  (int64_t)0;
i2041 =  (int64_t)0;
i2042 =  (int64_t)0;
i2043 =  (int64_t)0;
for (uint64_t i2044 =  (int32_t)0; i2044 <  (int32_t)1; i2044++){
for (uint64_t i2047 =  (int32_t)0; i2047 <  (int32_t)1024; i2047++){
for (uint64_t i2045 =  (int32_t)0; i2045 <  (int32_t)16; i2045++){
for (uint64_t i2046 =  (int32_t)0; i2046 <  (int32_t)16; i2046++){
Arr4DIdxRowM(tmp903, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2044,i2045,i2046,i2047) = Arr4DIdxRowM(tmp901, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2040,i2041,i2042,i2043);
i2043 = (i2043 +  (int64_t)1);
if ((i2043 ==  (int64_t)16)) {
i2043 =  (int64_t)0;
i2042 = (i2042 +  (int64_t)1);
if ((i2042 ==  (int64_t)16)) {
i2042 =  (int64_t)0;
i2041 = (i2041 +  (int64_t)1);
if ((i2041 ==  (int64_t)1024)) {
i2041 =  (int64_t)0;
i2040 = (i2040 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp904 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);

int64_t i2055;

int64_t i2054;

int64_t i2053;

int64_t i2052;

int64_t i2051;

int64_t i2050;

int64_t i2049;

int64_t i2048;
i2048 =  (int64_t)0;
i2049 =  (int64_t)0;
i2050 =  (int64_t)0;
i2051 =  (int64_t)0;
for (uint64_t i2055 =  (int32_t)0; i2055 <  (int32_t)256; i2055++){
for (uint64_t i2054 =  (int32_t)0; i2054 <  (int32_t)1024; i2054++){
for (uint64_t i2052 =  (int32_t)0; i2052 <  (int32_t)1; i2052++){
for (uint64_t i2053 =  (int32_t)0; i2053 <  (int32_t)1; i2053++){
Arr4DIdxRowM(tmp904, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)256,i2052,i2053,i2054,i2055) = Arr4DIdxRowM(tmp48, (int32_t)256, (int32_t)1024, (int32_t)1, (int32_t)1,i2048,i2049,i2050,i2051);
i2051 = (i2051 +  (int64_t)1);
if ((i2051 ==  (int64_t)1)) {
i2051 =  (int64_t)0;
i2050 = (i2050 +  (int64_t)1);
if ((i2050 ==  (int64_t)1)) {
i2050 =  (int64_t)0;
i2049 = (i2049 +  (int64_t)1);
if ((i2049 ==  (int64_t)1024)) {
i2049 =  (int64_t)0;
i2048 = (i2048 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp48);

uint64_t* tmp906 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp903, tmp904, tmp906);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp903);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp904);

uint64_t* tmp909 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i2060;

int64_t i2059;

int64_t i2058;

int64_t i2057;

int64_t i2056;
i2056 =  (int64_t)0;
for (uint64_t i2057 =  (int32_t)0; i2057 <  (int32_t)1; i2057++){
for (uint64_t i2058 =  (int32_t)0; i2058 <  (int32_t)1; i2058++){
for (uint64_t i2059 =  (int32_t)0; i2059 <  (int32_t)1; i2059++){
for (uint64_t i2060 =  (int32_t)0; i2060 <  (int32_t)256; i2060++){
Arr4DIdxRowM(tmp909, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i2057,i2058,i2059,i2060) = Arr1DIdxRowM(tmp8, (int32_t)256,i2056);
i2056 = (i2056 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp909,  (int32_t)12);

uint64_t* tmp910 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp910, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp906, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp909, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp909);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp906);

uint64_t* tmp913 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i2068;

int64_t i2067;

int64_t i2066;

int64_t i2065;

int64_t i2064;

int64_t i2063;

int64_t i2062;

int64_t i2061;
i2061 =  (int64_t)0;
i2062 =  (int64_t)0;
i2063 =  (int64_t)0;
i2064 =  (int64_t)0;
for (uint64_t i2065 =  (int32_t)0; i2065 <  (int32_t)1; i2065++){
for (uint64_t i2067 =  (int32_t)0; i2067 <  (int32_t)16; i2067++){
for (uint64_t i2068 =  (int32_t)0; i2068 <  (int32_t)16; i2068++){
for (uint64_t i2066 =  (int32_t)0; i2066 <  (int32_t)256; i2066++){
Arr4DIdxRowM(tmp913, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2065,i2066,i2067,i2068) = Arr4DIdxRowM(tmp910, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2061,i2062,i2063,i2064);
i2064 = (i2064 +  (int64_t)1);
if ((i2064 ==  (int64_t)256)) {
i2064 =  (int64_t)0;
i2063 = (i2063 +  (int64_t)1);
if ((i2063 ==  (int64_t)16)) {
i2063 =  (int64_t)0;
i2062 = (i2062 +  (int64_t)1);
if ((i2062 ==  (int64_t)16)) {
i2062 =  (int64_t)0;
i2061 = (i2061 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp910);

uint64_t* tmp915 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i2076;

int64_t i2075;

int64_t i2074;

int64_t i2073;

int64_t i2072;

int64_t i2071;

int64_t i2070;

int64_t i2069;
i2069 =  (int64_t)0;
i2070 =  (int64_t)0;
i2071 =  (int64_t)0;
i2072 =  (int64_t)0;
for (uint64_t i2073 =  (int32_t)0; i2073 <  (int32_t)1; i2073++){
for (uint64_t i2076 =  (int32_t)0; i2076 <  (int32_t)256; i2076++){
for (uint64_t i2074 =  (int32_t)0; i2074 <  (int32_t)16; i2074++){
for (uint64_t i2075 =  (int32_t)0; i2075 <  (int32_t)16; i2075++){
Arr4DIdxRowM(tmp915, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2073,i2074,i2075,i2076) = Arr4DIdxRowM(tmp913, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2069,i2070,i2071,i2072);
i2072 = (i2072 +  (int64_t)1);
if ((i2072 ==  (int64_t)16)) {
i2072 =  (int64_t)0;
i2071 = (i2071 +  (int64_t)1);
if ((i2071 ==  (int64_t)16)) {
i2071 =  (int64_t)0;
i2070 = (i2070 +  (int64_t)1);
if ((i2070 ==  (int64_t)256)) {
i2070 =  (int64_t)0;
i2069 = (i2069 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp913);

uint64_t* tmp917 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp915, tmp917,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp915);

uint64_t* tmp919 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i2084;

int64_t i2083;

int64_t i2082;

int64_t i2081;

int64_t i2080;

int64_t i2079;

int64_t i2078;

int64_t i2077;
i2077 =  (int64_t)0;
i2078 =  (int64_t)0;
i2079 =  (int64_t)0;
i2080 =  (int64_t)0;
for (uint64_t i2081 =  (int32_t)0; i2081 <  (int32_t)1; i2081++){
for (uint64_t i2083 =  (int32_t)0; i2083 <  (int32_t)16; i2083++){
for (uint64_t i2084 =  (int32_t)0; i2084 <  (int32_t)16; i2084++){
for (uint64_t i2082 =  (int32_t)0; i2082 <  (int32_t)256; i2082++){
Arr4DIdxRowM(tmp919, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2081,i2082,i2083,i2084) = Arr4DIdxRowM(tmp917, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2077,i2078,i2079,i2080);
i2080 = (i2080 +  (int64_t)1);
if ((i2080 ==  (int64_t)256)) {
i2080 =  (int64_t)0;
i2079 = (i2079 +  (int64_t)1);
if ((i2079 ==  (int64_t)16)) {
i2079 =  (int64_t)0;
i2078 = (i2078 +  (int64_t)1);
if ((i2078 ==  (int64_t)16)) {
i2078 =  (int64_t)0;
i2077 = (i2077 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp917);

uint64_t* tmp921 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i2092;

int64_t i2091;

int64_t i2090;

int64_t i2089;

int64_t i2088;

int64_t i2087;

int64_t i2086;

int64_t i2085;
i2085 =  (int64_t)0;
i2086 =  (int64_t)0;
i2087 =  (int64_t)0;
i2088 =  (int64_t)0;
for (uint64_t i2089 =  (int32_t)0; i2089 <  (int32_t)1; i2089++){
for (uint64_t i2092 =  (int32_t)0; i2092 <  (int32_t)256; i2092++){
for (uint64_t i2090 =  (int32_t)0; i2090 <  (int32_t)16; i2090++){
for (uint64_t i2091 =  (int32_t)0; i2091 <  (int32_t)16; i2091++){
Arr4DIdxRowM(tmp921, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2089,i2090,i2091,i2092) = Arr4DIdxRowM(tmp919, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2085,i2086,i2087,i2088);
i2088 = (i2088 +  (int64_t)1);
if ((i2088 ==  (int64_t)16)) {
i2088 =  (int64_t)0;
i2087 = (i2087 +  (int64_t)1);
if ((i2087 ==  (int64_t)16)) {
i2087 =  (int64_t)0;
i2086 = (i2086 +  (int64_t)1);
if ((i2086 ==  (int64_t)256)) {
i2086 =  (int64_t)0;
i2085 = (i2085 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp919);

uint64_t* tmp923 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);

int64_t i2100;

int64_t i2099;

int64_t i2098;

int64_t i2097;

int64_t i2096;

int64_t i2095;

int64_t i2094;

int64_t i2093;
i2093 =  (int64_t)0;
i2094 =  (int64_t)0;
i2095 =  (int64_t)0;
i2096 =  (int64_t)0;
for (uint64_t i2100 =  (int32_t)0; i2100 <  (int32_t)256; i2100++){
for (uint64_t i2099 =  (int32_t)0; i2099 <  (int32_t)256; i2099++){
for (uint64_t i2097 =  (int32_t)0; i2097 <  (int32_t)3; i2097++){
for (uint64_t i2098 =  (int32_t)0; i2098 <  (int32_t)3; i2098++){
Arr4DIdxRowM(tmp923, (int32_t)3, (int32_t)3, (int32_t)256, (int32_t)256,i2097,i2098,i2099,i2100) = Arr4DIdxRowM(tmp49, (int32_t)256, (int32_t)256, (int32_t)3, (int32_t)3,i2093,i2094,i2095,i2096);
i2096 = (i2096 +  (int64_t)1);
if ((i2096 ==  (int64_t)3)) {
i2096 =  (int64_t)0;
i2095 = (i2095 +  (int64_t)1);
if ((i2095 ==  (int64_t)3)) {
i2095 =  (int64_t)0;
i2094 = (i2094 +  (int64_t)1);
if ((i2094 ==  (int64_t)256)) {
i2094 =  (int64_t)0;
i2093 = (i2093 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)256,  (int32_t)256,  (int32_t)3,  (int32_t)3, tmp49);

uint64_t* tmp925 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp921, tmp923, tmp925);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp923);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp921);

uint64_t* tmp928 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256);

int64_t i2105;

int64_t i2104;

int64_t i2103;

int64_t i2102;

int64_t i2101;
i2101 =  (int64_t)0;
for (uint64_t i2102 =  (int32_t)0; i2102 <  (int32_t)1; i2102++){
for (uint64_t i2103 =  (int32_t)0; i2103 <  (int32_t)1; i2103++){
for (uint64_t i2104 =  (int32_t)0; i2104 <  (int32_t)1; i2104++){
for (uint64_t i2105 =  (int32_t)0; i2105 <  (int32_t)256; i2105++){
Arr4DIdxRowM(tmp928, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i2102,i2103,i2104,i2105) = Arr1DIdxRowM(tmp8, (int32_t)256,i2101);
i2101 = (i2101 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)256, tmp8);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp928,  (int32_t)12);

uint64_t* tmp930 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)256; i3++){
Arr4DIdxRowM(tmp930, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp925, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i0,i1,i2,i3), Arr4DIdxRowM(tmp928, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)256,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256, tmp928);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp925);

uint64_t* tmp933 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i2113;

int64_t i2112;

int64_t i2111;

int64_t i2110;

int64_t i2109;

int64_t i2108;

int64_t i2107;

int64_t i2106;
i2106 =  (int64_t)0;
i2107 =  (int64_t)0;
i2108 =  (int64_t)0;
i2109 =  (int64_t)0;
for (uint64_t i2110 =  (int32_t)0; i2110 <  (int32_t)1; i2110++){
for (uint64_t i2112 =  (int32_t)0; i2112 <  (int32_t)16; i2112++){
for (uint64_t i2113 =  (int32_t)0; i2113 <  (int32_t)16; i2113++){
for (uint64_t i2111 =  (int32_t)0; i2111 <  (int32_t)256; i2111++){
Arr4DIdxRowM(tmp933, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2110,i2111,i2112,i2113) = Arr4DIdxRowM(tmp930, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2106,i2107,i2108,i2109);
i2109 = (i2109 +  (int64_t)1);
if ((i2109 ==  (int64_t)256)) {
i2109 =  (int64_t)0;
i2108 = (i2108 +  (int64_t)1);
if ((i2108 ==  (int64_t)16)) {
i2108 =  (int64_t)0;
i2107 = (i2107 +  (int64_t)1);
if ((i2107 ==  (int64_t)16)) {
i2107 =  (int64_t)0;
i2106 = (i2106 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp930);

uint64_t* tmp935 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i2121;

int64_t i2120;

int64_t i2119;

int64_t i2118;

int64_t i2117;

int64_t i2116;

int64_t i2115;

int64_t i2114;
i2114 =  (int64_t)0;
i2115 =  (int64_t)0;
i2116 =  (int64_t)0;
i2117 =  (int64_t)0;
for (uint64_t i2118 =  (int32_t)0; i2118 <  (int32_t)1; i2118++){
for (uint64_t i2121 =  (int32_t)0; i2121 <  (int32_t)256; i2121++){
for (uint64_t i2119 =  (int32_t)0; i2119 <  (int32_t)16; i2119++){
for (uint64_t i2120 =  (int32_t)0; i2120 <  (int32_t)16; i2120++){
Arr4DIdxRowM(tmp935, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2118,i2119,i2120,i2121) = Arr4DIdxRowM(tmp933, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2114,i2115,i2116,i2117);
i2117 = (i2117 +  (int64_t)1);
if ((i2117 ==  (int64_t)16)) {
i2117 =  (int64_t)0;
i2116 = (i2116 +  (int64_t)1);
if ((i2116 ==  (int64_t)16)) {
i2116 =  (int64_t)0;
i2115 = (i2115 +  (int64_t)1);
if ((i2115 ==  (int64_t)256)) {
i2115 =  (int64_t)0;
i2114 = (i2114 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp933);

uint64_t* tmp937 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp935, tmp937,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp935);

uint64_t* tmp939 = make_array<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16);

int64_t i2129;

int64_t i2128;

int64_t i2127;

int64_t i2126;

int64_t i2125;

int64_t i2124;

int64_t i2123;

int64_t i2122;
i2122 =  (int64_t)0;
i2123 =  (int64_t)0;
i2124 =  (int64_t)0;
i2125 =  (int64_t)0;
for (uint64_t i2126 =  (int32_t)0; i2126 <  (int32_t)1; i2126++){
for (uint64_t i2128 =  (int32_t)0; i2128 <  (int32_t)16; i2128++){
for (uint64_t i2129 =  (int32_t)0; i2129 <  (int32_t)16; i2129++){
for (uint64_t i2127 =  (int32_t)0; i2127 <  (int32_t)256; i2127++){
Arr4DIdxRowM(tmp939, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2126,i2127,i2128,i2129) = Arr4DIdxRowM(tmp937, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2122,i2123,i2124,i2125);
i2125 = (i2125 +  (int64_t)1);
if ((i2125 ==  (int64_t)256)) {
i2125 =  (int64_t)0;
i2124 = (i2124 +  (int64_t)1);
if ((i2124 ==  (int64_t)16)) {
i2124 =  (int64_t)0;
i2123 = (i2123 +  (int64_t)1);
if ((i2123 ==  (int64_t)16)) {
i2123 =  (int64_t)0;
i2122 = (i2122 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp937);

uint64_t* tmp941 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256);

int64_t i2137;

int64_t i2136;

int64_t i2135;

int64_t i2134;

int64_t i2133;

int64_t i2132;

int64_t i2131;

int64_t i2130;
i2130 =  (int64_t)0;
i2131 =  (int64_t)0;
i2132 =  (int64_t)0;
i2133 =  (int64_t)0;
for (uint64_t i2134 =  (int32_t)0; i2134 <  (int32_t)1; i2134++){
for (uint64_t i2137 =  (int32_t)0; i2137 <  (int32_t)256; i2137++){
for (uint64_t i2135 =  (int32_t)0; i2135 <  (int32_t)16; i2135++){
for (uint64_t i2136 =  (int32_t)0; i2136 <  (int32_t)16; i2136++){
Arr4DIdxRowM(tmp941, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)256,i2134,i2135,i2136,i2137) = Arr4DIdxRowM(tmp939, (int32_t)1, (int32_t)256, (int32_t)16, (int32_t)16,i2130,i2131,i2132,i2133);
i2133 = (i2133 +  (int64_t)1);
if ((i2133 ==  (int64_t)16)) {
i2133 =  (int64_t)0;
i2132 = (i2132 +  (int64_t)1);
if ((i2132 ==  (int64_t)16)) {
i2132 =  (int64_t)0;
i2131 = (i2131 +  (int64_t)1);
if ((i2131 ==  (int64_t)256)) {
i2131 =  (int64_t)0;
i2130 = (i2130 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)256,  (int32_t)16,  (int32_t)16, tmp939);

uint64_t* tmp943 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);

int64_t i2145;

int64_t i2144;

int64_t i2143;

int64_t i2142;

int64_t i2141;

int64_t i2140;

int64_t i2139;

int64_t i2138;
i2138 =  (int64_t)0;
i2139 =  (int64_t)0;
i2140 =  (int64_t)0;
i2141 =  (int64_t)0;
for (uint64_t i2145 =  (int32_t)0; i2145 <  (int32_t)1024; i2145++){
for (uint64_t i2144 =  (int32_t)0; i2144 <  (int32_t)256; i2144++){
for (uint64_t i2142 =  (int32_t)0; i2142 <  (int32_t)1; i2142++){
for (uint64_t i2143 =  (int32_t)0; i2143 <  (int32_t)1; i2143++){
Arr4DIdxRowM(tmp943, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)1024,i2142,i2143,i2144,i2145) = Arr4DIdxRowM(tmp50, (int32_t)1024, (int32_t)256, (int32_t)1, (int32_t)1,i2138,i2139,i2140,i2141);
i2141 = (i2141 +  (int64_t)1);
if ((i2141 ==  (int64_t)1)) {
i2141 =  (int64_t)0;
i2140 = (i2140 +  (int64_t)1);
if ((i2140 ==  (int64_t)1)) {
i2140 =  (int64_t)0;
i2139 = (i2139 +  (int64_t)1);
if ((i2139 ==  (int64_t)256)) {
i2139 =  (int64_t)0;
i2138 = (i2138 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1024,  (int32_t)256,  (int32_t)1,  (int32_t)1, tmp50);

uint64_t* tmp945 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp941, tmp943, tmp945);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)256, tmp941);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp943);

uint64_t* tmp948 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);

int64_t i2150;

int64_t i2149;

int64_t i2148;

int64_t i2147;

int64_t i2146;
i2146 =  (int64_t)0;
for (uint64_t i2147 =  (int32_t)0; i2147 <  (int32_t)1; i2147++){
for (uint64_t i2148 =  (int32_t)0; i2148 <  (int32_t)1; i2148++){
for (uint64_t i2149 =  (int32_t)0; i2149 <  (int32_t)1; i2149++){
for (uint64_t i2150 =  (int32_t)0; i2150 <  (int32_t)1024; i2150++){
Arr4DIdxRowM(tmp948, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i2147,i2148,i2149,i2150) = Arr1DIdxRowM(tmp34, (int32_t)1024,i2146);
i2146 = (i2146 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1024, tmp34);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp948,  (int32_t)12);

uint64_t* tmp950 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp950, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp945, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp948, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1024,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp945);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp948);

uint64_t* tmp953 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i2158;

int64_t i2157;

int64_t i2156;

int64_t i2155;

int64_t i2154;

int64_t i2153;

int64_t i2152;

int64_t i2151;
i2151 =  (int64_t)0;
i2152 =  (int64_t)0;
i2153 =  (int64_t)0;
i2154 =  (int64_t)0;
for (uint64_t i2155 =  (int32_t)0; i2155 <  (int32_t)1; i2155++){
for (uint64_t i2157 =  (int32_t)0; i2157 <  (int32_t)16; i2157++){
for (uint64_t i2158 =  (int32_t)0; i2158 <  (int32_t)16; i2158++){
for (uint64_t i2156 =  (int32_t)0; i2156 <  (int32_t)1024; i2156++){
Arr4DIdxRowM(tmp953, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2155,i2156,i2157,i2158) = Arr4DIdxRowM(tmp950, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2151,i2152,i2153,i2154);
i2154 = (i2154 +  (int64_t)1);
if ((i2154 ==  (int64_t)1024)) {
i2154 =  (int64_t)0;
i2153 = (i2153 +  (int64_t)1);
if ((i2153 ==  (int64_t)16)) {
i2153 =  (int64_t)0;
i2152 = (i2152 +  (int64_t)1);
if ((i2152 ==  (int64_t)16)) {
i2152 =  (int64_t)0;
i2151 = (i2151 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp950);

uint64_t* tmp955 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2166;

int64_t i2165;

int64_t i2164;

int64_t i2163;

int64_t i2162;

int64_t i2161;

int64_t i2160;

int64_t i2159;
i2159 =  (int64_t)0;
i2160 =  (int64_t)0;
i2161 =  (int64_t)0;
i2162 =  (int64_t)0;
for (uint64_t i2163 =  (int32_t)0; i2163 <  (int32_t)1; i2163++){
for (uint64_t i2166 =  (int32_t)0; i2166 <  (int32_t)1024; i2166++){
for (uint64_t i2164 =  (int32_t)0; i2164 <  (int32_t)16; i2164++){
for (uint64_t i2165 =  (int32_t)0; i2165 <  (int32_t)16; i2165++){
Arr4DIdxRowM(tmp955, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2163,i2164,i2165,i2166) = Arr4DIdxRowM(tmp953, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2159,i2160,i2161,i2162);
i2162 = (i2162 +  (int64_t)1);
if ((i2162 ==  (int64_t)16)) {
i2162 =  (int64_t)0;
i2161 = (i2161 +  (int64_t)1);
if ((i2161 ==  (int64_t)16)) {
i2161 =  (int64_t)0;
i2160 = (i2160 +  (int64_t)1);
if ((i2160 ==  (int64_t)1024)) {
i2160 =  (int64_t)0;
i2159 = (i2159 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp953);

uint64_t* tmp957 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2174;

int64_t i2173;

int64_t i2172;

int64_t i2171;

int64_t i2170;

int64_t i2169;

int64_t i2168;

int64_t i2167;
i2167 =  (int64_t)0;
i2168 =  (int64_t)0;
i2169 =  (int64_t)0;
i2170 =  (int64_t)0;
for (uint64_t i2171 =  (int32_t)0; i2171 <  (int32_t)1; i2171++){
for (uint64_t i2174 =  (int32_t)0; i2174 <  (int32_t)1024; i2174++){
for (uint64_t i2172 =  (int32_t)0; i2172 <  (int32_t)16; i2172++){
for (uint64_t i2173 =  (int32_t)0; i2173 <  (int32_t)16; i2173++){
Arr4DIdxRowM(tmp957, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2171,i2172,i2173,i2174) = Arr4DIdxRowM(tmp901, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2167,i2168,i2169,i2170);
i2170 = (i2170 +  (int64_t)1);
if ((i2170 ==  (int64_t)16)) {
i2170 =  (int64_t)0;
i2169 = (i2169 +  (int64_t)1);
if ((i2169 ==  (int64_t)16)) {
i2169 =  (int64_t)0;
i2168 = (i2168 +  (int64_t)1);
if ((i2168 ==  (int64_t)1024)) {
i2168 =  (int64_t)0;
i2167 = (i2167 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp901);
ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp957,  (int32_t)12);

uint64_t* tmp959 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)16; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)16; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)1024; i3++){
Arr4DIdxRowM(tmp959, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp955, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3), Arr4DIdxRowM(tmp957, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp957);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp955);

uint64_t* tmp962 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i2182;

int64_t i2181;

int64_t i2180;

int64_t i2179;

int64_t i2178;

int64_t i2177;

int64_t i2176;

int64_t i2175;
i2175 =  (int64_t)0;
i2176 =  (int64_t)0;
i2177 =  (int64_t)0;
i2178 =  (int64_t)0;
for (uint64_t i2179 =  (int32_t)0; i2179 <  (int32_t)1; i2179++){
for (uint64_t i2181 =  (int32_t)0; i2181 <  (int32_t)16; i2181++){
for (uint64_t i2182 =  (int32_t)0; i2182 <  (int32_t)16; i2182++){
for (uint64_t i2180 =  (int32_t)0; i2180 <  (int32_t)1024; i2180++){
Arr4DIdxRowM(tmp962, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2179,i2180,i2181,i2182) = Arr4DIdxRowM(tmp959, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2175,i2176,i2177,i2178);
i2178 = (i2178 +  (int64_t)1);
if ((i2178 ==  (int64_t)1024)) {
i2178 =  (int64_t)0;
i2177 = (i2177 +  (int64_t)1);
if ((i2177 ==  (int64_t)16)) {
i2177 =  (int64_t)0;
i2176 = (i2176 +  (int64_t)1);
if ((i2176 ==  (int64_t)16)) {
i2176 =  (int64_t)0;
i2175 = (i2175 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp959);

uint64_t* tmp964 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2190;

int64_t i2189;

int64_t i2188;

int64_t i2187;

int64_t i2186;

int64_t i2185;

int64_t i2184;

int64_t i2183;
i2183 =  (int64_t)0;
i2184 =  (int64_t)0;
i2185 =  (int64_t)0;
i2186 =  (int64_t)0;
for (uint64_t i2187 =  (int32_t)0; i2187 <  (int32_t)1; i2187++){
for (uint64_t i2190 =  (int32_t)0; i2190 <  (int32_t)1024; i2190++){
for (uint64_t i2188 =  (int32_t)0; i2188 <  (int32_t)16; i2188++){
for (uint64_t i2189 =  (int32_t)0; i2189 <  (int32_t)16; i2189++){
Arr4DIdxRowM(tmp964, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2187,i2188,i2189,i2190) = Arr4DIdxRowM(tmp962, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2183,i2184,i2185,i2186);
i2186 = (i2186 +  (int64_t)1);
if ((i2186 ==  (int64_t)16)) {
i2186 =  (int64_t)0;
i2185 = (i2185 +  (int64_t)1);
if ((i2185 ==  (int64_t)16)) {
i2185 =  (int64_t)0;
i2184 = (i2184 +  (int64_t)1);
if ((i2184 ==  (int64_t)1024)) {
i2184 =  (int64_t)0;
i2183 = (i2183 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp962);

uint64_t* tmp966 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp964, tmp966,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp964);

uint64_t* tmp968 = make_array<uint64_t>( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16);

int64_t i2198;

int64_t i2197;

int64_t i2196;

int64_t i2195;

int64_t i2194;

int64_t i2193;

int64_t i2192;

int64_t i2191;
i2191 =  (int64_t)0;
i2192 =  (int64_t)0;
i2193 =  (int64_t)0;
i2194 =  (int64_t)0;
for (uint64_t i2195 =  (int32_t)0; i2195 <  (int32_t)1; i2195++){
for (uint64_t i2197 =  (int32_t)0; i2197 <  (int32_t)16; i2197++){
for (uint64_t i2198 =  (int32_t)0; i2198 <  (int32_t)16; i2198++){
for (uint64_t i2196 =  (int32_t)0; i2196 <  (int32_t)1024; i2196++){
Arr4DIdxRowM(tmp968, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2195,i2196,i2197,i2198) = Arr4DIdxRowM(tmp966, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2191,i2192,i2193,i2194);
i2194 = (i2194 +  (int64_t)1);
if ((i2194 ==  (int64_t)1024)) {
i2194 =  (int64_t)0;
i2193 = (i2193 +  (int64_t)1);
if ((i2193 ==  (int64_t)16)) {
i2193 =  (int64_t)0;
i2192 = (i2192 +  (int64_t)1);
if ((i2192 ==  (int64_t)16)) {
i2192 =  (int64_t)0;
i2191 = (i2191 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp966);

uint64_t* tmp970 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2206;

int64_t i2205;

int64_t i2204;

int64_t i2203;

int64_t i2202;

int64_t i2201;

int64_t i2200;

int64_t i2199;
i2199 =  (int64_t)0;
i2200 =  (int64_t)0;
i2201 =  (int64_t)0;
i2202 =  (int64_t)0;
for (uint64_t i2203 =  (int32_t)0; i2203 <  (int32_t)1; i2203++){
for (uint64_t i2206 =  (int32_t)0; i2206 <  (int32_t)1024; i2206++){
for (uint64_t i2204 =  (int32_t)0; i2204 <  (int32_t)16; i2204++){
for (uint64_t i2205 =  (int32_t)0; i2205 <  (int32_t)16; i2205++){
Arr4DIdxRowM(tmp970, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2203,i2204,i2205,i2206) = Arr4DIdxRowM(tmp968, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2199,i2200,i2201,i2202);
i2202 = (i2202 +  (int64_t)1);
if ((i2202 ==  (int64_t)16)) {
i2202 =  (int64_t)0;
i2201 = (i2201 +  (int64_t)1);
if ((i2201 ==  (int64_t)16)) {
i2201 =  (int64_t)0;
i2200 = (i2200 +  (int64_t)1);
if ((i2200 ==  (int64_t)1024)) {
i2200 =  (int64_t)0;
i2199 = (i2199 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp971 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512);

int64_t i2214;

int64_t i2213;

int64_t i2212;

int64_t i2211;

int64_t i2210;

int64_t i2209;

int64_t i2208;

int64_t i2207;
i2207 =  (int64_t)0;
i2208 =  (int64_t)0;
i2209 =  (int64_t)0;
i2210 =  (int64_t)0;
for (uint64_t i2214 =  (int32_t)0; i2214 <  (int32_t)512; i2214++){
for (uint64_t i2213 =  (int32_t)0; i2213 <  (int32_t)1024; i2213++){
for (uint64_t i2211 =  (int32_t)0; i2211 <  (int32_t)1; i2211++){
for (uint64_t i2212 =  (int32_t)0; i2212 <  (int32_t)1; i2212++){
Arr4DIdxRowM(tmp971, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)512,i2211,i2212,i2213,i2214) = Arr4DIdxRowM(tmp51, (int32_t)512, (int32_t)1024, (int32_t)1, (int32_t)1,i2207,i2208,i2209,i2210);
i2210 = (i2210 +  (int64_t)1);
if ((i2210 ==  (int64_t)1)) {
i2210 =  (int64_t)0;
i2209 = (i2209 +  (int64_t)1);
if ((i2209 ==  (int64_t)1)) {
i2209 =  (int64_t)0;
i2208 = (i2208 +  (int64_t)1);
if ((i2208 ==  (int64_t)1024)) {
i2208 =  (int64_t)0;
i2207 = (i2207 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp51);

uint64_t* tmp973 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp970, tmp971, tmp973);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512, tmp971);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp970);

uint64_t* tmp976 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2219;

int64_t i2218;

int64_t i2217;

int64_t i2216;

int64_t i2215;
i2215 =  (int64_t)0;
for (uint64_t i2216 =  (int32_t)0; i2216 <  (int32_t)1; i2216++){
for (uint64_t i2217 =  (int32_t)0; i2217 <  (int32_t)1; i2217++){
for (uint64_t i2218 =  (int32_t)0; i2218 <  (int32_t)1; i2218++){
for (uint64_t i2219 =  (int32_t)0; i2219 <  (int32_t)512; i2219++){
Arr4DIdxRowM(tmp976, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2216,i2217,i2218,i2219) = Arr1DIdxRowM(tmp20, (int32_t)512,i2215);
i2215 = (i2215 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp976,  (int32_t)12);

uint64_t* tmp977 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp977, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp973, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp976, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp973);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp976);

uint64_t* tmp980 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2227;

int64_t i2226;

int64_t i2225;

int64_t i2224;

int64_t i2223;

int64_t i2222;

int64_t i2221;

int64_t i2220;
i2220 =  (int64_t)0;
i2221 =  (int64_t)0;
i2222 =  (int64_t)0;
i2223 =  (int64_t)0;
for (uint64_t i2224 =  (int32_t)0; i2224 <  (int32_t)1; i2224++){
for (uint64_t i2226 =  (int32_t)0; i2226 <  (int32_t)8; i2226++){
for (uint64_t i2227 =  (int32_t)0; i2227 <  (int32_t)8; i2227++){
for (uint64_t i2225 =  (int32_t)0; i2225 <  (int32_t)512; i2225++){
Arr4DIdxRowM(tmp980, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2224,i2225,i2226,i2227) = Arr4DIdxRowM(tmp977, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2220,i2221,i2222,i2223);
i2223 = (i2223 +  (int64_t)1);
if ((i2223 ==  (int64_t)512)) {
i2223 =  (int64_t)0;
i2222 = (i2222 +  (int64_t)1);
if ((i2222 ==  (int64_t)8)) {
i2222 =  (int64_t)0;
i2221 = (i2221 +  (int64_t)1);
if ((i2221 ==  (int64_t)8)) {
i2221 =  (int64_t)0;
i2220 = (i2220 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp977);

uint64_t* tmp982 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2235;

int64_t i2234;

int64_t i2233;

int64_t i2232;

int64_t i2231;

int64_t i2230;

int64_t i2229;

int64_t i2228;
i2228 =  (int64_t)0;
i2229 =  (int64_t)0;
i2230 =  (int64_t)0;
i2231 =  (int64_t)0;
for (uint64_t i2232 =  (int32_t)0; i2232 <  (int32_t)1; i2232++){
for (uint64_t i2235 =  (int32_t)0; i2235 <  (int32_t)512; i2235++){
for (uint64_t i2233 =  (int32_t)0; i2233 <  (int32_t)8; i2233++){
for (uint64_t i2234 =  (int32_t)0; i2234 <  (int32_t)8; i2234++){
Arr4DIdxRowM(tmp982, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2232,i2233,i2234,i2235) = Arr4DIdxRowM(tmp980, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2228,i2229,i2230,i2231);
i2231 = (i2231 +  (int64_t)1);
if ((i2231 ==  (int64_t)8)) {
i2231 =  (int64_t)0;
i2230 = (i2230 +  (int64_t)1);
if ((i2230 ==  (int64_t)8)) {
i2230 =  (int64_t)0;
i2229 = (i2229 +  (int64_t)1);
if ((i2229 ==  (int64_t)512)) {
i2229 =  (int64_t)0;
i2228 = (i2228 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp980);

uint64_t* tmp984 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp982, tmp984,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp982);

uint64_t* tmp986 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2243;

int64_t i2242;

int64_t i2241;

int64_t i2240;

int64_t i2239;

int64_t i2238;

int64_t i2237;

int64_t i2236;
i2236 =  (int64_t)0;
i2237 =  (int64_t)0;
i2238 =  (int64_t)0;
i2239 =  (int64_t)0;
for (uint64_t i2240 =  (int32_t)0; i2240 <  (int32_t)1; i2240++){
for (uint64_t i2242 =  (int32_t)0; i2242 <  (int32_t)8; i2242++){
for (uint64_t i2243 =  (int32_t)0; i2243 <  (int32_t)8; i2243++){
for (uint64_t i2241 =  (int32_t)0; i2241 <  (int32_t)512; i2241++){
Arr4DIdxRowM(tmp986, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2240,i2241,i2242,i2243) = Arr4DIdxRowM(tmp984, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2236,i2237,i2238,i2239);
i2239 = (i2239 +  (int64_t)1);
if ((i2239 ==  (int64_t)512)) {
i2239 =  (int64_t)0;
i2238 = (i2238 +  (int64_t)1);
if ((i2238 ==  (int64_t)8)) {
i2238 =  (int64_t)0;
i2237 = (i2237 +  (int64_t)1);
if ((i2237 ==  (int64_t)8)) {
i2237 =  (int64_t)0;
i2236 = (i2236 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp984);

uint64_t* tmp988 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2251;

int64_t i2250;

int64_t i2249;

int64_t i2248;

int64_t i2247;

int64_t i2246;

int64_t i2245;

int64_t i2244;
i2244 =  (int64_t)0;
i2245 =  (int64_t)0;
i2246 =  (int64_t)0;
i2247 =  (int64_t)0;
for (uint64_t i2248 =  (int32_t)0; i2248 <  (int32_t)1; i2248++){
for (uint64_t i2251 =  (int32_t)0; i2251 <  (int32_t)512; i2251++){
for (uint64_t i2249 =  (int32_t)0; i2249 <  (int32_t)8; i2249++){
for (uint64_t i2250 =  (int32_t)0; i2250 <  (int32_t)8; i2250++){
Arr4DIdxRowM(tmp988, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2248,i2249,i2250,i2251) = Arr4DIdxRowM(tmp986, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2244,i2245,i2246,i2247);
i2247 = (i2247 +  (int64_t)1);
if ((i2247 ==  (int64_t)8)) {
i2247 =  (int64_t)0;
i2246 = (i2246 +  (int64_t)1);
if ((i2246 ==  (int64_t)8)) {
i2246 =  (int64_t)0;
i2245 = (i2245 +  (int64_t)1);
if ((i2245 ==  (int64_t)512)) {
i2245 =  (int64_t)0;
i2244 = (i2244 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp986);

uint64_t* tmp990 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);

int64_t i2259;

int64_t i2258;

int64_t i2257;

int64_t i2256;

int64_t i2255;

int64_t i2254;

int64_t i2253;

int64_t i2252;
i2252 =  (int64_t)0;
i2253 =  (int64_t)0;
i2254 =  (int64_t)0;
i2255 =  (int64_t)0;
for (uint64_t i2259 =  (int32_t)0; i2259 <  (int32_t)512; i2259++){
for (uint64_t i2258 =  (int32_t)0; i2258 <  (int32_t)512; i2258++){
for (uint64_t i2256 =  (int32_t)0; i2256 <  (int32_t)3; i2256++){
for (uint64_t i2257 =  (int32_t)0; i2257 <  (int32_t)3; i2257++){
Arr4DIdxRowM(tmp990, (int32_t)3, (int32_t)3, (int32_t)512, (int32_t)512,i2256,i2257,i2258,i2259) = Arr4DIdxRowM(tmp52, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i2252,i2253,i2254,i2255);
i2255 = (i2255 +  (int64_t)1);
if ((i2255 ==  (int64_t)3)) {
i2255 =  (int64_t)0;
i2254 = (i2254 +  (int64_t)1);
if ((i2254 ==  (int64_t)3)) {
i2254 =  (int64_t)0;
i2253 = (i2253 +  (int64_t)1);
if ((i2253 ==  (int64_t)512)) {
i2253 =  (int64_t)0;
i2252 = (i2252 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3, tmp52);

uint64_t* tmp992 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  tmp988, tmp990, tmp992);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp988);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp990);

uint64_t* tmp995 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2264;

int64_t i2263;

int64_t i2262;

int64_t i2261;

int64_t i2260;
i2260 =  (int64_t)0;
for (uint64_t i2261 =  (int32_t)0; i2261 <  (int32_t)1; i2261++){
for (uint64_t i2262 =  (int32_t)0; i2262 <  (int32_t)1; i2262++){
for (uint64_t i2263 =  (int32_t)0; i2263 <  (int32_t)1; i2263++){
for (uint64_t i2264 =  (int32_t)0; i2264 <  (int32_t)512; i2264++){
Arr4DIdxRowM(tmp995, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2261,i2262,i2263,i2264) = Arr1DIdxRowM(tmp20, (int32_t)512,i2260);
i2260 = (i2260 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp995,  (int32_t)12);

uint64_t* tmp996 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp996, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp992, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp995, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp995);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp992);

uint64_t* tmp999 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2272;

int64_t i2271;

int64_t i2270;

int64_t i2269;

int64_t i2268;

int64_t i2267;

int64_t i2266;

int64_t i2265;
i2265 =  (int64_t)0;
i2266 =  (int64_t)0;
i2267 =  (int64_t)0;
i2268 =  (int64_t)0;
for (uint64_t i2269 =  (int32_t)0; i2269 <  (int32_t)1; i2269++){
for (uint64_t i2271 =  (int32_t)0; i2271 <  (int32_t)8; i2271++){
for (uint64_t i2272 =  (int32_t)0; i2272 <  (int32_t)8; i2272++){
for (uint64_t i2270 =  (int32_t)0; i2270 <  (int32_t)512; i2270++){
Arr4DIdxRowM(tmp999, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2269,i2270,i2271,i2272) = Arr4DIdxRowM(tmp996, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2265,i2266,i2267,i2268);
i2268 = (i2268 +  (int64_t)1);
if ((i2268 ==  (int64_t)512)) {
i2268 =  (int64_t)0;
i2267 = (i2267 +  (int64_t)1);
if ((i2267 ==  (int64_t)8)) {
i2267 =  (int64_t)0;
i2266 = (i2266 +  (int64_t)1);
if ((i2266 ==  (int64_t)8)) {
i2266 =  (int64_t)0;
i2265 = (i2265 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp996);

uint64_t* tmp1001 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2280;

int64_t i2279;

int64_t i2278;

int64_t i2277;

int64_t i2276;

int64_t i2275;

int64_t i2274;

int64_t i2273;
i2273 =  (int64_t)0;
i2274 =  (int64_t)0;
i2275 =  (int64_t)0;
i2276 =  (int64_t)0;
for (uint64_t i2277 =  (int32_t)0; i2277 <  (int32_t)1; i2277++){
for (uint64_t i2280 =  (int32_t)0; i2280 <  (int32_t)512; i2280++){
for (uint64_t i2278 =  (int32_t)0; i2278 <  (int32_t)8; i2278++){
for (uint64_t i2279 =  (int32_t)0; i2279 <  (int32_t)8; i2279++){
Arr4DIdxRowM(tmp1001, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2277,i2278,i2279,i2280) = Arr4DIdxRowM(tmp999, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2273,i2274,i2275,i2276);
i2276 = (i2276 +  (int64_t)1);
if ((i2276 ==  (int64_t)8)) {
i2276 =  (int64_t)0;
i2275 = (i2275 +  (int64_t)1);
if ((i2275 ==  (int64_t)8)) {
i2275 =  (int64_t)0;
i2274 = (i2274 +  (int64_t)1);
if ((i2274 ==  (int64_t)512)) {
i2274 =  (int64_t)0;
i2273 = (i2273 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp999);

uint64_t* tmp1003 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1001, tmp1003,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1001);

uint64_t* tmp1005 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2288;

int64_t i2287;

int64_t i2286;

int64_t i2285;

int64_t i2284;

int64_t i2283;

int64_t i2282;

int64_t i2281;
i2281 =  (int64_t)0;
i2282 =  (int64_t)0;
i2283 =  (int64_t)0;
i2284 =  (int64_t)0;
for (uint64_t i2285 =  (int32_t)0; i2285 <  (int32_t)1; i2285++){
for (uint64_t i2287 =  (int32_t)0; i2287 <  (int32_t)8; i2287++){
for (uint64_t i2288 =  (int32_t)0; i2288 <  (int32_t)8; i2288++){
for (uint64_t i2286 =  (int32_t)0; i2286 <  (int32_t)512; i2286++){
Arr4DIdxRowM(tmp1005, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2285,i2286,i2287,i2288) = Arr4DIdxRowM(tmp1003, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2281,i2282,i2283,i2284);
i2284 = (i2284 +  (int64_t)1);
if ((i2284 ==  (int64_t)512)) {
i2284 =  (int64_t)0;
i2283 = (i2283 +  (int64_t)1);
if ((i2283 ==  (int64_t)8)) {
i2283 =  (int64_t)0;
i2282 = (i2282 +  (int64_t)1);
if ((i2282 ==  (int64_t)8)) {
i2282 =  (int64_t)0;
i2281 = (i2281 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1003);

uint64_t* tmp1007 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2296;

int64_t i2295;

int64_t i2294;

int64_t i2293;

int64_t i2292;

int64_t i2291;

int64_t i2290;

int64_t i2289;
i2289 =  (int64_t)0;
i2290 =  (int64_t)0;
i2291 =  (int64_t)0;
i2292 =  (int64_t)0;
for (uint64_t i2293 =  (int32_t)0; i2293 <  (int32_t)1; i2293++){
for (uint64_t i2296 =  (int32_t)0; i2296 <  (int32_t)512; i2296++){
for (uint64_t i2294 =  (int32_t)0; i2294 <  (int32_t)8; i2294++){
for (uint64_t i2295 =  (int32_t)0; i2295 <  (int32_t)8; i2295++){
Arr4DIdxRowM(tmp1007, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2293,i2294,i2295,i2296) = Arr4DIdxRowM(tmp1005, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2289,i2290,i2291,i2292);
i2292 = (i2292 +  (int64_t)1);
if ((i2292 ==  (int64_t)8)) {
i2292 =  (int64_t)0;
i2291 = (i2291 +  (int64_t)1);
if ((i2291 ==  (int64_t)8)) {
i2291 =  (int64_t)0;
i2290 = (i2290 +  (int64_t)1);
if ((i2290 ==  (int64_t)512)) {
i2290 =  (int64_t)0;
i2289 = (i2289 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1005);

uint64_t* tmp1009 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);

int64_t i2304;

int64_t i2303;

int64_t i2302;

int64_t i2301;

int64_t i2300;

int64_t i2299;

int64_t i2298;

int64_t i2297;
i2297 =  (int64_t)0;
i2298 =  (int64_t)0;
i2299 =  (int64_t)0;
i2300 =  (int64_t)0;
for (uint64_t i2304 =  (int32_t)0; i2304 <  (int32_t)2048; i2304++){
for (uint64_t i2303 =  (int32_t)0; i2303 <  (int32_t)512; i2303++){
for (uint64_t i2301 =  (int32_t)0; i2301 <  (int32_t)1; i2301++){
for (uint64_t i2302 =  (int32_t)0; i2302 <  (int32_t)1; i2302++){
Arr4DIdxRowM(tmp1009, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)2048,i2301,i2302,i2303,i2304) = Arr4DIdxRowM(tmp53, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i2297,i2298,i2299,i2300);
i2300 = (i2300 +  (int64_t)1);
if ((i2300 ==  (int64_t)1)) {
i2300 =  (int64_t)0;
i2299 = (i2299 +  (int64_t)1);
if ((i2299 ==  (int64_t)1)) {
i2299 =  (int64_t)0;
i2298 = (i2298 +  (int64_t)1);
if ((i2298 ==  (int64_t)512)) {
i2298 =  (int64_t)0;
i2297 = (i2297 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp53);

uint64_t* tmp1011 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  tmp1007, tmp1009, tmp1011);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1007);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp1009);

uint64_t* tmp1014 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048);

int64_t i2309;

int64_t i2308;

int64_t i2307;

int64_t i2306;

int64_t i2305;
i2305 =  (int64_t)0;
for (uint64_t i2306 =  (int32_t)0; i2306 <  (int32_t)1; i2306++){
for (uint64_t i2307 =  (int32_t)0; i2307 <  (int32_t)1; i2307++){
for (uint64_t i2308 =  (int32_t)0; i2308 <  (int32_t)1; i2308++){
for (uint64_t i2309 =  (int32_t)0; i2309 <  (int32_t)2048; i2309++){
Arr4DIdxRowM(tmp1014, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i2306,i2307,i2308,i2309) = Arr1DIdxRowM(tmp54, (int32_t)2048,i2305);
i2305 = (i2305 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1014,  (int32_t)12);

uint64_t* tmp1015 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1015, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1011, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1014, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1014);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1011);

uint64_t* tmp1018 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2317;

int64_t i2316;

int64_t i2315;

int64_t i2314;

int64_t i2313;

int64_t i2312;

int64_t i2311;

int64_t i2310;
i2310 =  (int64_t)0;
i2311 =  (int64_t)0;
i2312 =  (int64_t)0;
i2313 =  (int64_t)0;
for (uint64_t i2314 =  (int32_t)0; i2314 <  (int32_t)1; i2314++){
for (uint64_t i2316 =  (int32_t)0; i2316 <  (int32_t)8; i2316++){
for (uint64_t i2317 =  (int32_t)0; i2317 <  (int32_t)8; i2317++){
for (uint64_t i2315 =  (int32_t)0; i2315 <  (int32_t)2048; i2315++){
Arr4DIdxRowM(tmp1018, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2314,i2315,i2316,i2317) = Arr4DIdxRowM(tmp1015, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2310,i2311,i2312,i2313);
i2313 = (i2313 +  (int64_t)1);
if ((i2313 ==  (int64_t)2048)) {
i2313 =  (int64_t)0;
i2312 = (i2312 +  (int64_t)1);
if ((i2312 ==  (int64_t)8)) {
i2312 =  (int64_t)0;
i2311 = (i2311 +  (int64_t)1);
if ((i2311 ==  (int64_t)8)) {
i2311 =  (int64_t)0;
i2310 = (i2310 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1015);

uint64_t* tmp1020 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024);

int64_t i2325;

int64_t i2324;

int64_t i2323;

int64_t i2322;

int64_t i2321;

int64_t i2320;

int64_t i2319;

int64_t i2318;
i2318 =  (int64_t)0;
i2319 =  (int64_t)0;
i2320 =  (int64_t)0;
i2321 =  (int64_t)0;
for (uint64_t i2322 =  (int32_t)0; i2322 <  (int32_t)1; i2322++){
for (uint64_t i2325 =  (int32_t)0; i2325 <  (int32_t)1024; i2325++){
for (uint64_t i2323 =  (int32_t)0; i2323 <  (int32_t)16; i2323++){
for (uint64_t i2324 =  (int32_t)0; i2324 <  (int32_t)16; i2324++){
Arr4DIdxRowM(tmp1020, (int32_t)1, (int32_t)16, (int32_t)16, (int32_t)1024,i2322,i2323,i2324,i2325) = Arr4DIdxRowM(tmp968, (int32_t)1, (int32_t)1024, (int32_t)16, (int32_t)16,i2318,i2319,i2320,i2321);
i2321 = (i2321 +  (int64_t)1);
if ((i2321 ==  (int64_t)16)) {
i2321 =  (int64_t)0;
i2320 = (i2320 +  (int64_t)1);
if ((i2320 ==  (int64_t)16)) {
i2320 =  (int64_t)0;
i2319 = (i2319 +  (int64_t)1);
if ((i2319 ==  (int64_t)1024)) {
i2319 =  (int64_t)0;
i2318 = (i2318 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1024,  (int32_t)16,  (int32_t)16, tmp968);

uint64_t* tmp1022 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)2048);

int64_t i2333;

int64_t i2332;

int64_t i2331;

int64_t i2330;

int64_t i2329;

int64_t i2328;

int64_t i2327;

int64_t i2326;
i2326 =  (int64_t)0;
i2327 =  (int64_t)0;
i2328 =  (int64_t)0;
i2329 =  (int64_t)0;
for (uint64_t i2333 =  (int32_t)0; i2333 <  (int32_t)2048; i2333++){
for (uint64_t i2332 =  (int32_t)0; i2332 <  (int32_t)1024; i2332++){
for (uint64_t i2330 =  (int32_t)0; i2330 <  (int32_t)1; i2330++){
for (uint64_t i2331 =  (int32_t)0; i2331 <  (int32_t)1; i2331++){
Arr4DIdxRowM(tmp1022, (int32_t)1, (int32_t)1, (int32_t)1024, (int32_t)2048,i2330,i2331,i2332,i2333) = Arr4DIdxRowM(tmp55, (int32_t)2048, (int32_t)1024, (int32_t)1, (int32_t)1,i2326,i2327,i2328,i2329);
i2329 = (i2329 +  (int64_t)1);
if ((i2329 ==  (int64_t)1)) {
i2329 =  (int64_t)0;
i2328 = (i2328 +  (int64_t)1);
if ((i2328 ==  (int64_t)1)) {
i2328 =  (int64_t)0;
i2327 = (i2327 +  (int64_t)1);
if ((i2327 ==  (int64_t)1024)) {
i2327 =  (int64_t)0;
i2326 = (i2326 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)2048,  (int32_t)1024,  (int32_t)1,  (int32_t)1, tmp55);

uint64_t* tmp1024 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp1020, tmp1022, tmp1024);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)2048, tmp1022);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)1024, tmp1020);

uint64_t* tmp1027 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048);

int64_t i2338;

int64_t i2337;

int64_t i2336;

int64_t i2335;

int64_t i2334;
i2334 =  (int64_t)0;
for (uint64_t i2335 =  (int32_t)0; i2335 <  (int32_t)1; i2335++){
for (uint64_t i2336 =  (int32_t)0; i2336 <  (int32_t)1; i2336++){
for (uint64_t i2337 =  (int32_t)0; i2337 <  (int32_t)1; i2337++){
for (uint64_t i2338 =  (int32_t)0; i2338 <  (int32_t)2048; i2338++){
Arr4DIdxRowM(tmp1027, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i2335,i2336,i2337,i2338) = Arr1DIdxRowM(tmp54, (int32_t)2048,i2334);
i2334 = (i2334 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1027,  (int32_t)12);

uint64_t* tmp1028 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1028, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1024, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1027, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1027);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1024);

uint64_t* tmp1031 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2346;

int64_t i2345;

int64_t i2344;

int64_t i2343;

int64_t i2342;

int64_t i2341;

int64_t i2340;

int64_t i2339;
i2339 =  (int64_t)0;
i2340 =  (int64_t)0;
i2341 =  (int64_t)0;
i2342 =  (int64_t)0;
for (uint64_t i2343 =  (int32_t)0; i2343 <  (int32_t)1; i2343++){
for (uint64_t i2345 =  (int32_t)0; i2345 <  (int32_t)8; i2345++){
for (uint64_t i2346 =  (int32_t)0; i2346 <  (int32_t)8; i2346++){
for (uint64_t i2344 =  (int32_t)0; i2344 <  (int32_t)2048; i2344++){
Arr4DIdxRowM(tmp1031, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2343,i2344,i2345,i2346) = Arr4DIdxRowM(tmp1028, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2339,i2340,i2341,i2342);
i2342 = (i2342 +  (int64_t)1);
if ((i2342 ==  (int64_t)2048)) {
i2342 =  (int64_t)0;
i2341 = (i2341 +  (int64_t)1);
if ((i2341 ==  (int64_t)8)) {
i2341 =  (int64_t)0;
i2340 = (i2340 +  (int64_t)1);
if ((i2340 ==  (int64_t)8)) {
i2340 =  (int64_t)0;
i2339 = (i2339 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1028);

uint64_t* tmp1033 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2354;

int64_t i2353;

int64_t i2352;

int64_t i2351;

int64_t i2350;

int64_t i2349;

int64_t i2348;

int64_t i2347;
i2347 =  (int64_t)0;
i2348 =  (int64_t)0;
i2349 =  (int64_t)0;
i2350 =  (int64_t)0;
for (uint64_t i2351 =  (int32_t)0; i2351 <  (int32_t)1; i2351++){
for (uint64_t i2354 =  (int32_t)0; i2354 <  (int32_t)2048; i2354++){
for (uint64_t i2352 =  (int32_t)0; i2352 <  (int32_t)8; i2352++){
for (uint64_t i2353 =  (int32_t)0; i2353 <  (int32_t)8; i2353++){
Arr4DIdxRowM(tmp1033, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2351,i2352,i2353,i2354) = Arr4DIdxRowM(tmp1018, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2347,i2348,i2349,i2350);
i2350 = (i2350 +  (int64_t)1);
if ((i2350 ==  (int64_t)8)) {
i2350 =  (int64_t)0;
i2349 = (i2349 +  (int64_t)1);
if ((i2349 ==  (int64_t)8)) {
i2349 =  (int64_t)0;
i2348 = (i2348 +  (int64_t)1);
if ((i2348 ==  (int64_t)2048)) {
i2348 =  (int64_t)0;
i2347 = (i2347 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1018);

uint64_t* tmp1035 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2362;

int64_t i2361;

int64_t i2360;

int64_t i2359;

int64_t i2358;

int64_t i2357;

int64_t i2356;

int64_t i2355;
i2355 =  (int64_t)0;
i2356 =  (int64_t)0;
i2357 =  (int64_t)0;
i2358 =  (int64_t)0;
for (uint64_t i2359 =  (int32_t)0; i2359 <  (int32_t)1; i2359++){
for (uint64_t i2362 =  (int32_t)0; i2362 <  (int32_t)2048; i2362++){
for (uint64_t i2360 =  (int32_t)0; i2360 <  (int32_t)8; i2360++){
for (uint64_t i2361 =  (int32_t)0; i2361 <  (int32_t)8; i2361++){
Arr4DIdxRowM(tmp1035, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2359,i2360,i2361,i2362) = Arr4DIdxRowM(tmp1031, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2355,i2356,i2357,i2358);
i2358 = (i2358 +  (int64_t)1);
if ((i2358 ==  (int64_t)8)) {
i2358 =  (int64_t)0;
i2357 = (i2357 +  (int64_t)1);
if ((i2357 ==  (int64_t)8)) {
i2357 =  (int64_t)0;
i2356 = (i2356 +  (int64_t)1);
if ((i2356 ==  (int64_t)2048)) {
i2356 =  (int64_t)0;
i2355 = (i2355 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1031);

uint64_t* tmp1037 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1037, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1033, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1035, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1035);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1033);

uint64_t* tmp1040 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2370;

int64_t i2369;

int64_t i2368;

int64_t i2367;

int64_t i2366;

int64_t i2365;

int64_t i2364;

int64_t i2363;
i2363 =  (int64_t)0;
i2364 =  (int64_t)0;
i2365 =  (int64_t)0;
i2366 =  (int64_t)0;
for (uint64_t i2367 =  (int32_t)0; i2367 <  (int32_t)1; i2367++){
for (uint64_t i2369 =  (int32_t)0; i2369 <  (int32_t)8; i2369++){
for (uint64_t i2370 =  (int32_t)0; i2370 <  (int32_t)8; i2370++){
for (uint64_t i2368 =  (int32_t)0; i2368 <  (int32_t)2048; i2368++){
Arr4DIdxRowM(tmp1040, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2367,i2368,i2369,i2370) = Arr4DIdxRowM(tmp1037, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2363,i2364,i2365,i2366);
i2366 = (i2366 +  (int64_t)1);
if ((i2366 ==  (int64_t)2048)) {
i2366 =  (int64_t)0;
i2365 = (i2365 +  (int64_t)1);
if ((i2365 ==  (int64_t)8)) {
i2365 =  (int64_t)0;
i2364 = (i2364 +  (int64_t)1);
if ((i2364 ==  (int64_t)8)) {
i2364 =  (int64_t)0;
i2363 = (i2363 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1037);

uint64_t* tmp1042 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2378;

int64_t i2377;

int64_t i2376;

int64_t i2375;

int64_t i2374;

int64_t i2373;

int64_t i2372;

int64_t i2371;
i2371 =  (int64_t)0;
i2372 =  (int64_t)0;
i2373 =  (int64_t)0;
i2374 =  (int64_t)0;
for (uint64_t i2375 =  (int32_t)0; i2375 <  (int32_t)1; i2375++){
for (uint64_t i2378 =  (int32_t)0; i2378 <  (int32_t)2048; i2378++){
for (uint64_t i2376 =  (int32_t)0; i2376 <  (int32_t)8; i2376++){
for (uint64_t i2377 =  (int32_t)0; i2377 <  (int32_t)8; i2377++){
Arr4DIdxRowM(tmp1042, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2375,i2376,i2377,i2378) = Arr4DIdxRowM(tmp1040, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2371,i2372,i2373,i2374);
i2374 = (i2374 +  (int64_t)1);
if ((i2374 ==  (int64_t)8)) {
i2374 =  (int64_t)0;
i2373 = (i2373 +  (int64_t)1);
if ((i2373 ==  (int64_t)8)) {
i2373 =  (int64_t)0;
i2372 = (i2372 +  (int64_t)1);
if ((i2372 ==  (int64_t)2048)) {
i2372 =  (int64_t)0;
i2371 = (i2371 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1040);

uint64_t* tmp1044 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1042, tmp1044,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1042);

uint64_t* tmp1046 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2386;

int64_t i2385;

int64_t i2384;

int64_t i2383;

int64_t i2382;

int64_t i2381;

int64_t i2380;

int64_t i2379;
i2379 =  (int64_t)0;
i2380 =  (int64_t)0;
i2381 =  (int64_t)0;
i2382 =  (int64_t)0;
for (uint64_t i2383 =  (int32_t)0; i2383 <  (int32_t)1; i2383++){
for (uint64_t i2385 =  (int32_t)0; i2385 <  (int32_t)8; i2385++){
for (uint64_t i2386 =  (int32_t)0; i2386 <  (int32_t)8; i2386++){
for (uint64_t i2384 =  (int32_t)0; i2384 <  (int32_t)2048; i2384++){
Arr4DIdxRowM(tmp1046, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2383,i2384,i2385,i2386) = Arr4DIdxRowM(tmp1044, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2379,i2380,i2381,i2382);
i2382 = (i2382 +  (int64_t)1);
if ((i2382 ==  (int64_t)2048)) {
i2382 =  (int64_t)0;
i2381 = (i2381 +  (int64_t)1);
if ((i2381 ==  (int64_t)8)) {
i2381 =  (int64_t)0;
i2380 = (i2380 +  (int64_t)1);
if ((i2380 ==  (int64_t)8)) {
i2380 =  (int64_t)0;
i2379 = (i2379 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1044);

uint64_t* tmp1048 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2394;

int64_t i2393;

int64_t i2392;

int64_t i2391;

int64_t i2390;

int64_t i2389;

int64_t i2388;

int64_t i2387;
i2387 =  (int64_t)0;
i2388 =  (int64_t)0;
i2389 =  (int64_t)0;
i2390 =  (int64_t)0;
for (uint64_t i2391 =  (int32_t)0; i2391 <  (int32_t)1; i2391++){
for (uint64_t i2394 =  (int32_t)0; i2394 <  (int32_t)2048; i2394++){
for (uint64_t i2392 =  (int32_t)0; i2392 <  (int32_t)8; i2392++){
for (uint64_t i2393 =  (int32_t)0; i2393 <  (int32_t)8; i2393++){
Arr4DIdxRowM(tmp1048, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2391,i2392,i2393,i2394) = Arr4DIdxRowM(tmp1046, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2387,i2388,i2389,i2390);
i2390 = (i2390 +  (int64_t)1);
if ((i2390 ==  (int64_t)8)) {
i2390 =  (int64_t)0;
i2389 = (i2389 +  (int64_t)1);
if ((i2389 ==  (int64_t)8)) {
i2389 =  (int64_t)0;
i2388 = (i2388 +  (int64_t)1);
if ((i2388 ==  (int64_t)2048)) {
i2388 =  (int64_t)0;
i2387 = (i2387 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp1049 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512);

int64_t i2402;

int64_t i2401;

int64_t i2400;

int64_t i2399;

int64_t i2398;

int64_t i2397;

int64_t i2396;

int64_t i2395;
i2395 =  (int64_t)0;
i2396 =  (int64_t)0;
i2397 =  (int64_t)0;
i2398 =  (int64_t)0;
for (uint64_t i2402 =  (int32_t)0; i2402 <  (int32_t)512; i2402++){
for (uint64_t i2401 =  (int32_t)0; i2401 <  (int32_t)2048; i2401++){
for (uint64_t i2399 =  (int32_t)0; i2399 <  (int32_t)1; i2399++){
for (uint64_t i2400 =  (int32_t)0; i2400 <  (int32_t)1; i2400++){
Arr4DIdxRowM(tmp1049, (int32_t)1, (int32_t)1, (int32_t)2048, (int32_t)512,i2399,i2400,i2401,i2402) = Arr4DIdxRowM(tmp56, (int32_t)512, (int32_t)2048, (int32_t)1, (int32_t)1,i2395,i2396,i2397,i2398);
i2398 = (i2398 +  (int64_t)1);
if ((i2398 ==  (int64_t)1)) {
i2398 =  (int64_t)0;
i2397 = (i2397 +  (int64_t)1);
if ((i2397 ==  (int64_t)1)) {
i2397 =  (int64_t)0;
i2396 = (i2396 +  (int64_t)1);
if ((i2396 ==  (int64_t)2048)) {
i2396 =  (int64_t)0;
i2395 = (i2395 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)2048,  (int32_t)1,  (int32_t)1, tmp56);

uint64_t* tmp1051 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1048, tmp1049, tmp1051);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512, tmp1049);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1048);

uint64_t* tmp1054 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2407;

int64_t i2406;

int64_t i2405;

int64_t i2404;

int64_t i2403;
i2403 =  (int64_t)0;
for (uint64_t i2404 =  (int32_t)0; i2404 <  (int32_t)1; i2404++){
for (uint64_t i2405 =  (int32_t)0; i2405 <  (int32_t)1; i2405++){
for (uint64_t i2406 =  (int32_t)0; i2406 <  (int32_t)1; i2406++){
for (uint64_t i2407 =  (int32_t)0; i2407 <  (int32_t)512; i2407++){
Arr4DIdxRowM(tmp1054, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2404,i2405,i2406,i2407) = Arr1DIdxRowM(tmp20, (int32_t)512,i2403);
i2403 = (i2403 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1054,  (int32_t)12);

uint64_t* tmp1055 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp1055, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1051, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp1054, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1054);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1051);

uint64_t* tmp1058 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2415;

int64_t i2414;

int64_t i2413;

int64_t i2412;

int64_t i2411;

int64_t i2410;

int64_t i2409;

int64_t i2408;
i2408 =  (int64_t)0;
i2409 =  (int64_t)0;
i2410 =  (int64_t)0;
i2411 =  (int64_t)0;
for (uint64_t i2412 =  (int32_t)0; i2412 <  (int32_t)1; i2412++){
for (uint64_t i2414 =  (int32_t)0; i2414 <  (int32_t)8; i2414++){
for (uint64_t i2415 =  (int32_t)0; i2415 <  (int32_t)8; i2415++){
for (uint64_t i2413 =  (int32_t)0; i2413 <  (int32_t)512; i2413++){
Arr4DIdxRowM(tmp1058, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2412,i2413,i2414,i2415) = Arr4DIdxRowM(tmp1055, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2408,i2409,i2410,i2411);
i2411 = (i2411 +  (int64_t)1);
if ((i2411 ==  (int64_t)512)) {
i2411 =  (int64_t)0;
i2410 = (i2410 +  (int64_t)1);
if ((i2410 ==  (int64_t)8)) {
i2410 =  (int64_t)0;
i2409 = (i2409 +  (int64_t)1);
if ((i2409 ==  (int64_t)8)) {
i2409 =  (int64_t)0;
i2408 = (i2408 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1055);

uint64_t* tmp1060 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2423;

int64_t i2422;

int64_t i2421;

int64_t i2420;

int64_t i2419;

int64_t i2418;

int64_t i2417;

int64_t i2416;
i2416 =  (int64_t)0;
i2417 =  (int64_t)0;
i2418 =  (int64_t)0;
i2419 =  (int64_t)0;
for (uint64_t i2420 =  (int32_t)0; i2420 <  (int32_t)1; i2420++){
for (uint64_t i2423 =  (int32_t)0; i2423 <  (int32_t)512; i2423++){
for (uint64_t i2421 =  (int32_t)0; i2421 <  (int32_t)8; i2421++){
for (uint64_t i2422 =  (int32_t)0; i2422 <  (int32_t)8; i2422++){
Arr4DIdxRowM(tmp1060, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2420,i2421,i2422,i2423) = Arr4DIdxRowM(tmp1058, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2416,i2417,i2418,i2419);
i2419 = (i2419 +  (int64_t)1);
if ((i2419 ==  (int64_t)8)) {
i2419 =  (int64_t)0;
i2418 = (i2418 +  (int64_t)1);
if ((i2418 ==  (int64_t)8)) {
i2418 =  (int64_t)0;
i2417 = (i2417 +  (int64_t)1);
if ((i2417 ==  (int64_t)512)) {
i2417 =  (int64_t)0;
i2416 = (i2416 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1058);

uint64_t* tmp1062 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1060, tmp1062,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1060);

uint64_t* tmp1064 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2431;

int64_t i2430;

int64_t i2429;

int64_t i2428;

int64_t i2427;

int64_t i2426;

int64_t i2425;

int64_t i2424;
i2424 =  (int64_t)0;
i2425 =  (int64_t)0;
i2426 =  (int64_t)0;
i2427 =  (int64_t)0;
for (uint64_t i2428 =  (int32_t)0; i2428 <  (int32_t)1; i2428++){
for (uint64_t i2430 =  (int32_t)0; i2430 <  (int32_t)8; i2430++){
for (uint64_t i2431 =  (int32_t)0; i2431 <  (int32_t)8; i2431++){
for (uint64_t i2429 =  (int32_t)0; i2429 <  (int32_t)512; i2429++){
Arr4DIdxRowM(tmp1064, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2428,i2429,i2430,i2431) = Arr4DIdxRowM(tmp1062, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2424,i2425,i2426,i2427);
i2427 = (i2427 +  (int64_t)1);
if ((i2427 ==  (int64_t)512)) {
i2427 =  (int64_t)0;
i2426 = (i2426 +  (int64_t)1);
if ((i2426 ==  (int64_t)8)) {
i2426 =  (int64_t)0;
i2425 = (i2425 +  (int64_t)1);
if ((i2425 ==  (int64_t)8)) {
i2425 =  (int64_t)0;
i2424 = (i2424 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1062);

uint64_t* tmp1066 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2439;

int64_t i2438;

int64_t i2437;

int64_t i2436;

int64_t i2435;

int64_t i2434;

int64_t i2433;

int64_t i2432;
i2432 =  (int64_t)0;
i2433 =  (int64_t)0;
i2434 =  (int64_t)0;
i2435 =  (int64_t)0;
for (uint64_t i2436 =  (int32_t)0; i2436 <  (int32_t)1; i2436++){
for (uint64_t i2439 =  (int32_t)0; i2439 <  (int32_t)512; i2439++){
for (uint64_t i2437 =  (int32_t)0; i2437 <  (int32_t)8; i2437++){
for (uint64_t i2438 =  (int32_t)0; i2438 <  (int32_t)8; i2438++){
Arr4DIdxRowM(tmp1066, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2436,i2437,i2438,i2439) = Arr4DIdxRowM(tmp1064, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2432,i2433,i2434,i2435);
i2435 = (i2435 +  (int64_t)1);
if ((i2435 ==  (int64_t)8)) {
i2435 =  (int64_t)0;
i2434 = (i2434 +  (int64_t)1);
if ((i2434 ==  (int64_t)8)) {
i2434 =  (int64_t)0;
i2433 = (i2433 +  (int64_t)1);
if ((i2433 ==  (int64_t)512)) {
i2433 =  (int64_t)0;
i2432 = (i2432 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1064);

uint64_t* tmp1068 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);

int64_t i2447;

int64_t i2446;

int64_t i2445;

int64_t i2444;

int64_t i2443;

int64_t i2442;

int64_t i2441;

int64_t i2440;
i2440 =  (int64_t)0;
i2441 =  (int64_t)0;
i2442 =  (int64_t)0;
i2443 =  (int64_t)0;
for (uint64_t i2447 =  (int32_t)0; i2447 <  (int32_t)512; i2447++){
for (uint64_t i2446 =  (int32_t)0; i2446 <  (int32_t)512; i2446++){
for (uint64_t i2444 =  (int32_t)0; i2444 <  (int32_t)3; i2444++){
for (uint64_t i2445 =  (int32_t)0; i2445 <  (int32_t)3; i2445++){
Arr4DIdxRowM(tmp1068, (int32_t)3, (int32_t)3, (int32_t)512, (int32_t)512,i2444,i2445,i2446,i2447) = Arr4DIdxRowM(tmp57, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i2440,i2441,i2442,i2443);
i2443 = (i2443 +  (int64_t)1);
if ((i2443 ==  (int64_t)3)) {
i2443 =  (int64_t)0;
i2442 = (i2442 +  (int64_t)1);
if ((i2442 ==  (int64_t)3)) {
i2442 =  (int64_t)0;
i2441 = (i2441 +  (int64_t)1);
if ((i2441 ==  (int64_t)512)) {
i2441 =  (int64_t)0;
i2440 = (i2440 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3, tmp57);

uint64_t* tmp1070 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1066, tmp1068, tmp1070);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp1068);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1066);

uint64_t* tmp1073 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2452;

int64_t i2451;

int64_t i2450;

int64_t i2449;

int64_t i2448;
i2448 =  (int64_t)0;
for (uint64_t i2449 =  (int32_t)0; i2449 <  (int32_t)1; i2449++){
for (uint64_t i2450 =  (int32_t)0; i2450 <  (int32_t)1; i2450++){
for (uint64_t i2451 =  (int32_t)0; i2451 <  (int32_t)1; i2451++){
for (uint64_t i2452 =  (int32_t)0; i2452 <  (int32_t)512; i2452++){
Arr4DIdxRowM(tmp1073, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2449,i2450,i2451,i2452) = Arr1DIdxRowM(tmp20, (int32_t)512,i2448);
i2448 = (i2448 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1073,  (int32_t)12);

uint64_t* tmp1074 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp1074, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1070, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp1073, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1073);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1070);

uint64_t* tmp1077 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2460;

int64_t i2459;

int64_t i2458;

int64_t i2457;

int64_t i2456;

int64_t i2455;

int64_t i2454;

int64_t i2453;
i2453 =  (int64_t)0;
i2454 =  (int64_t)0;
i2455 =  (int64_t)0;
i2456 =  (int64_t)0;
for (uint64_t i2457 =  (int32_t)0; i2457 <  (int32_t)1; i2457++){
for (uint64_t i2459 =  (int32_t)0; i2459 <  (int32_t)8; i2459++){
for (uint64_t i2460 =  (int32_t)0; i2460 <  (int32_t)8; i2460++){
for (uint64_t i2458 =  (int32_t)0; i2458 <  (int32_t)512; i2458++){
Arr4DIdxRowM(tmp1077, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2457,i2458,i2459,i2460) = Arr4DIdxRowM(tmp1074, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2453,i2454,i2455,i2456);
i2456 = (i2456 +  (int64_t)1);
if ((i2456 ==  (int64_t)512)) {
i2456 =  (int64_t)0;
i2455 = (i2455 +  (int64_t)1);
if ((i2455 ==  (int64_t)8)) {
i2455 =  (int64_t)0;
i2454 = (i2454 +  (int64_t)1);
if ((i2454 ==  (int64_t)8)) {
i2454 =  (int64_t)0;
i2453 = (i2453 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1074);

uint64_t* tmp1079 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2468;

int64_t i2467;

int64_t i2466;

int64_t i2465;

int64_t i2464;

int64_t i2463;

int64_t i2462;

int64_t i2461;
i2461 =  (int64_t)0;
i2462 =  (int64_t)0;
i2463 =  (int64_t)0;
i2464 =  (int64_t)0;
for (uint64_t i2465 =  (int32_t)0; i2465 <  (int32_t)1; i2465++){
for (uint64_t i2468 =  (int32_t)0; i2468 <  (int32_t)512; i2468++){
for (uint64_t i2466 =  (int32_t)0; i2466 <  (int32_t)8; i2466++){
for (uint64_t i2467 =  (int32_t)0; i2467 <  (int32_t)8; i2467++){
Arr4DIdxRowM(tmp1079, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2465,i2466,i2467,i2468) = Arr4DIdxRowM(tmp1077, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2461,i2462,i2463,i2464);
i2464 = (i2464 +  (int64_t)1);
if ((i2464 ==  (int64_t)8)) {
i2464 =  (int64_t)0;
i2463 = (i2463 +  (int64_t)1);
if ((i2463 ==  (int64_t)8)) {
i2463 =  (int64_t)0;
i2462 = (i2462 +  (int64_t)1);
if ((i2462 ==  (int64_t)512)) {
i2462 =  (int64_t)0;
i2461 = (i2461 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1077);

uint64_t* tmp1081 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1079, tmp1081,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1079);

uint64_t* tmp1083 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2476;

int64_t i2475;

int64_t i2474;

int64_t i2473;

int64_t i2472;

int64_t i2471;

int64_t i2470;

int64_t i2469;
i2469 =  (int64_t)0;
i2470 =  (int64_t)0;
i2471 =  (int64_t)0;
i2472 =  (int64_t)0;
for (uint64_t i2473 =  (int32_t)0; i2473 <  (int32_t)1; i2473++){
for (uint64_t i2475 =  (int32_t)0; i2475 <  (int32_t)8; i2475++){
for (uint64_t i2476 =  (int32_t)0; i2476 <  (int32_t)8; i2476++){
for (uint64_t i2474 =  (int32_t)0; i2474 <  (int32_t)512; i2474++){
Arr4DIdxRowM(tmp1083, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2473,i2474,i2475,i2476) = Arr4DIdxRowM(tmp1081, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2469,i2470,i2471,i2472);
i2472 = (i2472 +  (int64_t)1);
if ((i2472 ==  (int64_t)512)) {
i2472 =  (int64_t)0;
i2471 = (i2471 +  (int64_t)1);
if ((i2471 ==  (int64_t)8)) {
i2471 =  (int64_t)0;
i2470 = (i2470 +  (int64_t)1);
if ((i2470 ==  (int64_t)8)) {
i2470 =  (int64_t)0;
i2469 = (i2469 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1081);

uint64_t* tmp1085 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2484;

int64_t i2483;

int64_t i2482;

int64_t i2481;

int64_t i2480;

int64_t i2479;

int64_t i2478;

int64_t i2477;
i2477 =  (int64_t)0;
i2478 =  (int64_t)0;
i2479 =  (int64_t)0;
i2480 =  (int64_t)0;
for (uint64_t i2481 =  (int32_t)0; i2481 <  (int32_t)1; i2481++){
for (uint64_t i2484 =  (int32_t)0; i2484 <  (int32_t)512; i2484++){
for (uint64_t i2482 =  (int32_t)0; i2482 <  (int32_t)8; i2482++){
for (uint64_t i2483 =  (int32_t)0; i2483 <  (int32_t)8; i2483++){
Arr4DIdxRowM(tmp1085, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2481,i2482,i2483,i2484) = Arr4DIdxRowM(tmp1083, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2477,i2478,i2479,i2480);
i2480 = (i2480 +  (int64_t)1);
if ((i2480 ==  (int64_t)8)) {
i2480 =  (int64_t)0;
i2479 = (i2479 +  (int64_t)1);
if ((i2479 ==  (int64_t)8)) {
i2479 =  (int64_t)0;
i2478 = (i2478 +  (int64_t)1);
if ((i2478 ==  (int64_t)512)) {
i2478 =  (int64_t)0;
i2477 = (i2477 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1083);

uint64_t* tmp1087 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);

int64_t i2492;

int64_t i2491;

int64_t i2490;

int64_t i2489;

int64_t i2488;

int64_t i2487;

int64_t i2486;

int64_t i2485;
i2485 =  (int64_t)0;
i2486 =  (int64_t)0;
i2487 =  (int64_t)0;
i2488 =  (int64_t)0;
for (uint64_t i2492 =  (int32_t)0; i2492 <  (int32_t)2048; i2492++){
for (uint64_t i2491 =  (int32_t)0; i2491 <  (int32_t)512; i2491++){
for (uint64_t i2489 =  (int32_t)0; i2489 <  (int32_t)1; i2489++){
for (uint64_t i2490 =  (int32_t)0; i2490 <  (int32_t)1; i2490++){
Arr4DIdxRowM(tmp1087, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)2048,i2489,i2490,i2491,i2492) = Arr4DIdxRowM(tmp58, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i2485,i2486,i2487,i2488);
i2488 = (i2488 +  (int64_t)1);
if ((i2488 ==  (int64_t)1)) {
i2488 =  (int64_t)0;
i2487 = (i2487 +  (int64_t)1);
if ((i2487 ==  (int64_t)1)) {
i2487 =  (int64_t)0;
i2486 = (i2486 +  (int64_t)1);
if ((i2486 ==  (int64_t)512)) {
i2486 =  (int64_t)0;
i2485 = (i2485 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp58);

uint64_t* tmp1089 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1085, tmp1087, tmp1089);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1085);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp1087);

uint64_t* tmp1092 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048);

int64_t i2497;

int64_t i2496;

int64_t i2495;

int64_t i2494;

int64_t i2493;
i2493 =  (int64_t)0;
for (uint64_t i2494 =  (int32_t)0; i2494 <  (int32_t)1; i2494++){
for (uint64_t i2495 =  (int32_t)0; i2495 <  (int32_t)1; i2495++){
for (uint64_t i2496 =  (int32_t)0; i2496 <  (int32_t)1; i2496++){
for (uint64_t i2497 =  (int32_t)0; i2497 <  (int32_t)2048; i2497++){
Arr4DIdxRowM(tmp1092, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i2494,i2495,i2496,i2497) = Arr1DIdxRowM(tmp54, (int32_t)2048,i2493);
i2493 = (i2493 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1092,  (int32_t)12);

uint64_t* tmp1093 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1093, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1089, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1092, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1089);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1092);

uint64_t* tmp1096 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2505;

int64_t i2504;

int64_t i2503;

int64_t i2502;

int64_t i2501;

int64_t i2500;

int64_t i2499;

int64_t i2498;
i2498 =  (int64_t)0;
i2499 =  (int64_t)0;
i2500 =  (int64_t)0;
i2501 =  (int64_t)0;
for (uint64_t i2502 =  (int32_t)0; i2502 <  (int32_t)1; i2502++){
for (uint64_t i2504 =  (int32_t)0; i2504 <  (int32_t)8; i2504++){
for (uint64_t i2505 =  (int32_t)0; i2505 <  (int32_t)8; i2505++){
for (uint64_t i2503 =  (int32_t)0; i2503 <  (int32_t)2048; i2503++){
Arr4DIdxRowM(tmp1096, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2502,i2503,i2504,i2505) = Arr4DIdxRowM(tmp1093, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2498,i2499,i2500,i2501);
i2501 = (i2501 +  (int64_t)1);
if ((i2501 ==  (int64_t)2048)) {
i2501 =  (int64_t)0;
i2500 = (i2500 +  (int64_t)1);
if ((i2500 ==  (int64_t)8)) {
i2500 =  (int64_t)0;
i2499 = (i2499 +  (int64_t)1);
if ((i2499 ==  (int64_t)8)) {
i2499 =  (int64_t)0;
i2498 = (i2498 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1093);

uint64_t* tmp1098 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2513;

int64_t i2512;

int64_t i2511;

int64_t i2510;

int64_t i2509;

int64_t i2508;

int64_t i2507;

int64_t i2506;
i2506 =  (int64_t)0;
i2507 =  (int64_t)0;
i2508 =  (int64_t)0;
i2509 =  (int64_t)0;
for (uint64_t i2510 =  (int32_t)0; i2510 <  (int32_t)1; i2510++){
for (uint64_t i2513 =  (int32_t)0; i2513 <  (int32_t)2048; i2513++){
for (uint64_t i2511 =  (int32_t)0; i2511 <  (int32_t)8; i2511++){
for (uint64_t i2512 =  (int32_t)0; i2512 <  (int32_t)8; i2512++){
Arr4DIdxRowM(tmp1098, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2510,i2511,i2512,i2513) = Arr4DIdxRowM(tmp1096, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2506,i2507,i2508,i2509);
i2509 = (i2509 +  (int64_t)1);
if ((i2509 ==  (int64_t)8)) {
i2509 =  (int64_t)0;
i2508 = (i2508 +  (int64_t)1);
if ((i2508 ==  (int64_t)8)) {
i2508 =  (int64_t)0;
i2507 = (i2507 +  (int64_t)1);
if ((i2507 ==  (int64_t)2048)) {
i2507 =  (int64_t)0;
i2506 = (i2506 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1096);

uint64_t* tmp1100 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2521;

int64_t i2520;

int64_t i2519;

int64_t i2518;

int64_t i2517;

int64_t i2516;

int64_t i2515;

int64_t i2514;
i2514 =  (int64_t)0;
i2515 =  (int64_t)0;
i2516 =  (int64_t)0;
i2517 =  (int64_t)0;
for (uint64_t i2518 =  (int32_t)0; i2518 <  (int32_t)1; i2518++){
for (uint64_t i2521 =  (int32_t)0; i2521 <  (int32_t)2048; i2521++){
for (uint64_t i2519 =  (int32_t)0; i2519 <  (int32_t)8; i2519++){
for (uint64_t i2520 =  (int32_t)0; i2520 <  (int32_t)8; i2520++){
Arr4DIdxRowM(tmp1100, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2518,i2519,i2520,i2521) = Arr4DIdxRowM(tmp1046, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2514,i2515,i2516,i2517);
i2517 = (i2517 +  (int64_t)1);
if ((i2517 ==  (int64_t)8)) {
i2517 =  (int64_t)0;
i2516 = (i2516 +  (int64_t)1);
if ((i2516 ==  (int64_t)8)) {
i2516 =  (int64_t)0;
i2515 = (i2515 +  (int64_t)1);
if ((i2515 ==  (int64_t)2048)) {
i2515 =  (int64_t)0;
i2514 = (i2514 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1046);
ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1100,  (int32_t)12);

uint64_t* tmp1102 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1102, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1098, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1100, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1100);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1098);

uint64_t* tmp1105 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2529;

int64_t i2528;

int64_t i2527;

int64_t i2526;

int64_t i2525;

int64_t i2524;

int64_t i2523;

int64_t i2522;
i2522 =  (int64_t)0;
i2523 =  (int64_t)0;
i2524 =  (int64_t)0;
i2525 =  (int64_t)0;
for (uint64_t i2526 =  (int32_t)0; i2526 <  (int32_t)1; i2526++){
for (uint64_t i2528 =  (int32_t)0; i2528 <  (int32_t)8; i2528++){
for (uint64_t i2529 =  (int32_t)0; i2529 <  (int32_t)8; i2529++){
for (uint64_t i2527 =  (int32_t)0; i2527 <  (int32_t)2048; i2527++){
Arr4DIdxRowM(tmp1105, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2526,i2527,i2528,i2529) = Arr4DIdxRowM(tmp1102, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2522,i2523,i2524,i2525);
i2525 = (i2525 +  (int64_t)1);
if ((i2525 ==  (int64_t)2048)) {
i2525 =  (int64_t)0;
i2524 = (i2524 +  (int64_t)1);
if ((i2524 ==  (int64_t)8)) {
i2524 =  (int64_t)0;
i2523 = (i2523 +  (int64_t)1);
if ((i2523 ==  (int64_t)8)) {
i2523 =  (int64_t)0;
i2522 = (i2522 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1102);

uint64_t* tmp1107 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2537;

int64_t i2536;

int64_t i2535;

int64_t i2534;

int64_t i2533;

int64_t i2532;

int64_t i2531;

int64_t i2530;
i2530 =  (int64_t)0;
i2531 =  (int64_t)0;
i2532 =  (int64_t)0;
i2533 =  (int64_t)0;
for (uint64_t i2534 =  (int32_t)0; i2534 <  (int32_t)1; i2534++){
for (uint64_t i2537 =  (int32_t)0; i2537 <  (int32_t)2048; i2537++){
for (uint64_t i2535 =  (int32_t)0; i2535 <  (int32_t)8; i2535++){
for (uint64_t i2536 =  (int32_t)0; i2536 <  (int32_t)8; i2536++){
Arr4DIdxRowM(tmp1107, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2534,i2535,i2536,i2537) = Arr4DIdxRowM(tmp1105, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2530,i2531,i2532,i2533);
i2533 = (i2533 +  (int64_t)1);
if ((i2533 ==  (int64_t)8)) {
i2533 =  (int64_t)0;
i2532 = (i2532 +  (int64_t)1);
if ((i2532 ==  (int64_t)8)) {
i2532 =  (int64_t)0;
i2531 = (i2531 +  (int64_t)1);
if ((i2531 ==  (int64_t)2048)) {
i2531 =  (int64_t)0;
i2530 = (i2530 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1105);

uint64_t* tmp1109 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1107, tmp1109,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1107);

uint64_t* tmp1111 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2545;

int64_t i2544;

int64_t i2543;

int64_t i2542;

int64_t i2541;

int64_t i2540;

int64_t i2539;

int64_t i2538;
i2538 =  (int64_t)0;
i2539 =  (int64_t)0;
i2540 =  (int64_t)0;
i2541 =  (int64_t)0;
for (uint64_t i2542 =  (int32_t)0; i2542 <  (int32_t)1; i2542++){
for (uint64_t i2544 =  (int32_t)0; i2544 <  (int32_t)8; i2544++){
for (uint64_t i2545 =  (int32_t)0; i2545 <  (int32_t)8; i2545++){
for (uint64_t i2543 =  (int32_t)0; i2543 <  (int32_t)2048; i2543++){
Arr4DIdxRowM(tmp1111, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2542,i2543,i2544,i2545) = Arr4DIdxRowM(tmp1109, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2538,i2539,i2540,i2541);
i2541 = (i2541 +  (int64_t)1);
if ((i2541 ==  (int64_t)2048)) {
i2541 =  (int64_t)0;
i2540 = (i2540 +  (int64_t)1);
if ((i2540 ==  (int64_t)8)) {
i2540 =  (int64_t)0;
i2539 = (i2539 +  (int64_t)1);
if ((i2539 ==  (int64_t)8)) {
i2539 =  (int64_t)0;
i2538 = (i2538 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1109);

uint64_t* tmp1113 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2553;

int64_t i2552;

int64_t i2551;

int64_t i2550;

int64_t i2549;

int64_t i2548;

int64_t i2547;

int64_t i2546;
i2546 =  (int64_t)0;
i2547 =  (int64_t)0;
i2548 =  (int64_t)0;
i2549 =  (int64_t)0;
for (uint64_t i2550 =  (int32_t)0; i2550 <  (int32_t)1; i2550++){
for (uint64_t i2553 =  (int32_t)0; i2553 <  (int32_t)2048; i2553++){
for (uint64_t i2551 =  (int32_t)0; i2551 <  (int32_t)8; i2551++){
for (uint64_t i2552 =  (int32_t)0; i2552 <  (int32_t)8; i2552++){
Arr4DIdxRowM(tmp1113, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2550,i2551,i2552,i2553) = Arr4DIdxRowM(tmp1111, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2546,i2547,i2548,i2549);
i2549 = (i2549 +  (int64_t)1);
if ((i2549 ==  (int64_t)8)) {
i2549 =  (int64_t)0;
i2548 = (i2548 +  (int64_t)1);
if ((i2548 ==  (int64_t)8)) {
i2548 =  (int64_t)0;
i2547 = (i2547 +  (int64_t)1);
if ((i2547 ==  (int64_t)2048)) {
i2547 =  (int64_t)0;
i2546 = (i2546 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp1114 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512);

int64_t i2561;

int64_t i2560;

int64_t i2559;

int64_t i2558;

int64_t i2557;

int64_t i2556;

int64_t i2555;

int64_t i2554;
i2554 =  (int64_t)0;
i2555 =  (int64_t)0;
i2556 =  (int64_t)0;
i2557 =  (int64_t)0;
for (uint64_t i2561 =  (int32_t)0; i2561 <  (int32_t)512; i2561++){
for (uint64_t i2560 =  (int32_t)0; i2560 <  (int32_t)2048; i2560++){
for (uint64_t i2558 =  (int32_t)0; i2558 <  (int32_t)1; i2558++){
for (uint64_t i2559 =  (int32_t)0; i2559 <  (int32_t)1; i2559++){
Arr4DIdxRowM(tmp1114, (int32_t)1, (int32_t)1, (int32_t)2048, (int32_t)512,i2558,i2559,i2560,i2561) = Arr4DIdxRowM(tmp59, (int32_t)512, (int32_t)2048, (int32_t)1, (int32_t)1,i2554,i2555,i2556,i2557);
i2557 = (i2557 +  (int64_t)1);
if ((i2557 ==  (int64_t)1)) {
i2557 =  (int64_t)0;
i2556 = (i2556 +  (int64_t)1);
if ((i2556 ==  (int64_t)1)) {
i2556 =  (int64_t)0;
i2555 = (i2555 +  (int64_t)1);
if ((i2555 ==  (int64_t)2048)) {
i2555 =  (int64_t)0;
i2554 = (i2554 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)2048,  (int32_t)1,  (int32_t)1, tmp59);

uint64_t* tmp1116 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1113, tmp1114, tmp1116);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512, tmp1114);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1113);

uint64_t* tmp1119 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2566;

int64_t i2565;

int64_t i2564;

int64_t i2563;

int64_t i2562;
i2562 =  (int64_t)0;
for (uint64_t i2563 =  (int32_t)0; i2563 <  (int32_t)1; i2563++){
for (uint64_t i2564 =  (int32_t)0; i2564 <  (int32_t)1; i2564++){
for (uint64_t i2565 =  (int32_t)0; i2565 <  (int32_t)1; i2565++){
for (uint64_t i2566 =  (int32_t)0; i2566 <  (int32_t)512; i2566++){
Arr4DIdxRowM(tmp1119, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2563,i2564,i2565,i2566) = Arr1DIdxRowM(tmp20, (int32_t)512,i2562);
i2562 = (i2562 +  (int64_t)1);
}
}
}
}
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1119,  (int32_t)12);

uint64_t* tmp1120 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp1120, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1116, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp1119, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1116);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1119);

uint64_t* tmp1123 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2574;

int64_t i2573;

int64_t i2572;

int64_t i2571;

int64_t i2570;

int64_t i2569;

int64_t i2568;

int64_t i2567;
i2567 =  (int64_t)0;
i2568 =  (int64_t)0;
i2569 =  (int64_t)0;
i2570 =  (int64_t)0;
for (uint64_t i2571 =  (int32_t)0; i2571 <  (int32_t)1; i2571++){
for (uint64_t i2573 =  (int32_t)0; i2573 <  (int32_t)8; i2573++){
for (uint64_t i2574 =  (int32_t)0; i2574 <  (int32_t)8; i2574++){
for (uint64_t i2572 =  (int32_t)0; i2572 <  (int32_t)512; i2572++){
Arr4DIdxRowM(tmp1123, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2571,i2572,i2573,i2574) = Arr4DIdxRowM(tmp1120, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2567,i2568,i2569,i2570);
i2570 = (i2570 +  (int64_t)1);
if ((i2570 ==  (int64_t)512)) {
i2570 =  (int64_t)0;
i2569 = (i2569 +  (int64_t)1);
if ((i2569 ==  (int64_t)8)) {
i2569 =  (int64_t)0;
i2568 = (i2568 +  (int64_t)1);
if ((i2568 ==  (int64_t)8)) {
i2568 =  (int64_t)0;
i2567 = (i2567 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1120);

uint64_t* tmp1125 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2582;

int64_t i2581;

int64_t i2580;

int64_t i2579;

int64_t i2578;

int64_t i2577;

int64_t i2576;

int64_t i2575;
i2575 =  (int64_t)0;
i2576 =  (int64_t)0;
i2577 =  (int64_t)0;
i2578 =  (int64_t)0;
for (uint64_t i2579 =  (int32_t)0; i2579 <  (int32_t)1; i2579++){
for (uint64_t i2582 =  (int32_t)0; i2582 <  (int32_t)512; i2582++){
for (uint64_t i2580 =  (int32_t)0; i2580 <  (int32_t)8; i2580++){
for (uint64_t i2581 =  (int32_t)0; i2581 <  (int32_t)8; i2581++){
Arr4DIdxRowM(tmp1125, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2579,i2580,i2581,i2582) = Arr4DIdxRowM(tmp1123, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2575,i2576,i2577,i2578);
i2578 = (i2578 +  (int64_t)1);
if ((i2578 ==  (int64_t)8)) {
i2578 =  (int64_t)0;
i2577 = (i2577 +  (int64_t)1);
if ((i2577 ==  (int64_t)8)) {
i2577 =  (int64_t)0;
i2576 = (i2576 +  (int64_t)1);
if ((i2576 ==  (int64_t)512)) {
i2576 =  (int64_t)0;
i2575 = (i2575 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1123);

uint64_t* tmp1127 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1125, tmp1127,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1125);

uint64_t* tmp1129 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2590;

int64_t i2589;

int64_t i2588;

int64_t i2587;

int64_t i2586;

int64_t i2585;

int64_t i2584;

int64_t i2583;
i2583 =  (int64_t)0;
i2584 =  (int64_t)0;
i2585 =  (int64_t)0;
i2586 =  (int64_t)0;
for (uint64_t i2587 =  (int32_t)0; i2587 <  (int32_t)1; i2587++){
for (uint64_t i2589 =  (int32_t)0; i2589 <  (int32_t)8; i2589++){
for (uint64_t i2590 =  (int32_t)0; i2590 <  (int32_t)8; i2590++){
for (uint64_t i2588 =  (int32_t)0; i2588 <  (int32_t)512; i2588++){
Arr4DIdxRowM(tmp1129, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2587,i2588,i2589,i2590) = Arr4DIdxRowM(tmp1127, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2583,i2584,i2585,i2586);
i2586 = (i2586 +  (int64_t)1);
if ((i2586 ==  (int64_t)512)) {
i2586 =  (int64_t)0;
i2585 = (i2585 +  (int64_t)1);
if ((i2585 ==  (int64_t)8)) {
i2585 =  (int64_t)0;
i2584 = (i2584 +  (int64_t)1);
if ((i2584 ==  (int64_t)8)) {
i2584 =  (int64_t)0;
i2583 = (i2583 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1127);

uint64_t* tmp1131 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2598;

int64_t i2597;

int64_t i2596;

int64_t i2595;

int64_t i2594;

int64_t i2593;

int64_t i2592;

int64_t i2591;
i2591 =  (int64_t)0;
i2592 =  (int64_t)0;
i2593 =  (int64_t)0;
i2594 =  (int64_t)0;
for (uint64_t i2595 =  (int32_t)0; i2595 <  (int32_t)1; i2595++){
for (uint64_t i2598 =  (int32_t)0; i2598 <  (int32_t)512; i2598++){
for (uint64_t i2596 =  (int32_t)0; i2596 <  (int32_t)8; i2596++){
for (uint64_t i2597 =  (int32_t)0; i2597 <  (int32_t)8; i2597++){
Arr4DIdxRowM(tmp1131, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2595,i2596,i2597,i2598) = Arr4DIdxRowM(tmp1129, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2591,i2592,i2593,i2594);
i2594 = (i2594 +  (int64_t)1);
if ((i2594 ==  (int64_t)8)) {
i2594 =  (int64_t)0;
i2593 = (i2593 +  (int64_t)1);
if ((i2593 ==  (int64_t)8)) {
i2593 =  (int64_t)0;
i2592 = (i2592 +  (int64_t)1);
if ((i2592 ==  (int64_t)512)) {
i2592 =  (int64_t)0;
i2591 = (i2591 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1129);

uint64_t* tmp1133 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);

int64_t i2606;

int64_t i2605;

int64_t i2604;

int64_t i2603;

int64_t i2602;

int64_t i2601;

int64_t i2600;

int64_t i2599;
i2599 =  (int64_t)0;
i2600 =  (int64_t)0;
i2601 =  (int64_t)0;
i2602 =  (int64_t)0;
for (uint64_t i2606 =  (int32_t)0; i2606 <  (int32_t)512; i2606++){
for (uint64_t i2605 =  (int32_t)0; i2605 <  (int32_t)512; i2605++){
for (uint64_t i2603 =  (int32_t)0; i2603 <  (int32_t)3; i2603++){
for (uint64_t i2604 =  (int32_t)0; i2604 <  (int32_t)3; i2604++){
Arr4DIdxRowM(tmp1133, (int32_t)3, (int32_t)3, (int32_t)512, (int32_t)512,i2603,i2604,i2605,i2606) = Arr4DIdxRowM(tmp60, (int32_t)512, (int32_t)512, (int32_t)3, (int32_t)3,i2599,i2600,i2601,i2602);
i2602 = (i2602 +  (int64_t)1);
if ((i2602 ==  (int64_t)3)) {
i2602 =  (int64_t)0;
i2601 = (i2601 +  (int64_t)1);
if ((i2601 ==  (int64_t)3)) {
i2601 =  (int64_t)0;
i2600 = (i2600 +  (int64_t)1);
if ((i2600 ==  (int64_t)512)) {
i2600 =  (int64_t)0;
i2599 = (i2599 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)512,  (int32_t)512,  (int32_t)3,  (int32_t)3, tmp60);

uint64_t* tmp1135 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1131, tmp1133, tmp1135);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1131);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp1133);

uint64_t* tmp1138 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512);

int64_t i2611;

int64_t i2610;

int64_t i2609;

int64_t i2608;

int64_t i2607;
i2607 =  (int64_t)0;
for (uint64_t i2608 =  (int32_t)0; i2608 <  (int32_t)1; i2608++){
for (uint64_t i2609 =  (int32_t)0; i2609 <  (int32_t)1; i2609++){
for (uint64_t i2610 =  (int32_t)0; i2610 <  (int32_t)1; i2610++){
for (uint64_t i2611 =  (int32_t)0; i2611 <  (int32_t)512; i2611++){
Arr4DIdxRowM(tmp1138, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i2608,i2609,i2610,i2611) = Arr1DIdxRowM(tmp20, (int32_t)512,i2607);
i2607 = (i2607 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)512, tmp20);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1138,  (int32_t)12);

uint64_t* tmp1140 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)512; i3++){
Arr4DIdxRowM(tmp1140, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1135, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i0,i1,i2,i3), Arr4DIdxRowM(tmp1138, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)512,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1135);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512, tmp1138);

uint64_t* tmp1143 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2619;

int64_t i2618;

int64_t i2617;

int64_t i2616;

int64_t i2615;

int64_t i2614;

int64_t i2613;

int64_t i2612;
i2612 =  (int64_t)0;
i2613 =  (int64_t)0;
i2614 =  (int64_t)0;
i2615 =  (int64_t)0;
for (uint64_t i2616 =  (int32_t)0; i2616 <  (int32_t)1; i2616++){
for (uint64_t i2618 =  (int32_t)0; i2618 <  (int32_t)8; i2618++){
for (uint64_t i2619 =  (int32_t)0; i2619 <  (int32_t)8; i2619++){
for (uint64_t i2617 =  (int32_t)0; i2617 <  (int32_t)512; i2617++){
Arr4DIdxRowM(tmp1143, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2616,i2617,i2618,i2619) = Arr4DIdxRowM(tmp1140, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2612,i2613,i2614,i2615);
i2615 = (i2615 +  (int64_t)1);
if ((i2615 ==  (int64_t)512)) {
i2615 =  (int64_t)0;
i2614 = (i2614 +  (int64_t)1);
if ((i2614 ==  (int64_t)8)) {
i2614 =  (int64_t)0;
i2613 = (i2613 +  (int64_t)1);
if ((i2613 ==  (int64_t)8)) {
i2613 =  (int64_t)0;
i2612 = (i2612 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1140);

uint64_t* tmp1145 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2627;

int64_t i2626;

int64_t i2625;

int64_t i2624;

int64_t i2623;

int64_t i2622;

int64_t i2621;

int64_t i2620;
i2620 =  (int64_t)0;
i2621 =  (int64_t)0;
i2622 =  (int64_t)0;
i2623 =  (int64_t)0;
for (uint64_t i2624 =  (int32_t)0; i2624 <  (int32_t)1; i2624++){
for (uint64_t i2627 =  (int32_t)0; i2627 <  (int32_t)512; i2627++){
for (uint64_t i2625 =  (int32_t)0; i2625 <  (int32_t)8; i2625++){
for (uint64_t i2626 =  (int32_t)0; i2626 <  (int32_t)8; i2626++){
Arr4DIdxRowM(tmp1145, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2624,i2625,i2626,i2627) = Arr4DIdxRowM(tmp1143, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2620,i2621,i2622,i2623);
i2623 = (i2623 +  (int64_t)1);
if ((i2623 ==  (int64_t)8)) {
i2623 =  (int64_t)0;
i2622 = (i2622 +  (int64_t)1);
if ((i2622 ==  (int64_t)8)) {
i2622 =  (int64_t)0;
i2621 = (i2621 +  (int64_t)1);
if ((i2621 ==  (int64_t)512)) {
i2621 =  (int64_t)0;
i2620 = (i2620 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1143);

uint64_t* tmp1147 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1145, tmp1147,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1145);

uint64_t* tmp1149 = make_array<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8);

int64_t i2635;

int64_t i2634;

int64_t i2633;

int64_t i2632;

int64_t i2631;

int64_t i2630;

int64_t i2629;

int64_t i2628;
i2628 =  (int64_t)0;
i2629 =  (int64_t)0;
i2630 =  (int64_t)0;
i2631 =  (int64_t)0;
for (uint64_t i2632 =  (int32_t)0; i2632 <  (int32_t)1; i2632++){
for (uint64_t i2634 =  (int32_t)0; i2634 <  (int32_t)8; i2634++){
for (uint64_t i2635 =  (int32_t)0; i2635 <  (int32_t)8; i2635++){
for (uint64_t i2633 =  (int32_t)0; i2633 <  (int32_t)512; i2633++){
Arr4DIdxRowM(tmp1149, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2632,i2633,i2634,i2635) = Arr4DIdxRowM(tmp1147, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2628,i2629,i2630,i2631);
i2631 = (i2631 +  (int64_t)1);
if ((i2631 ==  (int64_t)512)) {
i2631 =  (int64_t)0;
i2630 = (i2630 +  (int64_t)1);
if ((i2630 ==  (int64_t)8)) {
i2630 =  (int64_t)0;
i2629 = (i2629 +  (int64_t)1);
if ((i2629 ==  (int64_t)8)) {
i2629 =  (int64_t)0;
i2628 = (i2628 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1147);

uint64_t* tmp1151 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512);

int64_t i2643;

int64_t i2642;

int64_t i2641;

int64_t i2640;

int64_t i2639;

int64_t i2638;

int64_t i2637;

int64_t i2636;
i2636 =  (int64_t)0;
i2637 =  (int64_t)0;
i2638 =  (int64_t)0;
i2639 =  (int64_t)0;
for (uint64_t i2640 =  (int32_t)0; i2640 <  (int32_t)1; i2640++){
for (uint64_t i2643 =  (int32_t)0; i2643 <  (int32_t)512; i2643++){
for (uint64_t i2641 =  (int32_t)0; i2641 <  (int32_t)8; i2641++){
for (uint64_t i2642 =  (int32_t)0; i2642 <  (int32_t)8; i2642++){
Arr4DIdxRowM(tmp1151, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)512,i2640,i2641,i2642,i2643) = Arr4DIdxRowM(tmp1149, (int32_t)1, (int32_t)512, (int32_t)8, (int32_t)8,i2636,i2637,i2638,i2639);
i2639 = (i2639 +  (int64_t)1);
if ((i2639 ==  (int64_t)8)) {
i2639 =  (int64_t)0;
i2638 = (i2638 +  (int64_t)1);
if ((i2638 ==  (int64_t)8)) {
i2638 =  (int64_t)0;
i2637 = (i2637 +  (int64_t)1);
if ((i2637 ==  (int64_t)512)) {
i2637 =  (int64_t)0;
i2636 = (i2636 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)512,  (int32_t)8,  (int32_t)8, tmp1149);

uint64_t* tmp1153 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);

int64_t i2651;

int64_t i2650;

int64_t i2649;

int64_t i2648;

int64_t i2647;

int64_t i2646;

int64_t i2645;

int64_t i2644;
i2644 =  (int64_t)0;
i2645 =  (int64_t)0;
i2646 =  (int64_t)0;
i2647 =  (int64_t)0;
for (uint64_t i2651 =  (int32_t)0; i2651 <  (int32_t)2048; i2651++){
for (uint64_t i2650 =  (int32_t)0; i2650 <  (int32_t)512; i2650++){
for (uint64_t i2648 =  (int32_t)0; i2648 <  (int32_t)1; i2648++){
for (uint64_t i2649 =  (int32_t)0; i2649 <  (int32_t)1; i2649++){
Arr4DIdxRowM(tmp1153, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)2048,i2648,i2649,i2650,i2651) = Arr4DIdxRowM(tmp61, (int32_t)2048, (int32_t)512, (int32_t)1, (int32_t)1,i2644,i2645,i2646,i2647);
i2647 = (i2647 +  (int64_t)1);
if ((i2647 ==  (int64_t)1)) {
i2647 =  (int64_t)0;
i2646 = (i2646 +  (int64_t)1);
if ((i2646 ==  (int64_t)1)) {
i2646 =  (int64_t)0;
i2645 = (i2645 +  (int64_t)1);
if ((i2645 ==  (int64_t)512)) {
i2645 =  (int64_t)0;
i2644 = (i2644 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)2048,  (int32_t)512,  (int32_t)1,  (int32_t)1, tmp61);

uint64_t* tmp1155 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1151, tmp1153, tmp1155);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp1153);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)512, tmp1151);

uint64_t* tmp1158 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048);

int64_t i2656;

int64_t i2655;

int64_t i2654;

int64_t i2653;

int64_t i2652;
i2652 =  (int64_t)0;
for (uint64_t i2653 =  (int32_t)0; i2653 <  (int32_t)1; i2653++){
for (uint64_t i2654 =  (int32_t)0; i2654 <  (int32_t)1; i2654++){
for (uint64_t i2655 =  (int32_t)0; i2655 <  (int32_t)1; i2655++){
for (uint64_t i2656 =  (int32_t)0; i2656 <  (int32_t)2048; i2656++){
Arr4DIdxRowM(tmp1158, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i2653,i2654,i2655,i2656) = Arr1DIdxRowM(tmp54, (int32_t)2048,i2652);
i2652 = (i2652 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)2048, tmp54);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1158,  (int32_t)12);

uint64_t* tmp1160 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1160, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1155, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1158, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)2048,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp1158);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1155);

uint64_t* tmp1163 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2664;

int64_t i2663;

int64_t i2662;

int64_t i2661;

int64_t i2660;

int64_t i2659;

int64_t i2658;

int64_t i2657;
i2657 =  (int64_t)0;
i2658 =  (int64_t)0;
i2659 =  (int64_t)0;
i2660 =  (int64_t)0;
for (uint64_t i2661 =  (int32_t)0; i2661 <  (int32_t)1; i2661++){
for (uint64_t i2663 =  (int32_t)0; i2663 <  (int32_t)8; i2663++){
for (uint64_t i2664 =  (int32_t)0; i2664 <  (int32_t)8; i2664++){
for (uint64_t i2662 =  (int32_t)0; i2662 <  (int32_t)2048; i2662++){
Arr4DIdxRowM(tmp1163, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2661,i2662,i2663,i2664) = Arr4DIdxRowM(tmp1160, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2657,i2658,i2659,i2660);
i2660 = (i2660 +  (int64_t)1);
if ((i2660 ==  (int64_t)2048)) {
i2660 =  (int64_t)0;
i2659 = (i2659 +  (int64_t)1);
if ((i2659 ==  (int64_t)8)) {
i2659 =  (int64_t)0;
i2658 = (i2658 +  (int64_t)1);
if ((i2658 ==  (int64_t)8)) {
i2658 =  (int64_t)0;
i2657 = (i2657 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1160);

uint64_t* tmp1165 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2672;

int64_t i2671;

int64_t i2670;

int64_t i2669;

int64_t i2668;

int64_t i2667;

int64_t i2666;

int64_t i2665;
i2665 =  (int64_t)0;
i2666 =  (int64_t)0;
i2667 =  (int64_t)0;
i2668 =  (int64_t)0;
for (uint64_t i2669 =  (int32_t)0; i2669 <  (int32_t)1; i2669++){
for (uint64_t i2672 =  (int32_t)0; i2672 <  (int32_t)2048; i2672++){
for (uint64_t i2670 =  (int32_t)0; i2670 <  (int32_t)8; i2670++){
for (uint64_t i2671 =  (int32_t)0; i2671 <  (int32_t)8; i2671++){
Arr4DIdxRowM(tmp1165, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2669,i2670,i2671,i2672) = Arr4DIdxRowM(tmp1163, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2665,i2666,i2667,i2668);
i2668 = (i2668 +  (int64_t)1);
if ((i2668 ==  (int64_t)8)) {
i2668 =  (int64_t)0;
i2667 = (i2667 +  (int64_t)1);
if ((i2667 ==  (int64_t)8)) {
i2667 =  (int64_t)0;
i2666 = (i2666 +  (int64_t)1);
if ((i2666 ==  (int64_t)2048)) {
i2666 =  (int64_t)0;
i2665 = (i2665 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1163);

uint64_t* tmp1167 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2680;

int64_t i2679;

int64_t i2678;

int64_t i2677;

int64_t i2676;

int64_t i2675;

int64_t i2674;

int64_t i2673;
i2673 =  (int64_t)0;
i2674 =  (int64_t)0;
i2675 =  (int64_t)0;
i2676 =  (int64_t)0;
for (uint64_t i2677 =  (int32_t)0; i2677 <  (int32_t)1; i2677++){
for (uint64_t i2680 =  (int32_t)0; i2680 <  (int32_t)2048; i2680++){
for (uint64_t i2678 =  (int32_t)0; i2678 <  (int32_t)8; i2678++){
for (uint64_t i2679 =  (int32_t)0; i2679 <  (int32_t)8; i2679++){
Arr4DIdxRowM(tmp1167, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2677,i2678,i2679,i2680) = Arr4DIdxRowM(tmp1111, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2673,i2674,i2675,i2676);
i2676 = (i2676 +  (int64_t)1);
if ((i2676 ==  (int64_t)8)) {
i2676 =  (int64_t)0;
i2675 = (i2675 +  (int64_t)1);
if ((i2675 ==  (int64_t)8)) {
i2675 =  (int64_t)0;
i2674 = (i2674 +  (int64_t)1);
if ((i2674 ==  (int64_t)2048)) {
i2674 =  (int64_t)0;
i2673 = (i2673 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1111);
ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1167,  (int32_t)12);

uint64_t* tmp1169 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)8; i1++){
for (uint64_t i2 =  (int32_t)0; i2 <  (int32_t)8; i2++){
for (uint64_t i3 =  (int32_t)0; i3 <  (int32_t)2048; i3++){
Arr4DIdxRowM(tmp1169, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1165, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3), Arr4DIdxRowM(tmp1167, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1167);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1165);

uint64_t* tmp1172 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2688;

int64_t i2687;

int64_t i2686;

int64_t i2685;

int64_t i2684;

int64_t i2683;

int64_t i2682;

int64_t i2681;
i2681 =  (int64_t)0;
i2682 =  (int64_t)0;
i2683 =  (int64_t)0;
i2684 =  (int64_t)0;
for (uint64_t i2685 =  (int32_t)0; i2685 <  (int32_t)1; i2685++){
for (uint64_t i2687 =  (int32_t)0; i2687 <  (int32_t)8; i2687++){
for (uint64_t i2688 =  (int32_t)0; i2688 <  (int32_t)8; i2688++){
for (uint64_t i2686 =  (int32_t)0; i2686 <  (int32_t)2048; i2686++){
Arr4DIdxRowM(tmp1172, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2685,i2686,i2687,i2688) = Arr4DIdxRowM(tmp1169, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2681,i2682,i2683,i2684);
i2684 = (i2684 +  (int64_t)1);
if ((i2684 ==  (int64_t)2048)) {
i2684 =  (int64_t)0;
i2683 = (i2683 +  (int64_t)1);
if ((i2683 ==  (int64_t)8)) {
i2683 =  (int64_t)0;
i2682 = (i2682 +  (int64_t)1);
if ((i2682 ==  (int64_t)8)) {
i2682 =  (int64_t)0;
i2681 = (i2681 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1169);

uint64_t* tmp1174 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2696;

int64_t i2695;

int64_t i2694;

int64_t i2693;

int64_t i2692;

int64_t i2691;

int64_t i2690;

int64_t i2689;
i2689 =  (int64_t)0;
i2690 =  (int64_t)0;
i2691 =  (int64_t)0;
i2692 =  (int64_t)0;
for (uint64_t i2693 =  (int32_t)0; i2693 <  (int32_t)1; i2693++){
for (uint64_t i2696 =  (int32_t)0; i2696 <  (int32_t)2048; i2696++){
for (uint64_t i2694 =  (int32_t)0; i2694 <  (int32_t)8; i2694++){
for (uint64_t i2695 =  (int32_t)0; i2695 <  (int32_t)8; i2695++){
Arr4DIdxRowM(tmp1174, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2693,i2694,i2695,i2696) = Arr4DIdxRowM(tmp1172, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2689,i2690,i2691,i2692);
i2692 = (i2692 +  (int64_t)1);
if ((i2692 ==  (int64_t)8)) {
i2692 =  (int64_t)0;
i2691 = (i2691 +  (int64_t)1);
if ((i2691 ==  (int64_t)8)) {
i2691 =  (int64_t)0;
i2690 = (i2690 +  (int64_t)1);
if ((i2690 ==  (int64_t)2048)) {
i2690 =  (int64_t)0;
i2689 = (i2689 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1172);

uint64_t* tmp1176 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1174, tmp1176,  kScale, kDoExtractTruncate);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1174);

uint64_t* tmp1178 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8);

int64_t i2704;

int64_t i2703;

int64_t i2702;

int64_t i2701;

int64_t i2700;

int64_t i2699;

int64_t i2698;

int64_t i2697;
i2697 =  (int64_t)0;
i2698 =  (int64_t)0;
i2699 =  (int64_t)0;
i2700 =  (int64_t)0;
for (uint64_t i2701 =  (int32_t)0; i2701 <  (int32_t)1; i2701++){
for (uint64_t i2703 =  (int32_t)0; i2703 <  (int32_t)8; i2703++){
for (uint64_t i2704 =  (int32_t)0; i2704 <  (int32_t)8; i2704++){
for (uint64_t i2702 =  (int32_t)0; i2702 <  (int32_t)2048; i2702++){
Arr4DIdxRowM(tmp1178, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2701,i2702,i2703,i2704) = Arr4DIdxRowM(tmp1176, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2697,i2698,i2699,i2700);
i2700 = (i2700 +  (int64_t)1);
if ((i2700 ==  (int64_t)2048)) {
i2700 =  (int64_t)0;
i2699 = (i2699 +  (int64_t)1);
if ((i2699 ==  (int64_t)8)) {
i2699 =  (int64_t)0;
i2698 = (i2698 +  (int64_t)1);
if ((i2698 ==  (int64_t)8)) {
i2698 =  (int64_t)0;
i2697 = (i2697 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1176);

uint64_t* tmp1180 = make_array<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048);

int64_t i2712;

int64_t i2711;

int64_t i2710;

int64_t i2709;

int64_t i2708;

int64_t i2707;

int64_t i2706;

int64_t i2705;
i2705 =  (int64_t)0;
i2706 =  (int64_t)0;
i2707 =  (int64_t)0;
i2708 =  (int64_t)0;
for (uint64_t i2709 =  (int32_t)0; i2709 <  (int32_t)1; i2709++){
for (uint64_t i2712 =  (int32_t)0; i2712 <  (int32_t)2048; i2712++){
for (uint64_t i2710 =  (int32_t)0; i2710 <  (int32_t)8; i2710++){
for (uint64_t i2711 =  (int32_t)0; i2711 <  (int32_t)8; i2711++){
Arr4DIdxRowM(tmp1180, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)2048,i2709,i2710,i2711,i2712) = Arr4DIdxRowM(tmp1178, (int32_t)1, (int32_t)2048, (int32_t)8, (int32_t)8,i2705,i2706,i2707,i2708);
i2708 = (i2708 +  (int64_t)1);
if ((i2708 ==  (int64_t)8)) {
i2708 =  (int64_t)0;
i2707 = (i2707 +  (int64_t)1);
if ((i2707 ==  (int64_t)8)) {
i2707 =  (int64_t)0;
i2706 = (i2706 +  (int64_t)1);
if ((i2706 ==  (int64_t)2048)) {
i2706 =  (int64_t)0;
i2705 = (i2705 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)8,  (int32_t)8, tmp1178);

uint64_t* tmp1182 = make_array<uint64_t>( (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)2048);
AvgPool( (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)2048,  (int32_t)7,  (int32_t)7,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1180, tmp1182);
ClearMemSecret4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)2048, tmp1180);

uint64_t* tmp1184 = make_array<uint64_t>( (int32_t)1,  (int32_t)2048,  (int32_t)2,  (int32_t)2);

int64_t i2720;

int64_t i2719;

int64_t i2718;

int64_t i2717;

int64_t i2716;

int64_t i2715;

int64_t i2714;

int64_t i2713;
i2713 =  (int64_t)0;
i2714 =  (int64_t)0;
i2715 =  (int64_t)0;
i2716 =  (int64_t)0;
for (uint64_t i2717 =  (int32_t)0; i2717 <  (int32_t)1; i2717++){
for (uint64_t i2719 =  (int32_t)0; i2719 <  (int32_t)2; i2719++){
for (uint64_t i2720 =  (int32_t)0; i2720 <  (int32_t)2; i2720++){
for (uint64_t i2718 =  (int32_t)0; i2718 <  (int32_t)2048; i2718++){
Arr4DIdxRowM(tmp1184, (int32_t)1, (int32_t)2048, (int32_t)2, (int32_t)2,i2717,i2718,i2719,i2720) = Arr4DIdxRowM(tmp1182, (int32_t)1, (int32_t)2, (int32_t)2, (int32_t)2048,i2713,i2714,i2715,i2716);
i2716 = (i2716 +  (int64_t)1);
if ((i2716 ==  (int64_t)2048)) {
i2716 =  (int64_t)0;
i2715 = (i2715 +  (int64_t)1);
if ((i2715 ==  (int64_t)2)) {
i2715 =  (int64_t)0;
i2714 = (i2714 +  (int64_t)1);
if ((i2714 ==  (int64_t)2)) {
i2714 =  (int64_t)0;
i2713 = (i2713 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)2048, tmp1182);

uint64_t* tmp1186 = make_array<uint64_t>( (int32_t)1,  (int32_t)8192);

int64_t i2726;

int64_t i2725;

int64_t i2724;

int64_t i2723;

int64_t i2722;

int64_t i2721;
i2721 =  (int64_t)0;
i2722 =  (int64_t)0;
i2723 =  (int64_t)0;
i2724 =  (int64_t)0;
for (uint64_t i2725 =  (int32_t)0; i2725 <  (int32_t)1; i2725++){
for (uint64_t i2726 =  (int32_t)0; i2726 <  (int32_t)8192; i2726++){
Arr2DIdxRowM(tmp1186, (int32_t)1, (int32_t)8192,i2725,i2726) = Arr4DIdxRowM(tmp1184, (int32_t)1, (int32_t)2048, (int32_t)2, (int32_t)2,i2721,i2722,i2723,i2724);
i2724 = (i2724 +  (int64_t)1);
if ((i2724 ==  (int64_t)2)) {
i2724 =  (int64_t)0;
i2723 = (i2723 +  (int64_t)1);
if ((i2723 ==  (int64_t)2)) {
i2723 =  (int64_t)0;
i2722 = (i2722 +  (int64_t)1);
if ((i2722 ==  (int64_t)2048)) {
i2722 =  (int64_t)0;
i2721 = (i2721 +  (int64_t)1);
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)2048,  (int32_t)2,  (int32_t)2, tmp1184);
ScaleUp1( (int32_t)200, tmp2,  (int32_t)12);

uint64_t* tmp1189 = make_array<uint64_t>( (int32_t)1,  (int32_t)200);

uint64_t* tmp1188 = make_array<uint64_t>( (int32_t)8192,  (int32_t)200);

int64_t i2728;

int64_t i2727;
for (uint64_t i2727 =  (int32_t)0; i2727 <  (int32_t)200; i2727++){
for (uint64_t i2728 =  (int32_t)0; i2728 <  (int32_t)8192; i2728++){
Arr2DIdxRowM(tmp1188, (int32_t)8192, (int32_t)200,i2728,i2727) = Arr2DIdxRowM(tmp1, (int32_t)200, (int32_t)8192,i2727,i2728);
}
}
MatMul2D( (int32_t)1,  (int32_t)8192,  (int32_t)200, tmp1186, tmp1188, tmp1189, 0);

uint64_t* tmp1190 = make_array<uint64_t>( (int32_t)1,  (int32_t)200);
for (uint64_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (int32_t)0; i1 <  (int32_t)200; i1++){
Arr2DIdxRowM(tmp1190, (int32_t)1, (int32_t)200,i0,i1) = SecretAdd(Arr2DIdxRowM(tmp1189, (int32_t)1, (int32_t)200,i0,i1), Arr1DIdxRowM(tmp2, (int32_t)200,i1));
}
}
ClearMemSecret1( (int32_t)200, tmp2);
ClearMemSecret2( (int32_t)1,  (int32_t)8192, tmp1186);
ClearMemSecret2( (int32_t)200,  (int32_t)8192, tmp1);
ScaleDown2( (int32_t)1,  (int32_t)200, tmp1190,  (int32_t)12);
EndComputation();
for (uint64_t i0 =  (uint64_t)0; i0 <  (int32_t)1; i0++){
for (uint64_t i1 =  (uint64_t)0; i1 <  (int32_t)200; i1++){
cout << (funcReconstruct2PCCons(Arr2DIdxRowM(tmp1190, (int32_t)1, (int32_t)200,i0,i1), 2)) << endl;
}
}
}

